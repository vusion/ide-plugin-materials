(()=>{"use strict";var e={871:(e,n,t)=>{t.d(n,{Z:()=>r});var l=t(481),o=t.n(l),a=t(966),i=t.n(a)()(o());i.push([e.id,"\n.tableCell[data-v-4dd96507] .cell {\n    padding: 0;\n    line-height: 20px;\n    padding-left: 6px;\n}\n.theadLable[data-v-4dd96507] {\n    overflow: visible;\n    width: 100%;\n    padding-left: 6px;\n    border-right: 1px solid var(--entity-designer-property-dragger-border-color);\n}\n.topIconGroup[data-v-4dd96507] {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 8px;\n    background-color: var(--entity-designer-icon-group-background-color);\n    padding: 5px 24px;\n    border-bottom: 1px solid var(--entity-designer-icon-group-border-color);\n    position: sticky;\n    z-index: 9;\n    top: 64px;\n}\n.icon[data-v-4dd96507] {\n    margin-right: 8px;\n}\n.extraForm[data-v-4dd96507] .el-form-item__label {\n    font-size: 12px;\n}\n[data-v-4dd96507] .row-style {\n    border: 1px solid #4d87fe;\n}\n[data-v-4dd96507] .cell-style {\n    border-bottom: 1px solid #409eff;\n}\n.elFormFlex[data-v-4dd96507] {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-wrap: wrap;\n}\n","",{version:3,sources:["webpack://./src/components/EntityPropertyDesigner.vue"],names:[],mappings:";AAs4DE;IACE,UAAU;IACV,iBAAiB;IACjB,iBAAiB;AACnB;AACA;IACE,iBAAiB;IACjB,WAAW;IACX,iBAAiB;IACjB,4EAA4E;AAC9E;AACA;IACE,aAAa;IACb,mBAAmB;IACnB,2BAA2B;IAC3B,QAAQ;IACR,oEAAoE;IACpE,iBAAiB;IACjB,uEAAuE;IACvE,gBAAgB;IAChB,UAAU;IACV,SAAS;AACX;AAEA;IACE,iBAAiB;AACnB;AAEA;IACE,eAAe;AACjB;AAEA;IACE,yBAAyB;AAC3B;AAEA;IACE,gCAAgC;AAClC;AAEA;IACE,aAAa;IACb,2BAA2B;IAC3B,mBAAmB;IACnB,eAAe;AACjB",sourcesContent:['<template>\n  <div>\n    <div\n      v-if="!isViewEntity"\n      class="topIconGroup"\n      :class="$style.body"\n      style="margin-top: 0px; margin-bottom: 0px; border-bottom: 0px; height: 40px"\n    >\n      \x3c!-- 添加实体属性 --\x3e\n      <s-others-icon name="add" tooltip="添加属性" button @click="handleAddItem"></s-others-icon>\n      \x3c!-- 删除实体属性 --\x3e\n      <s-others-icon\n        name="remove"\n        button\n        :tooltip="getRemoveTooltip()"\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          selectedItem.naslNode.primaryKey ||\n          isOfficalEntityProperty(selectedItem)\n        "\n        @click="removeItem(selectedItem)"\n      ></s-others-icon>\n      <div :class="$style.icondivider">|</div>\n      \x3c!-- 上移实体属性 --\x3e\n      <s-others-icon\n        name="position-up"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置顶\'\n            : \'上移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveUpItem"\n      ></s-others-icon>\n      \x3c!-- 下移实体属性 --\x3e\n      <s-others-icon\n        name="position-down"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置底\'\n            : \'下移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveDownItem"\n      ></s-others-icon>\n      \x3c!-- 一键添加到备选字段库 --\x3e\n      <el-button v-if="showReflowBtn" :loading="reflowLoading" @click="addReflowField">一键添加到备选字段库</el-button>\n    </div>\n    <div :class="$style.body" style="margin-top: 0px">\n      <div :class="$style.bodywrap" class="tableCell">\n        <el-table\n          ref="tableviewRef"\n          :data="renderList"\n          highlight-current-row\n          :style="`min-width:950px;${tableHeight}`"\n          style="width: 100%"\n          :class="\n            renderList.length > 8\n              ? [$style.table, $style.tablescroll, \'s-data-table-edit\']\n              : [$style.table, \'s-data-table-edit\']\n          "\n          :value="selectedItem && selectedItem.naslNode.name"\n          value-field="name"\n          :header-row-style="{ height: \'40px\' }"\n          :cell-style="{ padding: \'0px\' }"\n          :row-style="{ height: \'42px\' }"\n          :row-class-name="setRowClassName"\n          empty-text="暂无数据"\n          @row-contextmenu="onContextMenuRow"\n          @row-click="onSelectRowWithDataType"\n          @header-dragend="handleDragend"\n          @click.right.prevent\n          :border="true"\n        >\n          \x3c!-- 主键/关联属性的icon --\x3e\n          <el-table-column width="38" prop="primaryKey" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <s-others-icon\n                  v-if="item.naslNode.primaryKey"\n                  name="key"\n                  :class="[$style.iconBase, $style.iconKey]"\n                ></s-others-icon>\n                <s-others-icon\n                  v-if="item.naslNode.relationProperty"\n                  name="link"\n                  :class="[$style.iconBase, $style.iconLink]"\n                ></s-others-icon>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 标题 --\x3e\n          <el-table-column prop="label" min-width="107" label="字段注释">\n            <template #header>\n              <div class="theadLable">字段注释</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!item.loading && !item.naslNode.parentNode.loading && !isViewEntity">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'label\'"\n                  :class="$style.edit"\n                  @dblclick="onSetItemEdit(item, \'label\', true)"\n                  tabindex="0"\n                  @keyup="onKeyUp($event, item, \'label\')"\n                  :title="item.naslNode.label"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.label }}</span>\n                    <s-others-icon\n                      v-show="!isOfficalEntityProperty(item)"\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'label\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    ref="labelValidatorRef"\n                    v-slot="slotProps"\n                    :value="item.naslNode.label"\n                    rules="maxLength(63)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurLabel(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    <s-input\n                      placeholder="请输入标题"\n                      :model-value="item.naslNode.label"\n                      ref="labelEditor"\n                      :class="$style.input"\n                      @focus="handleLabelFocus(item.naslNode.label)"\n                      @blur:value="handleLabelBlur($event, slotProps, item)"\n                      @input="handleLabelInput($event, slotProps)"\n                      @keyup.enter="$event.target.blur()"\n                    ></s-input>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                \x3c!-- 之前仅仅为 item.label 但是实际上在item 对象中没有label属性，恐在特殊情况下存在，故范围限制为 区分 viewEntity --\x3e\n                <span>{{ isViewEntity ? item.naslNode.label : item.label }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 名称 --\x3e\n          <el-table-column label="字段名" prop="name" min-width="87">\n            <template #header>\n              <div class="theadLable">字段名</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!getDisable(item)">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'name\'"\n                  tabindex="0"\n                  :class="$style.edit"\n                  :title="item.naslNode.name"\n                  @dblclick="onSetItemEdit(item, \'name\', true)"\n                  @keyup="onKeyUp($event, item, \'name\')"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.name }}</span>\n                    <s-others-icon\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'name\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    v-slot="slotProps"\n                    :value="item.naslNode.name"\n                    :rules="getEntityPropertyRules(item.naslNode)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurName(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    \x3c!-- “属性名”为空是显示提示信息 --\x3e\n                    <el-tooltip\n                      :visible="tooltipOpened === \'entityAttribute\' && !itemNameValue"\n                      placement="top-start"\n                      content="属性为英文字母、数字和下划线，且首字母小写"\n                    >\n                      <s-input\n                        :placeholder="entityPropertyPlaceholder"\n                        :model-value="item.naslNode.name"\n                        ref="nameEditor"\n                        :class="$style.input"\n                        @focus="onFocusName(item)"\n                        @blur:value="slotProps.blurFn($event)"\n                        @input="slotProps.inputChange($event)"\n                        @keyup.enter="$event.target.blur()"\n                        @update:modelValue="itemNameValue = $event"\n                      ></s-input>\n                    </el-tooltip>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                <span>{{ item.naslNode.name }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 数据类型 --\x3e\n          <el-table-column label="数据类型" min-width="247">\n            <template #header>\n              <div class="theadLable">数据类型</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <el-tooltip v-if="isAppDeploying" content="应用发布中，暂不能修改" placement="bottom-start">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </el-tooltip>\n                \x3c!-- 禁用状态 / 已经发布过的复合类型 --\x3e\n                <template v-else-if="getDisable(item) || isPublishedComplexType(item)">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </template>\n                \x3c!-- 非禁用状态 --\x3e\n                <template v-else>\n                  \x3c!-- 展示态 --\x3e\n                  <div\n                    v-if="item.edit !== \'datatype\'"\n                    tabindex="0"\n                    :class="$style.edit"\n                    :ref="`datatype${item.naslNode.id}`"\n                    :title="showDatatype(item)"\n                    @dblclick="onDblClickDatatype(item, $event)"\n                    @keyup="onKeyUp($event, item, \'datatype\')"\n                  >\n                    <div :class="$style.text">\n                      <span :class="$style.textContent">{{ showDatatype(item) }}</span>\n                      <s-others-icon\n                        name="edit"\n                        :class="[$style.iconBase, $style.iconEdit]"\n                        @click="(getDataTypeList(), onSetItemEdit(item, \'datatype\', false))"\n                      ></s-others-icon>\n                    </div>\n                  </div>\n                  \x3c!-- 编辑态 --\x3e\n                  <div v-else :class="$style.editwrap">\n                    <el-tooltip :content="`${isAppDeploying ? \'应用发布中，暂不能修改\' : \'\'}`" placement="bottom-start">\n                      <s-datatype-select\n                        :unionable="false"\n                        :no-union-subtype="true"\n                        :data-type-list="item.naslNode.lastVersion ? dataTypeList : undefined"\n                        :last-version="item.naslNode.lastVersion"\n                        :type-annotation="item.naslNode.typeAnnotation"\n                        :concept="item.naslNode.entity.concept"\n                        :show-system-types="false"\n                        :show-generic-types="true"\n                        :show-entity="true"\n                        :show-structures="true"\n                        :emptyable="false"\n                        :hasAnonymousStructure="true"\n                        :disabled="item.naslNode.readonly || isAppDeploying || isPublishedComplexType(item)"\n                        @blur="handleBlur(item)"\n                        @change="onChangeDatatype"\n                      ></s-datatype-select>\n                    </el-tooltip>\n                  </div>\n                </template>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 是否必填 --\x3e\n          <el-table-column label="是否必填" width="70" prop="required" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else style="margin-left: 16px">\n                <el-checkbox\n                  v-model="item.naslNode.required"\n                  :disabled="getDisable(item) || isComplexType(item) || isOfficalEntity(item)"\n                  :tabindex="item.editable === false || item.loading || item.naslNode.parentNode.loading ? -1 : 0"\n                  :class="$style.checkbox"\n                  @change="requireInput(item, $event)"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 默认值 --\x3e\n          <el-table-column label="默认值" prop="defaultValue" width="120" :resizable="false">\n            <template #default="{ row: item }">\n              <div v-if="[\'createdTime\', \'updatedTime\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>自动生成</span>\n              </div>\n              <div v-else-if="[\'createdBy\', \'updatedBy\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>（无）</span>\n              </div>\n              <template v-else-if="!canSetDefaultValue(item)">\n                <div :class="$style.text">\n                  <span>（无）</span>\n                </div>\n              </template>\n              <template\n                v-else-if="\n                  item.loading || item.naslNode.parentNode.loading || item.naslNode.generationRule !== \'manual\'\n                "\n              >\n                <div :class="$style.text">\n                  <div :class="$style.text" v-if="item.naslNode.generationRule === \'auto\'">\n                    <span>自动生成</span>\n                  </div>\n                  <span v-else>{{ item.naslNode.defaultValue }}</span>\n                </div>\n              </template>\n              <template v-else>\n                <s-attr-input\n                  title="默认值绑定"\n                  node-concept="defaultValue"\n                  :name="item.naslNode.name"\n                  :parent-node="item.naslNode"\n                  :node="item.naslNode.defaultValue"\n                  :class="{\n                    [$style.typeError]: IsError(item.naslNode),\n                  }"\n                ></s-attr-input>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表格 --\x3e\n          <el-table-column width="100" prop="display.inTable" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表格"\n                :class="$style.checkbolabel"\n                :model-value="inTable"\n                @change="toggleSelectAll($event, \'inTable\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inTable"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inTable\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在筛选 --\x3e\n          <el-table-column width="100" prop="display.inFilter" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在筛选"\n                :class="$style.checkbolabel"\n                :model-value="inFilter"\n                @change="toggleSelectAll($event, \'inFilter\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inFilter"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inFilter\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表单 --\x3e\n          <el-table-column width="100" prop="display.inForm" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表单"\n                :class="$style.checkbolabel"\n                :model-value="inForm"\n                @change="toggleSelectAll($event, \'inForm\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inForm"\n                  :class="$style.checkbox"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  @change="setDisplay(item, $event, \'inForm\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在详情 --\x3e\n          <el-table-column width="100" prop="display.inDetail" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在详情"\n                :class="$style.checkbolabel"\n                :model-value="inDetail"\n                @change="toggleSelectAll($event, \'inDetail\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inDetail"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inDetail\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n        </el-table>\n        \x3c!-- 右键点击 --\x3e\n        <el-popover\n          :disabled-scroll="true"\n          trigger="click"\n          ref="menuPopper"\n          :popper-options="popperOptions"\n          v-if="menuSelectedItem && popperExistMap[menuSelectedItem.id]"\n          v-model:visible="popperVisibleMap[menuSelectedItem && menuSelectedItem.id]"\n          :virtual-ref="triggerRef"\n          :placement="placement"\n          :show-arrow="false"\n          @hide="onMenuPopperHide"\n        >\n          <el-menu :class="$contextmenu.menu" @click="onMenuClick">\n            <el-menu-item-group :class="$contextmenu.group" title="属性">\n              <el-menu-item :class="$contextmenu.item" @click="onMenuFindUsage">查找引用</el-menu-item>\n              <el-menu-item\n                :class="$contextmenu.item"\n                @click="onMenuDelete(removeItem)"\n                :disabled="\n                  (menuSelectedItem && menuSelectedItem.primaryKey) ||\n                  isOfficalEntityProperty({\n                    naslNode: menuSelectedItem,\n                  }) ||\n                  isViewEntity\n                "\n              >\n                删除\n              </el-menu-item>\n            </el-menu-item-group>\n          </el-menu>\n        </el-popover>\n      </div>\n      <template v-if="selectedItem">\n        <div :class="[$style.flexgrid, $style.bodywrap1]">\n          <div :class="$style.gridcolumn" class="extraForm">\n            <el-form\n              ref="selectedItemForm"\n              :model="selectedItem"\n              :class="[$style.reffrom, $style.blockFromLayout, \'s-data-attr-designer-form\']"\n              label-width="85px"\n              label-position="right"\n              :inline="true"\n            >\n              \x3c!-- 最 大/小 值/长度 --\x3e\n              <skeleton-render\n                name="views/data/components/entity-field-rules/index"\n                :property="selectedItem.naslNode"\n                :key="\'rules_\' + selectedItem.naslNode.name"\n                :disabled="\n                  selectedItem.loading ||\n                  selectedItem.naslNode.parentNode.loading ||\n                  selectedItem.naslNode.editable === false ||\n                  isViewEntity\n                "\n                :is-view-entity="isViewEntity"\n                direction="horizontal"\n                :class="$style.rules"\n              />\n              \x3c!-- 小数位数 --\x3e\n              <el-form-item v-if="typeName === \'Decimal\'" label="小数位数">\n                <el-input-number\n                  placeholder="请输入小数位数"\n                  :color="scaleErrorMsg ? \'error\' : \'\'"\n                  v-model="model.scale"\n                  :min="scaleOption.min"\n                  :max="scaleOption.max"\n                  controls-position="right"\n                  :disabled="decimalDisabled(selectedItem) || isViewEntity"\n                  :value-on-clear="0"\n                  @keyup.enter="$event.target.blur()"\n                  @change="setScale"\n                ></el-input-number>\n                <div v-if="scaleErrorMsg" :class="$style.scaleErrorMsg">\n                  <s-others-icon name="solid-hint"></s-others-icon>\n                  {{ scaleErrorMsg }}\n                </div>\n              </el-form-item>\n              \x3c!-- 关联属性 --\x3e\n              <el-form-item :key="selectedItem.naslNode.name">\n                <template #label>\n                  <div style="display: flex; align-items: center">\n                    关联属性\n                    <s-others-icon name="link2" :class="$style.iconLink2"></s-others-icon>\n                  </div>\n                </template>\n                <skeleton-render\n                  name="views/data/entity-reference/index"\n                  :entity="entity"\n                  :property="selectedItem.naslNode"\n                  :value="entityReference"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  :data-type-list="selectedItem.naslNode.lastVersion ? dataTypeList : undefined"\n                  :error="isReleationEntityError(selectedItem.naslNode)"\n                  @save="onSaveReference"\n                  @clear="onClearReference"\n                />\n              </el-form-item>\n              \x3c!-- 属性记录 --\x3e\n              <el-form-item\n                label="关联属性实体记录删除规则"\n                v-if="selectedItem.naslNode.relationProperty"\n                layout="block"\n                class="relationDelRule"\n              >\n                <el-select\n                  style="width: 240px"\n                  v-model="selectedItem.naslNode.deleteRule"\n                  placeholder="请选择"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  @change="setDeleteRule"\n                >\n                  <el-option label="不允许删除" value="protect"></el-option>\n                  <el-option label="允许删除且同时删除本实体记录" value="cascade"></el-option>\n                </el-select>\n              </el-form-item>\n              \x3c!-- 主键生成规则 --\x3e\n              <el-form-item v-if="selectedItem.naslNode.primaryKey" label="主键生成规则" placement="bottom">\n                <skeleton-render\n                  name="views/data/components/entity-primarykey-rules/index"\n                  :disabled="isViewEntity"\n                  :entity="entity"\n                  :selected-item="selectedItem.naslNode"\n                  @changeErrorMsgs="changeErrorMsgs"\n                />\n              </el-form-item>\n              \x3c!-- 数据库列名 --\x3e\n              <el-form-item label="数据库列名" placement="bottom">\n                <u-validator\n                  ref="columnNameValidatorRef"\n                  style="width: 100%"\n                  :rules="entityPropertyColumnNameRules"\n                  :value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                  @blur-dirty-valid="selectedItem.naslNode.setColumnName($event.value)"\n                  v-slot="slotProps"\n                >\n                  <s-input\n                    :placeholder="entityPropertyColumnNamePlaceholder"\n                    :model-value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                    :disabled="isTableOrExcelOrigin || isViewEntity"\n                    @change="slotProps.blurChange"\n                    @input="slotProps.inputChange($event)"\n                    @keyup.enter.stop="$event.target.blur()"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n              \x3c!-- 描述 --\x3e\n              <el-form-item label="描述" prop="description">\n                <u-validator\n                  v-slot="slotProps"\n                  :value="selectedItem.naslNode.description"\n                  rules="maxLength(63)"\n                  :class="$style.validator"\n                  @blur-valid="onBlurDescription(selectedItem, $event.value)"\n                  @blur-invalid="errorScrollIntoView"\n                  @validate-result="hasInvalid = !$event.valid"\n                >\n                  <s-input\n                    type="textarea"\n                    ref="descriptionEditor"\n                    placeholder="请输入描述"\n                    :model-value="selectedItem.naslNode.description"\n                    :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                    @blur:value="slotProps.blurFn($event)"\n                    @keyup.enter="slotProps.blurFn()"\n                    @input="slotProps.inputChange($event)"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n            </el-form>\n          </div>\n        </div>\n        <div :class="$style.advancedWrap" v-if="showDatabasetype">\n          <el-form :disabled="isViewEntity" label-width="80px" gap="small" class="s-data-attr-designer-form">\n            <skeleton-render\n              name="views/data/components/entity-property-databasetype/index"\n              :property="selectedItem.naslNode"\n            />\n          </el-form>\n        </div>\n      </template>\n      <div :class="$style.bodywrap1" v-show="errorMsgs.length || sourceSyncErrMsgs.length">\n        <div v-for="errorMsg in errorMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n        \x3c!-- 实体在同步数据源时产生的错误信息 --\x3e\n        <div v-for="errorMsg in sourceSyncErrMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n      </div>\n    </div>\n    \x3c!-- 查询弹出框 --\x3e\n    <el-popover\n      :visible="reflowPopoverVisible"\n      :virtual-ref="labelEditor"\n      :show-arrow="false"\n      placement="bottom-start"\n      :width="340"\n      virtual-triggering\n    >\n      <div class="reflowPopover" v-loading="reflowPopoverLoading">\n        <div class="reflowPopoverEmpty" v-if="fieldList.length === 0">\n          <s-others-icon name="hint" class="centerFlex" style="font-size: 28px; margin-bottom: 20px"></s-others-icon>\n          <span class="centerFlex">暂无推荐字段</span>\n        </div>\n        <div v-else>\n          <el-scrollbar height="250px">\n            <div\n              class="reflowPopoverItem"\n              v-for="item in fieldList"\n              :key="item.id"\n              @mouseenter="activeItem = item"\n              @mouseleave="activeItem = null"\n            >\n              <el-row :gutter="10">\n                <el-col :span="9" class="sle">\n                  <el-tooltip :content="item.name" placement="top" :show-after="500" :disabled="!isTextOverflow">\n                    <div\n                      class="tooltip-trigger"\n                      v-html="getFieldName(item.name, item.matchedNames)"\n                      @mouseenter="checkOverflow"\n                    ></div>\n                  </el-tooltip>\n                </el-col>\n                <el-col class="sle" :span="8">\n                  <el-tooltip\n                    :content="getFieldTypeTitle(item)"\n                    placement="top"\n                    :show-after="500"\n                    :disabled="!isTextOverflow"\n                  >\n                    <div class="tooltip-trigger" @mouseenter="checkOverflow">{{ getFieldTypeTitle(item) }}</div>\n                  </el-tooltip>\n                </el-col>\n                <el-col :span="4">\n                  {{ item.required ? \'必填\' : \'非必填\' }}\n                </el-col>\n                <el-col :span="3" v-show="activeItem?.id === item.id" style="color: #2383ff">使用</el-col>\n              </el-row>\n            </div>\n          </el-scrollbar>\n        </div>\n        <div style="height: 18px; margin-top: 10px">\n          <s-others-icon name="hint" class="warningIcon"></s-others-icon>\n          <span>输入_，可进行词根匹配</span>\n        </div>\n      </div>\n    </el-popover>\n    \x3c!-- 添加至备选数据库字段库弹窗 --\x3e\n    <el-dialog v-model="reflowDialogVisible" title="一键添加到备选字段库" width="50%">\n      <el-table\n        ref="reflowTableRef"\n        :data="reflowFieldList"\n        @select="handleSelectReflowField"\n        @select-all="handleSelectReflowField"\n      >\n        <el-table-column type="selection" width="40" />\n        <el-table-column label="字段注释" prop="label" />\n        <el-table-column label="字段名" prop="name" />\n        <el-table-column label="数据类型" prop="type" />\n        <el-table-column label="是否必填" prop="required">\n          <template #default="scope">\n            <span>{{ scope.row.required ? \'是\' : \'否\' }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label="字段长度" prop="length">\n          <template #default="scope">\n            <span>{{ getReflowFieldLength(scope.row) }}</span>\n          </template>\n        </el-table-column>\n      </el-table>\n      <template #footer>\n        <div class="reflowDialogFooter">\n          <el-button\n            type="primary"\n            :disabled="reflowConfirmBtnDisabled"\n            :loading="confirmLoading"\n            @click="handleUploadReflowField"\n          >\n            确 定\n          </el-button>\n          <el-button @click="reflowDialogVisible = false">取 消</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\n  import { inject, onMounted, ref, nextTick } from \'vue\';\n  import { ElMessage, ClickOutside as vClickOutside } from \'element-plus\';\n  import { requestApi, getIsReflowField, getFieldList, getReflowFieldList, uploadReflowField } from \'../apis\';\n  import { debounce } from \'../utils\';\n\n  const props = defineProps({\n    entity: Object,\n  });\n\n  const handleAddItem = () => {\n    addItem();\n    nextTick(() => {\n      onSetItemEdit(selectedItem.value, \'label\', true);\n    });\n  };\n\n  const showReflowBtn = ref(false);\n\n  const reflowPopoverVisible = ref(false);\n  const fieldList = ref([]);\n  const reflowQuery = ref(\'\');\n  const abortController = ref(null);\n  const requestId = ref(0); // 用于标识当前请求\n\n  const debounceQueryFieldList = debounce(() => {\n    // 设置loading状态\n    reflowPopoverLoading.value = true;\n\n    // 取消之前的请求\n    if (abortController.value) {\n      abortController.value.abort();\n    }\n\n    // 创建新的 AbortController 和请求ID\n    abortController.value = new AbortController();\n    const currentRequestId = ++requestId.value;\n\n    getFieldList({ query: reflowQuery.value }, abortController.value.signal)\n      .then(res => {\n        // 只有当前请求是最新的才更新数据\n        if (currentRequestId === requestId.value) {\n          fieldList.value = res.result || [];\n        }\n      })\n      .catch(err => {\n        if (err.name !== \'AbortError\') {\n          console.error(err);\n        }\n      })\n      .finally(() => {\n        // 只有当前请求是最新的才更新加载状态\n        if (currentRequestId === requestId.value) {\n          abortController.value = null;\n          reflowPopoverLoading.value = false;\n        }\n      });\n  }, 400);\n\n  const reflowPopoverLoading = ref(false);\n  const activeItem = ref(null);\n\n  const getFieldName = (name, matchedNames) => {\n    if (!name || typeof name !== \'string\') return \'\';\n    if (!Array.isArray(matchedNames)) return `<span style="color: red; font-weight: bold;">${name}</span>`;\n\n    const matchedSet = new Set(matchedNames.filter(item => item && typeof item === \'string\'));\n    const parts = name.split(/(_+)/);\n\n    return parts\n      .map(part => {\n        if (part.startsWith(\'_\')) return part;\n        return matchedSet.has(part) ? part : `<span style="color: red; font-weight: bold;">${part}</span>`;\n      })\n      .join(\'\');\n  };\n\n  const getFieldTypeTitle = item => {\n    if (item.type === \'String\') {\n      const stringLabel = getStringLabel(item.length);\n      return item.type + (stringLabel ? `  (${stringLabel})` : \'\');\n    }\n    return item.type;\n  };\n\n  const columnNameValidatorRef = ref(null);\n\n  const handleUseField = item => {\n    const target = selectedItem.value?.naslNode;\n    if (target?.concept === \'EntityProperty\') {\n      target.app.emit(\'collect:start\', { actionMsg: \'数据建模插件更新字段名\' });\n      const newName = target.parentNode?.getPropertyUniqueName?.(item.name) || item.name; // 保证字段名唯一\n      const typeName = item.type === \'Integer\' ? \'Long\' : item.type;\n      const updateData = {\n        name: newName,\n        columnName: newName,\n        required: item.required,\n        typeAnnotation: {\n          concept: \'TypeAnnotation\',\n          typeKind: \'primitive\',\n          typeNamespace: \'nasl.core\',\n          typeName,\n        },\n      };\n      if (item.type === \'String\' && item.length) {\n        const minRule = target.toJSON().rules.find(rule => rule.startsWith(\'minLength\'));\n        Object.assign(updateData, {\n          databaseTypeAnnotation: {\n            concept: \'DatabaseTypeAnnotation\',\n            typeName: \'varchar\',\n            arguments: {\n              length: item.length,\n            },\n          },\n          rules: [minRule, `maxLength(${item.length})`].filter(Boolean),\n        });\n      }\n      target.update(updateData);\n      setTimeout(() => {\n        // 延迟收集，把外层onBlurLabel的change也收集到这次的batchInstruct中\n        target.app.emit(\'collect:end\');\n      });\n\n      nextTick(async () => {\n        try {\n          const res = await columnNameValidatorRef.value?.validate();\n        } catch (error) {\n          // console.error(error);\n          // 新设置的字段名不符合规则，主动聚焦到输入框\n          onSetItemEdit(selectedItem.value, \'name\', true);\n        }\n      });\n    }\n  };\n\n  const handleLabelFocus = label => {\n    reflowQuery.value = label;\n  };\n\n  const handleLabelBlur = async (event, slotProps, item) => {\n    reflowPopoverVisible.value = false;\n    reflowQuery.value = \'\';\n    fieldList.value = [];\n\n    event = event.replace(/_/g, \'\'); // event 去除掉_\n\n    slotProps.blurFn(event); // 触发模版中原来的失焦逻辑\n    if (activeItem.value) {\n      handleUseField(activeItem.value);\n      activeItem.value = null;\n    }\n  };\n\n  const handleLabelInput = (event, slotProps) => {\n    reflowPopoverVisible.value = true;\n    reflowQuery.value = event;\n    slotProps.inputChange(event); // 触发模版中原有的修改逻辑\n    // 外置设置防抖查询loading状态\n    reflowPopoverLoading.value = true;\n    debounceQueryFieldList();\n  };\n\n  onMounted(() => {\n    getIsReflowField({}).then(res => {\n      showReflowBtn.value = res.result;\n    });\n  });\n\n  // 一键添加到备选字段库\n  const reflowLoading = ref(false);\n  const reflowFieldList = ref([]);\n\n  const addReflowField = () => {\n    reflowLoading.value = true;\n\n    const filterList = [\'id\', \'createdTime\', \'updatedTime\', \'createdBy\', \'updatedBy\'];\n    const filterRegex = /^property\\d+$|^.*[\\u4e00-\\u9fa5].*$/;\n\n    const properties = props.entity?.toJSON()?.properties || [];\n    const tempReflowFieldList = [];\n    const nameSet = new Set();\n    properties.forEach(property => {\n      if (\n        !property.label ||\n        filterList.includes(property.name) ||\n        filterRegex.test(property.name) ||\n        property.typeAnnotation?.typeKind !== \'primitive\'\n      ) {\n        return;\n      }\n      let type = property.typeAnnotation?.typeName || \'String\';\n      if (type === \'Long\') type = \'Integer\'; // 整数类型需要重命名为Integer\n      const propertyName = property.name.replace(/\\d+$/, \'\') || \'\';\n      if (nameSet.has(propertyName)) {\n        return;\n      }\n      nameSet.add(propertyName);\n      tempReflowFieldList.push({\n        name: propertyName,\n        label: property.label || \'\',\n        required: property.required || false,\n        type,\n        length: type === \'String\' ? property.databaseTypeAnnotation?.arguments?.length || 255 : void 0,\n      });\n    });\n    reflowFieldList.value = tempReflowFieldList;\n    if (reflowFieldList.length === 0) {\n      reflowLoading.value = false;\n      showMessage();\n      return;\n    }\n\n    // 备选库不需要校验字段唯一性，直接打开弹窗\n    requestApi(\n      getReflowFieldList,\n      {\n        list: tempReflowFieldList.map(item => ({\n          name: item.name,\n          label: item.label,\n        })),\n      },\n      res => {\n        if (res.result?.length === 0) {\n          showMessage();\n          return;\n        } else {\n          // 只有在res.result中的name，在tempReflowFieldList中存在，才显示\n          const set = new Set(res.result);\n          reflowFieldList.value = tempReflowFieldList.filter(item => set.has(item.name));\n          reflowDialogVisible.value = true;\n          nextTick(() => {\n            reflowConfirmBtnDisabled.value = false;\n            reflowTableRef.value.toggleAllSelection();\n          });\n        }\n      },\n      err => {\n        console.error(err);\n      },\n      () => {\n        reflowLoading.value = false;\n      }\n    );\n    // reflowDialogVisible.value = true;\n    // reflowLoading.value = false;\n    // nextTick(() => {\n    //   reflowConfirmBtnDisabled.value = false;\n    //   reflowTableRef.value.toggleAllSelection();\n    // });\n  };\n\n  // 显示[暂无可回流到备选数据库的字段]消息\n  const showMessage = (type = \'warning\', msg = \'暂无可回流到备选数据库的字段\') => {\n    ElMessage.closeAll();\n    ElMessage[type](msg);\n  };\n\n  const reflowDialogVisible = ref(false);\n  const reflowTableRef = ref(null);\n\n  const getStringLabel = length => {\n    const map = {\n      255: \'短 255\',\n      4000: \'中 4000\',\n      16777215: \'长 16777215\',\n    };\n    return map[length] || length;\n  };\n  const getReflowFieldLength = row => {\n    return row.type === \'String\' ? getStringLabel(row.length) : \'-\';\n  };\n\n  const reflowConfirmBtnDisabled = ref(false);\n  const isTextOverflow = ref(false);\n\n  // 检测文本是否溢出\n  const checkOverflow = event => {\n    const element = event.target;\n    isTextOverflow.value = element.scrollWidth > element.clientWidth;\n  };\n  const handleSelectReflowField = (selection, row) => {\n    reflowConfirmBtnDisabled.value = selection.length === 0;\n  };\n\n  const confirmLoading = ref(false);\n  const handleUploadReflowField = () => {\n    confirmLoading.value = true;\n    const selectedList = reflowTableRef.value.getSelectionRows();\n    requestApi(\n      uploadReflowField,\n      {\n        list: selectedList,\n      },\n      res => {\n        if (res.result) {\n          showMessage(\'success\', \'添加成功\');\n          reflowDialogVisible.value = false;\n        } else {\n          showMessage(\'error\', res.msg || \'添加失败\');\n        }\n      },\n      err => {\n        // console.error(err);\n        showMessage(\'error\', err);\n      },\n      () => {\n        confirmLoading.value = false;\n      }\n    );\n  };\n\n  const {\n    /**\n     * 名称输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    nameEditor,\n    /**\n     * 标题输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    labelEditor,\n    /**\n     * 描述输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    descriptionEditor,\n    /**\n     * 表格节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    tableviewRef,\n    /**\n     * 数据库视图导入生成的实体\n     * entity 的 origin 属性是否是 view\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isViewEntity,\n    /**\n     * 添加实体属性\n     *\n     * @function\n     */\n    addItem,\n    /**\n     * 生成移除按钮的提示\n     *\n     * @function\n     * @return string\n     */\n    getRemoveTooltip,\n    /**\n     * 表格选中的行元素\n     *\n     * @type {Vue.computed<object>}\n     */\n    selectedItem,\n    /**\n     * 是否是官方实体属性\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntityProperty,\n    /**\n     * 移除实体索引\n     *\n     * @function\n     * @param item - 需要删除的行元素\n     */\n    removeItem,\n    /**\n     * 表格的渲染数据\n     *\n     * @type {Vue.computed<array>}\n     */\n    renderList,\n    /**\n     * 上移当前选中的实体索引\n     *\n     * @function\n     */\n    moveUpItem,\n    /**\n     * 下移当前选中的实体索引\n     *\n     * @function\n     */\n    moveDownItem,\n    /**\n     * 表格高度\n     *\n     * @type {Vue.computed<number>}\n     */\n    tableHeight,\n    /**\n     * 设置表单列的样式\n     *\n     * @function\n     */\n    setRowClassName,\n    /**\n     * 右键选中表格行元素\n     *\n     * @function\n     */\n    onContextMenuRow,\n    /**\n     * 选中行元素时触发\n     *\n     * @function\n     * @param item - 行元素\n     */\n    onSelectRowWithDataType,\n    /**\n     * 拖拽调整表格列宽度\n     *\n     * @function\n     * @param newWidth - 新宽度\n     * @param oldWidth - 旧宽度\n     * @param column - 列元素\n     */\n    handleDragend,\n    /**\n     * 是否禁止编辑行元素\n     *\n     * @function\n     * @param item - 行元素\n     */\n    getDisable,\n    /**\n     * 设置表格列元素编辑状态\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 属性名称\n     * @param focus - 是否选中输入框\n     */\n    onSetItemEdit,\n    /**\n     * Tab 键跳转切换下一个属性\n     *\n     * @function\n     * @param event - 原生键盘事件\n     * @param item - 行元素\n     * @param name - 属性名称\n     */\n    onKeyUp,\n    /**\n     * 名称输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的名称\n     */\n    onBlurName,\n    /**\n     * 验证不通过时滚动到错误元素\n     */\n    errorScrollIntoView,\n    /**\n     * 存在错误\n     *\n     * @type {Vue.ref<boolean>}\n     */\n    hasInvalid,\n    /**\n     * 显示输入框的提示\n     *\n     * @type {Vue.ref<string>}\n     */\n    tooltipOpened,\n    /**\n     * 属性名，暂时存储属性名，用于输入框输入等操作\n     *\n     * @type {Vue.ref<string>}\n     */\n    itemNameValue,\n    /**\n     * 输入框获取焦点时触发\n     *\n     * 1. 设置tooltipOpened的值\n     * 2. 设置itemNameValue\n     *\n     * @function\n     * @param item - 当前行元素\n     */\n    onFocusName,\n    /**\n     * 标题输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的标题\n     */\n    onBlurLabel,\n    /**\n     * 是否应用正在发布\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isAppDeploying,\n    /**\n     * 是否实体已经发布过并且是复合类型\n     *\n     * 1. 实体已经发布过，在app下的depEntities可以找到该实体\n     * 2. 实体是复合类型：\'Map\', \'List\'，或者typeKind是reference并且namespace是\'entities\', \'structures\'\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isPublishedComplexType,\n    /**\n     * 数据类型的标题\n     *\n     * @function\n     * @param item - 行元素\n     * @return string\n     */\n    showDatatype,\n    /**\n     * 双击编辑数据类型输入框\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - 原生事件\n     */\n    onDblClickDatatype,\n    /**\n     * 获取可选类型\n     *\n     * @function\n     * @return 可选类型\n     */\n    getDataTypeList,\n    /**\n     * 失焦时取消当前行元素编辑状态\n     *\n     * @function\n     * @param item - 行元素\n     */\n    handleBlur,\n    /**\n     * 修改实体属性类型\n     *\n     * @function\n     * @param event - event.value 实际使用数据\n     */\n    onChangeDatatype,\n    /**\n     * 是否属于官方实体\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntity,\n    /**\n     * 复合类型\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isComplexType,\n    /**\n     * 修改是否必填\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkbox 原生事件\n     */\n    requireInput,\n    /**\n     * 能否设置默认值\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    canSetDefaultValue,\n    /**\n     * 对应节点是否有错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    IsError,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inTable,\n    /**\n     * 全部勾选或者取消全部勾选\n     *\n     * @function\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    toggleSelectAll,\n    /**\n     * 设置显示属性\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    setDisplay,\n    /**\n     * 显示在筛选\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inFilter,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inForm,\n    /**\n     * 显示在详情\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inDetail,\n    /**\n     * ElementPlus 的 popper 配置\n     */\n    popperOptions,\n    /**\n     * 右键菜单选中项\n     *\n     * @type {Vue.ref<object>}\n     */\n    menuSelectedItem,\n    /**\n     * 项对应的右键菜单是否存在\n     */\n    popperExistMap,\n    /**\n     * 项对应的右键菜单是否显示\n     */\n    popperVisibleMap,\n    /**\n     * 右键菜单的触发节点\n     */\n    triggerRef,\n    /**\n     * 右键菜单的出现位置\n     */\n    placement,\n    /**\n     * 右键菜单隐藏时的处理函数\n     */\n    onMenuPopperHide,\n    /**\n     * 菜单点击时\n     */\n    onMenuClick,\n    /**\n     * 菜单-查找引用\n     *\n     * @function\n     */\n    onMenuFindUsage,\n    /**\n     * 菜单-删除\n     *\n     * @function\n     */\n    onMenuDelete,\n    /**\n     * 实体属性数据类型\n     *\n     * @type {Vue.computed<string>}\n     */\n    typeName,\n    /**\n     * 小数位数的校验错误信息\n     *\n     * @type {Vue.computed<string>}\n     */\n    scaleErrorMsg,\n    /**\n     * 属性的响应式数据\n     *\n     * @type {Vue.reactive<object>}\n     * @property scale - 小数位数\n     */\n    model,\n    /**\n     * 小数位数的范围\n     *\n     * @type {Vue.computed<object>}\n     * @property min - 最小值\n     * @property max - 最大值\n     */\n    scaleOption,\n    /**\n     * 是否禁用小数位数\n     *\n     * @function\n     * @param item - 行元素\n     * @return boolean\n     */\n    decimalDisabled,\n    /**\n     * 修改小数位数\n     *\n     * @function\n     */\n    setScale,\n    /**\n     * 关联属性\n     *\n     * @type {Vue.ref<string>}\n     */\n    entityReference,\n    /**\n     * 类型列表\n     *\n     * @type {Vue.ref<array>}\n     */\n    dataTypeList,\n    /**\n     * 关联实体存在错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    isReleationEntityError,\n    /**\n     * 设置关联属性\n     *\n     * @function\n     * @param event - event.value 表示实际数据\n     */\n    onSaveReference,\n    /**\n     * 清除关联属性\n     *\n     * @function\n     */\n    onClearReference,\n    /**\n     * 设置关联属性实体记录删除规则\n     *\n     * @function\n     * @param event - 选中事件对象\n     */\n    setDeleteRule,\n    /**\n     * 设置错误信息\n     *\n     * @function\n     * @param errorMsgs - 错误信息\n     */\n    changeErrorMsgs,\n    /**\n     * 是否来源于数据库表/excel\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isTableOrExcelOrigin,\n    /**\n     * 描述输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的描述\n     */\n    onBlurDescription,\n    /**\n     * 是否显示数据库高级设置\n     *\n     * 1.没有设置数据源\n     * 2.实体是excel导入或者数据源反向导入\n     * 3.权限实体（贤宇说一直是以LCAP开头来判断的）\n     * 这3种情况不显示数据库设置\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    showDatabasetype,\n    /**\n     * 实体在同步数据源时产生的错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    sourceSyncErrMsgs,\n    /**\n     * 错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    errorMsgs,\n    /**\n     * 数据库列名校验规则\n     *\n     * @type {Vue.computed<object>}\n     */\n    entityPropertyColumnNameRules,\n    /**\n     * 数据库列名输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyColumnNamePlaceholder,\n    /**\n     * 生成名称校验规则\n     *\n     * @function\n     * @param node - 节点\n     * @return 名称校验规则\n     */\n    getEntityPropertyRules,\n    /**\n     * 名称输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyPlaceholder,\n    /**\n     * 设置选中行的数据类型\n     *\n     * @function\n     * @param value - 数据类型\n     */\n    setDataType,\n  } = inject(\'$context\');\n<\/script>\n\n<style module="$propertyDesigner">\n  .errorMsg {\n    color: var(--designer-font-second-color);\n    margin: 0 46px;\n  }\n\n  .errorMsg + .errorMsg {\n    margin-top: 10px;\n  }\n\n  .infoicon {\n    display: inline-block;\n    height: 12px;\n    width: 12px;\n    background: var(--assets-warning-info-svg) no-repeat;\n    background-size: 100% 100%;\n    vertical-align: -1px;\n    margin-right: 5px;\n  }\n</style>\n\n<style module>\n  div.table [class^=\'u-input__\']:focus,\n  div.table [class^=\'u-input__\'][focus],\n  div.table [class^=\'u-input__\']:hover,\n  div.table [class^=\'u-select__\']:focus,\n  div.table [class^=\'u-select__\'][focus],\n  div.table [class^=\'u-select__\'][opened],\n  div.table [class^=\'u-select__\']:hover {\n    border-color: var(--entity-designer-table-input-focus-border-color);\n    box-shadow: var(--entity-designer-table-input-focus-box-shadow);\n  }\n\n  .head {\n    margin: 16px;\n    padding: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n  }\n\n  div.head [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  .body {\n    margin: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n    overflow: hidden;\n  }\n\n  .entityListIcon {\n    width: 16px;\n    height: 16px;\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .edit {\n    display: inline-block;\n    width: 100%;\n    line-height: 38px;\n  }\n\n  .edit:hover {\n    cursor: pointer;\n  }\n\n  .edit:focus {\n    outline: none;\n  }\n\n  .edit .text > span {\n    color: var(--entity-designer-table-color);\n  }\n\n  .edit .text {\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .editwrap {\n    margin-left: -9px;\n  }\n\n  .editwrap [class^=\'s-datatype-select__\'] {\n    vertical-align: middle;\n  }\n\n  .text {\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n  }\n\n  .textContent {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n    max-width: calc(100% - 28px);\n    margin-right: 8px;\n  }\n  .textContent:empty {\n    display: none;\n  }\n\n  .text > span {\n    display: inline-block;\n    color: var(--entity-designer-table-disabled-color);\n    vertical-align: middle;\n  }\n\n  .validator {\n    width: 100%;\n  }\n\n  .btnnav {\n    border-bottom: 1px solid var(--entity-designer-border-color);\n    border-top: 1px solid var(--entity-designer-border-color);\n    padding: 5px 24px;\n  }\n\n  div.btnnav[direction=\'horizontal\'][gap=\'small\'] > :not(:last-child) {\n    margin-right: 8px;\n  }\n\n  .btnnav1 {\n    border-top: none;\n    background-color: var(--entity-designer-btnnav-background);\n  }\n\n  .bodywrap {\n    padding: 16px 24px 0;\n    overflow-x: auto;\n    overflow-y: hidden;\n    margin-bottom: 24px;\n  }\n\n  div.bodywrap [class^=\'u-grid-layout_column__\'] {\n    padding-bottom: 0;\n  }\n\n  .bodywrap1 {\n    padding: 16px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .advancedWrap {\n    padding: 10px 24px 25px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .entityfrom [class^=\'u-form_item_label__\'] {\n    width: 36px !important;\n  }\n\n  div.input {\n    width: 100%;\n    margin-right: 12px;\n  }\n\n  .iconBase {\n    display: inline-block;\n    width: 20px;\n    height: 38px;\n    line-height: 38px;\n    text-align: center;\n    font-size: var(--font-size-large);\n    font-size: 14px;\n  }\n\n  .iconKey {\n    color: var(--designer-table-edit-icon-key-color);\n  }\n\n  .iconLink {\n    color: var(--designer-table-edit-icon-link-color);\n  }\n\n  .iconEdit {\n    color: var(--color-base);\n    opacity: 0;\n  }\n\n  .iconLink2 {\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    line-height: 16px;\n    font-size: var(--font-size-huge);\n    color: var(--brand-primary);\n    cursor: pointer;\n    position: relative;\n    top: 2px;\n    left: 4px;\n  }\n\n  .edit:hover .iconEdit {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n\n  .edit:hover .iconEdit:hover {\n    opacity: 1;\n  }\n\n  .icon {\n    width: 14px;\n    height: 14px;\n    display: inline-block;\n    vertical-align: middle;\n    background-repeat: no-repeat;\n  }\n\n  div.normalfrom [class^=\'u-form_item_label__\'] {\n    width: 60px !important;\n  }\n\n  div.normalfrom > div {\n    margin-bottom: 16px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'],\n  div.normalfrom [class^=\'u-select__\'],\n  div.normalfrom [class^=\'u-form_item_field__\'],\n  div.normalfrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom [class^=\'u-form_item_label__\'] {\n    width: 94px !important;\n  }\n\n  div.reffrom [class^=\'u-input__\'],\n  div.reffrom [class^=\'u-tree-select__\'],\n  div.reffrom [class^=\'u-select__\'],\n  div.reffrom [class^=\'u-form_item_field__\'],\n  div.reffrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.reffrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom .text {\n    opacity: 0.3;\n  }\n\n  div.reffrom [class^=\'u-form_item_extra__\'] {\n    width: 12px;\n  }\n\n  .flexgrid {\n    display: flex;\n  }\n\n  .gridcolumn {\n    width: auto;\n  }\n\n  .gridcolumn:not(:last-child) {\n    margin-right: 24px;\n  }\n\n  div.fixedwidthinput,\n  div.textarea {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  .icondivider {\n    color: var(--entity-designer-border-color);\n  }\n\n  .advanced {\n    padding-top: 10px;\n  }\n\n  .scaleErrorMsg {\n    position: absolute;\n    color: rgb(242, 73, 87);\n  }\n  .typeError {\n    border-radius: 4px;\n    border: 1px solid var(--input-border-color-error);\n  }\n  .checkbox [class=\'el-checkbox__label\'] {\n    line-height: 23px;\n    font-size: 12px;\n    text-overflow: ellipsis;\n    text-align: left;\n    font-weight: 600;\n    color: var(--el-table-header-text-color);\n  }\n  .checkbolabel [class=\'el-checkbox__label\'] {\n    line-height: 23px !important;\n    font-size: 12px !important;\n    text-overflow: ellipsis !important;\n    text-align: left !important;\n    font-weight: 600 !important;\n    color: var(--el-table-header-text-color) !important;\n  }\n  .checkbox {\n    height: 23px;\n    line-height: 23px;\n  }\n</style>\n<style module="$contextmenu">\n  .menu {\n    margin-top: 0 !important;\n  }\n\n  .menu .group [class^=\'el-menu-item-group__title\'] {\n    --el-menu-text-color: var(--el-menu-top-title-text-color);\n    height: 32px;\n    font-weight: bold;\n    border-bottom: 1px solid var(--line-color-regular);\n    background: var(--fill-color-thead);\n    color: var(--el-menu-text-color);\n    cursor: auto;\n  }\n</style>\n\n<style scoped>\n  .tableCell :deep(.cell) {\n    padding: 0;\n    line-height: 20px;\n    padding-left: 6px;\n  }\n  .theadLable {\n    overflow: visible;\n    width: 100%;\n    padding-left: 6px;\n    border-right: 1px solid var(--entity-designer-property-dragger-border-color);\n  }\n  .topIconGroup {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 8px;\n    background-color: var(--entity-designer-icon-group-background-color);\n    padding: 5px 24px;\n    border-bottom: 1px solid var(--entity-designer-icon-group-border-color);\n    position: sticky;\n    z-index: 9;\n    top: 64px;\n  }\n\n  .icon {\n    margin-right: 8px;\n  }\n\n  .extraForm :deep(.el-form-item__label) {\n    font-size: 12px;\n  }\n\n  :deep(.row-style) {\n    border: 1px solid #4d87fe;\n  }\n\n  :deep(.cell-style) {\n    border-bottom: 1px solid #409eff;\n  }\n\n  .elFormFlex {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n</style>\n\n<style scoped>\n  .reflowPopover {\n    width: 340px;\n    padding: 8px;\n  }\n\n  .reflowPopoverEmpty {\n    padding: 20px 0 30px;\n  }\n\n  .reflowPopoverItem {\n    height: 48px;\n    line-height: 48px;\n    padding: 0 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    &:hover {\n      background-color: #edf2f9;\n    }\n  }\n\n  .warningIcon {\n    margin-right: 4px;\n  }\n\n  .reflowDialogFooter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 居中对齐flex布局 */\n  .centerFlex {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 单行文本溢出省略号 */\n  .sle,\n  [sle] {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  /* tooltip触发器样式 */\n  .tooltip-trigger {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n</style>\n'],sourceRoot:""}]);const r=i},770:(e,n,t)=>{t.d(n,{Z:()=>r});var l=t(481),o=t.n(l),a=t(966),i=t.n(a)()(o());i.push([e.id,"\n.reflowPopover[data-v-4dd96507] {\n    width: 340px;\n    padding: 8px;\n}\n.reflowPopoverEmpty[data-v-4dd96507] {\n    padding: 20px 0 30px;\n}\n.reflowPopoverItem {\n&[data-v-4dd96507] {\n    height: 48px;\n    line-height: 48px;\n    padding: 0 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    }\n&[data-v-4dd96507]:hover {\n      background-color: #edf2f9;\n}\n}\n.warningIcon[data-v-4dd96507] {\n    margin-right: 4px;\n}\n.reflowDialogFooter[data-v-4dd96507] {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n  /* 居中对齐flex布局 */\n.centerFlex[data-v-4dd96507] {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n  /* 单行文本溢出省略号 */\n.sle[data-v-4dd96507],\n  [sle][data-v-4dd96507] {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n  /* tooltip触发器样式 */\n.tooltip-trigger[data-v-4dd96507] {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n","",{version:3,sources:["webpack://./src/components/EntityPropertyDesigner.vue","<no source>"],names:[],mappings:";AAu7DE;IACE,YAAY;IACZ,YAAY;AACd;AAEA;IACE,oBAAoB;AACtB;AAEA;ACh8DF;IDi8DI,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,kBAAkB;IAClB,eAAA;IAt7DA;AAu7DA;MACE,yBAAyB;AAC3B;AACF;AAEA;IACE,iBAAiB;AACnB;AAEA;IACE,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACrB;;EAEA,eAAe;AACf;IACE,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACrB;;EAEA,cAAc;AACd;;IAEE,gBAAgB;IAChB,uBAAuB;IACvB,mBAAmB;AACrB;;EAEA,iBAAiB;AACjB;IACE,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,uBAAuB;IACvB,mBAAmB;AACrB",sourcesContent:['<template>\n  <div>\n    <div\n      v-if="!isViewEntity"\n      class="topIconGroup"\n      :class="$style.body"\n      style="margin-top: 0px; margin-bottom: 0px; border-bottom: 0px; height: 40px"\n    >\n      \x3c!-- 添加实体属性 --\x3e\n      <s-others-icon name="add" tooltip="添加属性" button @click="handleAddItem"></s-others-icon>\n      \x3c!-- 删除实体属性 --\x3e\n      <s-others-icon\n        name="remove"\n        button\n        :tooltip="getRemoveTooltip()"\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          selectedItem.naslNode.primaryKey ||\n          isOfficalEntityProperty(selectedItem)\n        "\n        @click="removeItem(selectedItem)"\n      ></s-others-icon>\n      <div :class="$style.icondivider">|</div>\n      \x3c!-- 上移实体属性 --\x3e\n      <s-others-icon\n        name="position-up"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置顶\'\n            : \'上移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveUpItem"\n      ></s-others-icon>\n      \x3c!-- 下移实体属性 --\x3e\n      <s-others-icon\n        name="position-down"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置底\'\n            : \'下移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveDownItem"\n      ></s-others-icon>\n      \x3c!-- 一键添加到备选字段库 --\x3e\n      <el-button v-if="showReflowBtn" :loading="reflowLoading" @click="addReflowField">一键添加到备选字段库</el-button>\n    </div>\n    <div :class="$style.body" style="margin-top: 0px">\n      <div :class="$style.bodywrap" class="tableCell">\n        <el-table\n          ref="tableviewRef"\n          :data="renderList"\n          highlight-current-row\n          :style="`min-width:950px;${tableHeight}`"\n          style="width: 100%"\n          :class="\n            renderList.length > 8\n              ? [$style.table, $style.tablescroll, \'s-data-table-edit\']\n              : [$style.table, \'s-data-table-edit\']\n          "\n          :value="selectedItem && selectedItem.naslNode.name"\n          value-field="name"\n          :header-row-style="{ height: \'40px\' }"\n          :cell-style="{ padding: \'0px\' }"\n          :row-style="{ height: \'42px\' }"\n          :row-class-name="setRowClassName"\n          empty-text="暂无数据"\n          @row-contextmenu="onContextMenuRow"\n          @row-click="onSelectRowWithDataType"\n          @header-dragend="handleDragend"\n          @click.right.prevent\n          :border="true"\n        >\n          \x3c!-- 主键/关联属性的icon --\x3e\n          <el-table-column width="38" prop="primaryKey" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <s-others-icon\n                  v-if="item.naslNode.primaryKey"\n                  name="key"\n                  :class="[$style.iconBase, $style.iconKey]"\n                ></s-others-icon>\n                <s-others-icon\n                  v-if="item.naslNode.relationProperty"\n                  name="link"\n                  :class="[$style.iconBase, $style.iconLink]"\n                ></s-others-icon>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 标题 --\x3e\n          <el-table-column prop="label" min-width="107" label="字段注释">\n            <template #header>\n              <div class="theadLable">字段注释</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!item.loading && !item.naslNode.parentNode.loading && !isViewEntity">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'label\'"\n                  :class="$style.edit"\n                  @dblclick="onSetItemEdit(item, \'label\', true)"\n                  tabindex="0"\n                  @keyup="onKeyUp($event, item, \'label\')"\n                  :title="item.naslNode.label"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.label }}</span>\n                    <s-others-icon\n                      v-show="!isOfficalEntityProperty(item)"\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'label\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    ref="labelValidatorRef"\n                    v-slot="slotProps"\n                    :value="item.naslNode.label"\n                    rules="maxLength(63)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurLabel(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    <s-input\n                      placeholder="请输入标题"\n                      :model-value="item.naslNode.label"\n                      ref="labelEditor"\n                      :class="$style.input"\n                      @focus="handleLabelFocus(item.naslNode.label)"\n                      @blur:value="handleLabelBlur($event, slotProps, item)"\n                      @input="handleLabelInput($event, slotProps)"\n                      @keyup.enter="$event.target.blur()"\n                    ></s-input>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                \x3c!-- 之前仅仅为 item.label 但是实际上在item 对象中没有label属性，恐在特殊情况下存在，故范围限制为 区分 viewEntity --\x3e\n                <span>{{ isViewEntity ? item.naslNode.label : item.label }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 名称 --\x3e\n          <el-table-column label="字段名" prop="name" min-width="87">\n            <template #header>\n              <div class="theadLable">字段名</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!getDisable(item)">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'name\'"\n                  tabindex="0"\n                  :class="$style.edit"\n                  :title="item.naslNode.name"\n                  @dblclick="onSetItemEdit(item, \'name\', true)"\n                  @keyup="onKeyUp($event, item, \'name\')"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.name }}</span>\n                    <s-others-icon\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'name\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    v-slot="slotProps"\n                    :value="item.naslNode.name"\n                    :rules="getEntityPropertyRules(item.naslNode)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurName(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    \x3c!-- “属性名”为空是显示提示信息 --\x3e\n                    <el-tooltip\n                      :visible="tooltipOpened === \'entityAttribute\' && !itemNameValue"\n                      placement="top-start"\n                      content="属性为英文字母、数字和下划线，且首字母小写"\n                    >\n                      <s-input\n                        :placeholder="entityPropertyPlaceholder"\n                        :model-value="item.naslNode.name"\n                        ref="nameEditor"\n                        :class="$style.input"\n                        @focus="onFocusName(item)"\n                        @blur:value="slotProps.blurFn($event)"\n                        @input="slotProps.inputChange($event)"\n                        @keyup.enter="$event.target.blur()"\n                        @update:modelValue="itemNameValue = $event"\n                      ></s-input>\n                    </el-tooltip>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                <span>{{ item.naslNode.name }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 数据类型 --\x3e\n          <el-table-column label="数据类型" min-width="247">\n            <template #header>\n              <div class="theadLable">数据类型</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <el-tooltip v-if="isAppDeploying" content="应用发布中，暂不能修改" placement="bottom-start">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </el-tooltip>\n                \x3c!-- 禁用状态 / 已经发布过的复合类型 --\x3e\n                <template v-else-if="getDisable(item) || isPublishedComplexType(item)">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </template>\n                \x3c!-- 非禁用状态 --\x3e\n                <template v-else>\n                  \x3c!-- 展示态 --\x3e\n                  <div\n                    v-if="item.edit !== \'datatype\'"\n                    tabindex="0"\n                    :class="$style.edit"\n                    :ref="`datatype${item.naslNode.id}`"\n                    :title="showDatatype(item)"\n                    @dblclick="onDblClickDatatype(item, $event)"\n                    @keyup="onKeyUp($event, item, \'datatype\')"\n                  >\n                    <div :class="$style.text">\n                      <span :class="$style.textContent">{{ showDatatype(item) }}</span>\n                      <s-others-icon\n                        name="edit"\n                        :class="[$style.iconBase, $style.iconEdit]"\n                        @click="(getDataTypeList(), onSetItemEdit(item, \'datatype\', false))"\n                      ></s-others-icon>\n                    </div>\n                  </div>\n                  \x3c!-- 编辑态 --\x3e\n                  <div v-else :class="$style.editwrap">\n                    <el-tooltip :content="`${isAppDeploying ? \'应用发布中，暂不能修改\' : \'\'}`" placement="bottom-start">\n                      <s-datatype-select\n                        :unionable="false"\n                        :no-union-subtype="true"\n                        :data-type-list="item.naslNode.lastVersion ? dataTypeList : undefined"\n                        :last-version="item.naslNode.lastVersion"\n                        :type-annotation="item.naslNode.typeAnnotation"\n                        :concept="item.naslNode.entity.concept"\n                        :show-system-types="false"\n                        :show-generic-types="true"\n                        :show-entity="true"\n                        :show-structures="true"\n                        :emptyable="false"\n                        :hasAnonymousStructure="true"\n                        :disabled="item.naslNode.readonly || isAppDeploying || isPublishedComplexType(item)"\n                        @blur="handleBlur(item)"\n                        @change="onChangeDatatype"\n                      ></s-datatype-select>\n                    </el-tooltip>\n                  </div>\n                </template>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 是否必填 --\x3e\n          <el-table-column label="是否必填" width="70" prop="required" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else style="margin-left: 16px">\n                <el-checkbox\n                  v-model="item.naslNode.required"\n                  :disabled="getDisable(item) || isComplexType(item) || isOfficalEntity(item)"\n                  :tabindex="item.editable === false || item.loading || item.naslNode.parentNode.loading ? -1 : 0"\n                  :class="$style.checkbox"\n                  @change="requireInput(item, $event)"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 默认值 --\x3e\n          <el-table-column label="默认值" prop="defaultValue" width="120" :resizable="false">\n            <template #default="{ row: item }">\n              <div v-if="[\'createdTime\', \'updatedTime\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>自动生成</span>\n              </div>\n              <div v-else-if="[\'createdBy\', \'updatedBy\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>（无）</span>\n              </div>\n              <template v-else-if="!canSetDefaultValue(item)">\n                <div :class="$style.text">\n                  <span>（无）</span>\n                </div>\n              </template>\n              <template\n                v-else-if="\n                  item.loading || item.naslNode.parentNode.loading || item.naslNode.generationRule !== \'manual\'\n                "\n              >\n                <div :class="$style.text">\n                  <div :class="$style.text" v-if="item.naslNode.generationRule === \'auto\'">\n                    <span>自动生成</span>\n                  </div>\n                  <span v-else>{{ item.naslNode.defaultValue }}</span>\n                </div>\n              </template>\n              <template v-else>\n                <s-attr-input\n                  title="默认值绑定"\n                  node-concept="defaultValue"\n                  :name="item.naslNode.name"\n                  :parent-node="item.naslNode"\n                  :node="item.naslNode.defaultValue"\n                  :class="{\n                    [$style.typeError]: IsError(item.naslNode),\n                  }"\n                ></s-attr-input>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表格 --\x3e\n          <el-table-column width="100" prop="display.inTable" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表格"\n                :class="$style.checkbolabel"\n                :model-value="inTable"\n                @change="toggleSelectAll($event, \'inTable\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inTable"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inTable\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在筛选 --\x3e\n          <el-table-column width="100" prop="display.inFilter" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在筛选"\n                :class="$style.checkbolabel"\n                :model-value="inFilter"\n                @change="toggleSelectAll($event, \'inFilter\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inFilter"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inFilter\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表单 --\x3e\n          <el-table-column width="100" prop="display.inForm" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表单"\n                :class="$style.checkbolabel"\n                :model-value="inForm"\n                @change="toggleSelectAll($event, \'inForm\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inForm"\n                  :class="$style.checkbox"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  @change="setDisplay(item, $event, \'inForm\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在详情 --\x3e\n          <el-table-column width="100" prop="display.inDetail" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在详情"\n                :class="$style.checkbolabel"\n                :model-value="inDetail"\n                @change="toggleSelectAll($event, \'inDetail\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inDetail"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inDetail\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n        </el-table>\n        \x3c!-- 右键点击 --\x3e\n        <el-popover\n          :disabled-scroll="true"\n          trigger="click"\n          ref="menuPopper"\n          :popper-options="popperOptions"\n          v-if="menuSelectedItem && popperExistMap[menuSelectedItem.id]"\n          v-model:visible="popperVisibleMap[menuSelectedItem && menuSelectedItem.id]"\n          :virtual-ref="triggerRef"\n          :placement="placement"\n          :show-arrow="false"\n          @hide="onMenuPopperHide"\n        >\n          <el-menu :class="$contextmenu.menu" @click="onMenuClick">\n            <el-menu-item-group :class="$contextmenu.group" title="属性">\n              <el-menu-item :class="$contextmenu.item" @click="onMenuFindUsage">查找引用</el-menu-item>\n              <el-menu-item\n                :class="$contextmenu.item"\n                @click="onMenuDelete(removeItem)"\n                :disabled="\n                  (menuSelectedItem && menuSelectedItem.primaryKey) ||\n                  isOfficalEntityProperty({\n                    naslNode: menuSelectedItem,\n                  }) ||\n                  isViewEntity\n                "\n              >\n                删除\n              </el-menu-item>\n            </el-menu-item-group>\n          </el-menu>\n        </el-popover>\n      </div>\n      <template v-if="selectedItem">\n        <div :class="[$style.flexgrid, $style.bodywrap1]">\n          <div :class="$style.gridcolumn" class="extraForm">\n            <el-form\n              ref="selectedItemForm"\n              :model="selectedItem"\n              :class="[$style.reffrom, $style.blockFromLayout, \'s-data-attr-designer-form\']"\n              label-width="85px"\n              label-position="right"\n              :inline="true"\n            >\n              \x3c!-- 最 大/小 值/长度 --\x3e\n              <skeleton-render\n                name="views/data/components/entity-field-rules/index"\n                :property="selectedItem.naslNode"\n                :key="\'rules_\' + selectedItem.naslNode.name"\n                :disabled="\n                  selectedItem.loading ||\n                  selectedItem.naslNode.parentNode.loading ||\n                  selectedItem.naslNode.editable === false ||\n                  isViewEntity\n                "\n                :is-view-entity="isViewEntity"\n                direction="horizontal"\n                :class="$style.rules"\n              />\n              \x3c!-- 小数位数 --\x3e\n              <el-form-item v-if="typeName === \'Decimal\'" label="小数位数">\n                <el-input-number\n                  placeholder="请输入小数位数"\n                  :color="scaleErrorMsg ? \'error\' : \'\'"\n                  v-model="model.scale"\n                  :min="scaleOption.min"\n                  :max="scaleOption.max"\n                  controls-position="right"\n                  :disabled="decimalDisabled(selectedItem) || isViewEntity"\n                  :value-on-clear="0"\n                  @keyup.enter="$event.target.blur()"\n                  @change="setScale"\n                ></el-input-number>\n                <div v-if="scaleErrorMsg" :class="$style.scaleErrorMsg">\n                  <s-others-icon name="solid-hint"></s-others-icon>\n                  {{ scaleErrorMsg }}\n                </div>\n              </el-form-item>\n              \x3c!-- 关联属性 --\x3e\n              <el-form-item :key="selectedItem.naslNode.name">\n                <template #label>\n                  <div style="display: flex; align-items: center">\n                    关联属性\n                    <s-others-icon name="link2" :class="$style.iconLink2"></s-others-icon>\n                  </div>\n                </template>\n                <skeleton-render\n                  name="views/data/entity-reference/index"\n                  :entity="entity"\n                  :property="selectedItem.naslNode"\n                  :value="entityReference"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  :data-type-list="selectedItem.naslNode.lastVersion ? dataTypeList : undefined"\n                  :error="isReleationEntityError(selectedItem.naslNode)"\n                  @save="onSaveReference"\n                  @clear="onClearReference"\n                />\n              </el-form-item>\n              \x3c!-- 属性记录 --\x3e\n              <el-form-item\n                label="关联属性实体记录删除规则"\n                v-if="selectedItem.naslNode.relationProperty"\n                layout="block"\n                class="relationDelRule"\n              >\n                <el-select\n                  style="width: 240px"\n                  v-model="selectedItem.naslNode.deleteRule"\n                  placeholder="请选择"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  @change="setDeleteRule"\n                >\n                  <el-option label="不允许删除" value="protect"></el-option>\n                  <el-option label="允许删除且同时删除本实体记录" value="cascade"></el-option>\n                </el-select>\n              </el-form-item>\n              \x3c!-- 主键生成规则 --\x3e\n              <el-form-item v-if="selectedItem.naslNode.primaryKey" label="主键生成规则" placement="bottom">\n                <skeleton-render\n                  name="views/data/components/entity-primarykey-rules/index"\n                  :disabled="isViewEntity"\n                  :entity="entity"\n                  :selected-item="selectedItem.naslNode"\n                  @changeErrorMsgs="changeErrorMsgs"\n                />\n              </el-form-item>\n              \x3c!-- 数据库列名 --\x3e\n              <el-form-item label="数据库列名" placement="bottom">\n                <u-validator\n                  ref="columnNameValidatorRef"\n                  style="width: 100%"\n                  :rules="entityPropertyColumnNameRules"\n                  :value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                  @blur-dirty-valid="selectedItem.naslNode.setColumnName($event.value)"\n                  v-slot="slotProps"\n                >\n                  <s-input\n                    :placeholder="entityPropertyColumnNamePlaceholder"\n                    :model-value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                    :disabled="isTableOrExcelOrigin || isViewEntity"\n                    @change="slotProps.blurChange"\n                    @input="slotProps.inputChange($event)"\n                    @keyup.enter.stop="$event.target.blur()"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n              \x3c!-- 描述 --\x3e\n              <el-form-item label="描述" prop="description">\n                <u-validator\n                  v-slot="slotProps"\n                  :value="selectedItem.naslNode.description"\n                  rules="maxLength(63)"\n                  :class="$style.validator"\n                  @blur-valid="onBlurDescription(selectedItem, $event.value)"\n                  @blur-invalid="errorScrollIntoView"\n                  @validate-result="hasInvalid = !$event.valid"\n                >\n                  <s-input\n                    type="textarea"\n                    ref="descriptionEditor"\n                    placeholder="请输入描述"\n                    :model-value="selectedItem.naslNode.description"\n                    :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                    @blur:value="slotProps.blurFn($event)"\n                    @keyup.enter="slotProps.blurFn()"\n                    @input="slotProps.inputChange($event)"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n            </el-form>\n          </div>\n        </div>\n        <div :class="$style.advancedWrap" v-if="showDatabasetype">\n          <el-form :disabled="isViewEntity" label-width="80px" gap="small" class="s-data-attr-designer-form">\n            <skeleton-render\n              name="views/data/components/entity-property-databasetype/index"\n              :property="selectedItem.naslNode"\n            />\n          </el-form>\n        </div>\n      </template>\n      <div :class="$style.bodywrap1" v-show="errorMsgs.length || sourceSyncErrMsgs.length">\n        <div v-for="errorMsg in errorMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n        \x3c!-- 实体在同步数据源时产生的错误信息 --\x3e\n        <div v-for="errorMsg in sourceSyncErrMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n      </div>\n    </div>\n    \x3c!-- 查询弹出框 --\x3e\n    <el-popover\n      :visible="reflowPopoverVisible"\n      :virtual-ref="labelEditor"\n      :show-arrow="false"\n      placement="bottom-start"\n      :width="340"\n      virtual-triggering\n    >\n      <div class="reflowPopover" v-loading="reflowPopoverLoading">\n        <div class="reflowPopoverEmpty" v-if="fieldList.length === 0">\n          <s-others-icon name="hint" class="centerFlex" style="font-size: 28px; margin-bottom: 20px"></s-others-icon>\n          <span class="centerFlex">暂无推荐字段</span>\n        </div>\n        <div v-else>\n          <el-scrollbar height="250px">\n            <div\n              class="reflowPopoverItem"\n              v-for="item in fieldList"\n              :key="item.id"\n              @mouseenter="activeItem = item"\n              @mouseleave="activeItem = null"\n            >\n              <el-row :gutter="10">\n                <el-col :span="9" class="sle">\n                  <el-tooltip :content="item.name" placement="top" :show-after="500" :disabled="!isTextOverflow">\n                    <div\n                      class="tooltip-trigger"\n                      v-html="getFieldName(item.name, item.matchedNames)"\n                      @mouseenter="checkOverflow"\n                    ></div>\n                  </el-tooltip>\n                </el-col>\n                <el-col class="sle" :span="8">\n                  <el-tooltip\n                    :content="getFieldTypeTitle(item)"\n                    placement="top"\n                    :show-after="500"\n                    :disabled="!isTextOverflow"\n                  >\n                    <div class="tooltip-trigger" @mouseenter="checkOverflow">{{ getFieldTypeTitle(item) }}</div>\n                  </el-tooltip>\n                </el-col>\n                <el-col :span="4">\n                  {{ item.required ? \'必填\' : \'非必填\' }}\n                </el-col>\n                <el-col :span="3" v-show="activeItem?.id === item.id" style="color: #2383ff">使用</el-col>\n              </el-row>\n            </div>\n          </el-scrollbar>\n        </div>\n        <div style="height: 18px; margin-top: 10px">\n          <s-others-icon name="hint" class="warningIcon"></s-others-icon>\n          <span>输入_，可进行词根匹配</span>\n        </div>\n      </div>\n    </el-popover>\n    \x3c!-- 添加至备选数据库字段库弹窗 --\x3e\n    <el-dialog v-model="reflowDialogVisible" title="一键添加到备选字段库" width="50%">\n      <el-table\n        ref="reflowTableRef"\n        :data="reflowFieldList"\n        @select="handleSelectReflowField"\n        @select-all="handleSelectReflowField"\n      >\n        <el-table-column type="selection" width="40" />\n        <el-table-column label="字段注释" prop="label" />\n        <el-table-column label="字段名" prop="name" />\n        <el-table-column label="数据类型" prop="type" />\n        <el-table-column label="是否必填" prop="required">\n          <template #default="scope">\n            <span>{{ scope.row.required ? \'是\' : \'否\' }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label="字段长度" prop="length">\n          <template #default="scope">\n            <span>{{ getReflowFieldLength(scope.row) }}</span>\n          </template>\n        </el-table-column>\n      </el-table>\n      <template #footer>\n        <div class="reflowDialogFooter">\n          <el-button\n            type="primary"\n            :disabled="reflowConfirmBtnDisabled"\n            :loading="confirmLoading"\n            @click="handleUploadReflowField"\n          >\n            确 定\n          </el-button>\n          <el-button @click="reflowDialogVisible = false">取 消</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\n  import { inject, onMounted, ref, nextTick } from \'vue\';\n  import { ElMessage, ClickOutside as vClickOutside } from \'element-plus\';\n  import { requestApi, getIsReflowField, getFieldList, getReflowFieldList, uploadReflowField } from \'../apis\';\n  import { debounce } from \'../utils\';\n\n  const props = defineProps({\n    entity: Object,\n  });\n\n  const handleAddItem = () => {\n    addItem();\n    nextTick(() => {\n      onSetItemEdit(selectedItem.value, \'label\', true);\n    });\n  };\n\n  const showReflowBtn = ref(false);\n\n  const reflowPopoverVisible = ref(false);\n  const fieldList = ref([]);\n  const reflowQuery = ref(\'\');\n  const abortController = ref(null);\n  const requestId = ref(0); // 用于标识当前请求\n\n  const debounceQueryFieldList = debounce(() => {\n    // 设置loading状态\n    reflowPopoverLoading.value = true;\n\n    // 取消之前的请求\n    if (abortController.value) {\n      abortController.value.abort();\n    }\n\n    // 创建新的 AbortController 和请求ID\n    abortController.value = new AbortController();\n    const currentRequestId = ++requestId.value;\n\n    getFieldList({ query: reflowQuery.value }, abortController.value.signal)\n      .then(res => {\n        // 只有当前请求是最新的才更新数据\n        if (currentRequestId === requestId.value) {\n          fieldList.value = res.result || [];\n        }\n      })\n      .catch(err => {\n        if (err.name !== \'AbortError\') {\n          console.error(err);\n        }\n      })\n      .finally(() => {\n        // 只有当前请求是最新的才更新加载状态\n        if (currentRequestId === requestId.value) {\n          abortController.value = null;\n          reflowPopoverLoading.value = false;\n        }\n      });\n  }, 400);\n\n  const reflowPopoverLoading = ref(false);\n  const activeItem = ref(null);\n\n  const getFieldName = (name, matchedNames) => {\n    if (!name || typeof name !== \'string\') return \'\';\n    if (!Array.isArray(matchedNames)) return `<span style="color: red; font-weight: bold;">${name}</span>`;\n\n    const matchedSet = new Set(matchedNames.filter(item => item && typeof item === \'string\'));\n    const parts = name.split(/(_+)/);\n\n    return parts\n      .map(part => {\n        if (part.startsWith(\'_\')) return part;\n        return matchedSet.has(part) ? part : `<span style="color: red; font-weight: bold;">${part}</span>`;\n      })\n      .join(\'\');\n  };\n\n  const getFieldTypeTitle = item => {\n    if (item.type === \'String\') {\n      const stringLabel = getStringLabel(item.length);\n      return item.type + (stringLabel ? `  (${stringLabel})` : \'\');\n    }\n    return item.type;\n  };\n\n  const columnNameValidatorRef = ref(null);\n\n  const handleUseField = item => {\n    const target = selectedItem.value?.naslNode;\n    if (target?.concept === \'EntityProperty\') {\n      target.app.emit(\'collect:start\', { actionMsg: \'数据建模插件更新字段名\' });\n      const newName = target.parentNode?.getPropertyUniqueName?.(item.name) || item.name; // 保证字段名唯一\n      const typeName = item.type === \'Integer\' ? \'Long\' : item.type;\n      const updateData = {\n        name: newName,\n        columnName: newName,\n        required: item.required,\n        typeAnnotation: {\n          concept: \'TypeAnnotation\',\n          typeKind: \'primitive\',\n          typeNamespace: \'nasl.core\',\n          typeName,\n        },\n      };\n      if (item.type === \'String\' && item.length) {\n        const minRule = target.toJSON().rules.find(rule => rule.startsWith(\'minLength\'));\n        Object.assign(updateData, {\n          databaseTypeAnnotation: {\n            concept: \'DatabaseTypeAnnotation\',\n            typeName: \'varchar\',\n            arguments: {\n              length: item.length,\n            },\n          },\n          rules: [minRule, `maxLength(${item.length})`].filter(Boolean),\n        });\n      }\n      target.update(updateData);\n      setTimeout(() => {\n        // 延迟收集，把外层onBlurLabel的change也收集到这次的batchInstruct中\n        target.app.emit(\'collect:end\');\n      });\n\n      nextTick(async () => {\n        try {\n          const res = await columnNameValidatorRef.value?.validate();\n        } catch (error) {\n          // console.error(error);\n          // 新设置的字段名不符合规则，主动聚焦到输入框\n          onSetItemEdit(selectedItem.value, \'name\', true);\n        }\n      });\n    }\n  };\n\n  const handleLabelFocus = label => {\n    reflowQuery.value = label;\n  };\n\n  const handleLabelBlur = async (event, slotProps, item) => {\n    reflowPopoverVisible.value = false;\n    reflowQuery.value = \'\';\n    fieldList.value = [];\n\n    event = event.replace(/_/g, \'\'); // event 去除掉_\n\n    slotProps.blurFn(event); // 触发模版中原来的失焦逻辑\n    if (activeItem.value) {\n      handleUseField(activeItem.value);\n      activeItem.value = null;\n    }\n  };\n\n  const handleLabelInput = (event, slotProps) => {\n    reflowPopoverVisible.value = true;\n    reflowQuery.value = event;\n    slotProps.inputChange(event); // 触发模版中原有的修改逻辑\n    // 外置设置防抖查询loading状态\n    reflowPopoverLoading.value = true;\n    debounceQueryFieldList();\n  };\n\n  onMounted(() => {\n    getIsReflowField({}).then(res => {\n      showReflowBtn.value = res.result;\n    });\n  });\n\n  // 一键添加到备选字段库\n  const reflowLoading = ref(false);\n  const reflowFieldList = ref([]);\n\n  const addReflowField = () => {\n    reflowLoading.value = true;\n\n    const filterList = [\'id\', \'createdTime\', \'updatedTime\', \'createdBy\', \'updatedBy\'];\n    const filterRegex = /^property\\d+$|^.*[\\u4e00-\\u9fa5].*$/;\n\n    const properties = props.entity?.toJSON()?.properties || [];\n    const tempReflowFieldList = [];\n    const nameSet = new Set();\n    properties.forEach(property => {\n      if (\n        !property.label ||\n        filterList.includes(property.name) ||\n        filterRegex.test(property.name) ||\n        property.typeAnnotation?.typeKind !== \'primitive\'\n      ) {\n        return;\n      }\n      let type = property.typeAnnotation?.typeName || \'String\';\n      if (type === \'Long\') type = \'Integer\'; // 整数类型需要重命名为Integer\n      const propertyName = property.name.replace(/\\d+$/, \'\') || \'\';\n      if (nameSet.has(propertyName)) {\n        return;\n      }\n      nameSet.add(propertyName);\n      tempReflowFieldList.push({\n        name: propertyName,\n        label: property.label || \'\',\n        required: property.required || false,\n        type,\n        length: type === \'String\' ? property.databaseTypeAnnotation?.arguments?.length || 255 : void 0,\n      });\n    });\n    reflowFieldList.value = tempReflowFieldList;\n    if (reflowFieldList.length === 0) {\n      reflowLoading.value = false;\n      showMessage();\n      return;\n    }\n\n    // 备选库不需要校验字段唯一性，直接打开弹窗\n    requestApi(\n      getReflowFieldList,\n      {\n        list: tempReflowFieldList.map(item => ({\n          name: item.name,\n          label: item.label,\n        })),\n      },\n      res => {\n        if (res.result?.length === 0) {\n          showMessage();\n          return;\n        } else {\n          // 只有在res.result中的name，在tempReflowFieldList中存在，才显示\n          const set = new Set(res.result);\n          reflowFieldList.value = tempReflowFieldList.filter(item => set.has(item.name));\n          reflowDialogVisible.value = true;\n          nextTick(() => {\n            reflowConfirmBtnDisabled.value = false;\n            reflowTableRef.value.toggleAllSelection();\n          });\n        }\n      },\n      err => {\n        console.error(err);\n      },\n      () => {\n        reflowLoading.value = false;\n      }\n    );\n    // reflowDialogVisible.value = true;\n    // reflowLoading.value = false;\n    // nextTick(() => {\n    //   reflowConfirmBtnDisabled.value = false;\n    //   reflowTableRef.value.toggleAllSelection();\n    // });\n  };\n\n  // 显示[暂无可回流到备选数据库的字段]消息\n  const showMessage = (type = \'warning\', msg = \'暂无可回流到备选数据库的字段\') => {\n    ElMessage.closeAll();\n    ElMessage[type](msg);\n  };\n\n  const reflowDialogVisible = ref(false);\n  const reflowTableRef = ref(null);\n\n  const getStringLabel = length => {\n    const map = {\n      255: \'短 255\',\n      4000: \'中 4000\',\n      16777215: \'长 16777215\',\n    };\n    return map[length] || length;\n  };\n  const getReflowFieldLength = row => {\n    return row.type === \'String\' ? getStringLabel(row.length) : \'-\';\n  };\n\n  const reflowConfirmBtnDisabled = ref(false);\n  const isTextOverflow = ref(false);\n\n  // 检测文本是否溢出\n  const checkOverflow = event => {\n    const element = event.target;\n    isTextOverflow.value = element.scrollWidth > element.clientWidth;\n  };\n  const handleSelectReflowField = (selection, row) => {\n    reflowConfirmBtnDisabled.value = selection.length === 0;\n  };\n\n  const confirmLoading = ref(false);\n  const handleUploadReflowField = () => {\n    confirmLoading.value = true;\n    const selectedList = reflowTableRef.value.getSelectionRows();\n    requestApi(\n      uploadReflowField,\n      {\n        list: selectedList,\n      },\n      res => {\n        if (res.result) {\n          showMessage(\'success\', \'添加成功\');\n          reflowDialogVisible.value = false;\n        } else {\n          showMessage(\'error\', res.msg || \'添加失败\');\n        }\n      },\n      err => {\n        // console.error(err);\n        showMessage(\'error\', err);\n      },\n      () => {\n        confirmLoading.value = false;\n      }\n    );\n  };\n\n  const {\n    /**\n     * 名称输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    nameEditor,\n    /**\n     * 标题输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    labelEditor,\n    /**\n     * 描述输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    descriptionEditor,\n    /**\n     * 表格节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    tableviewRef,\n    /**\n     * 数据库视图导入生成的实体\n     * entity 的 origin 属性是否是 view\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isViewEntity,\n    /**\n     * 添加实体属性\n     *\n     * @function\n     */\n    addItem,\n    /**\n     * 生成移除按钮的提示\n     *\n     * @function\n     * @return string\n     */\n    getRemoveTooltip,\n    /**\n     * 表格选中的行元素\n     *\n     * @type {Vue.computed<object>}\n     */\n    selectedItem,\n    /**\n     * 是否是官方实体属性\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntityProperty,\n    /**\n     * 移除实体索引\n     *\n     * @function\n     * @param item - 需要删除的行元素\n     */\n    removeItem,\n    /**\n     * 表格的渲染数据\n     *\n     * @type {Vue.computed<array>}\n     */\n    renderList,\n    /**\n     * 上移当前选中的实体索引\n     *\n     * @function\n     */\n    moveUpItem,\n    /**\n     * 下移当前选中的实体索引\n     *\n     * @function\n     */\n    moveDownItem,\n    /**\n     * 表格高度\n     *\n     * @type {Vue.computed<number>}\n     */\n    tableHeight,\n    /**\n     * 设置表单列的样式\n     *\n     * @function\n     */\n    setRowClassName,\n    /**\n     * 右键选中表格行元素\n     *\n     * @function\n     */\n    onContextMenuRow,\n    /**\n     * 选中行元素时触发\n     *\n     * @function\n     * @param item - 行元素\n     */\n    onSelectRowWithDataType,\n    /**\n     * 拖拽调整表格列宽度\n     *\n     * @function\n     * @param newWidth - 新宽度\n     * @param oldWidth - 旧宽度\n     * @param column - 列元素\n     */\n    handleDragend,\n    /**\n     * 是否禁止编辑行元素\n     *\n     * @function\n     * @param item - 行元素\n     */\n    getDisable,\n    /**\n     * 设置表格列元素编辑状态\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 属性名称\n     * @param focus - 是否选中输入框\n     */\n    onSetItemEdit,\n    /**\n     * Tab 键跳转切换下一个属性\n     *\n     * @function\n     * @param event - 原生键盘事件\n     * @param item - 行元素\n     * @param name - 属性名称\n     */\n    onKeyUp,\n    /**\n     * 名称输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的名称\n     */\n    onBlurName,\n    /**\n     * 验证不通过时滚动到错误元素\n     */\n    errorScrollIntoView,\n    /**\n     * 存在错误\n     *\n     * @type {Vue.ref<boolean>}\n     */\n    hasInvalid,\n    /**\n     * 显示输入框的提示\n     *\n     * @type {Vue.ref<string>}\n     */\n    tooltipOpened,\n    /**\n     * 属性名，暂时存储属性名，用于输入框输入等操作\n     *\n     * @type {Vue.ref<string>}\n     */\n    itemNameValue,\n    /**\n     * 输入框获取焦点时触发\n     *\n     * 1. 设置tooltipOpened的值\n     * 2. 设置itemNameValue\n     *\n     * @function\n     * @param item - 当前行元素\n     */\n    onFocusName,\n    /**\n     * 标题输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的标题\n     */\n    onBlurLabel,\n    /**\n     * 是否应用正在发布\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isAppDeploying,\n    /**\n     * 是否实体已经发布过并且是复合类型\n     *\n     * 1. 实体已经发布过，在app下的depEntities可以找到该实体\n     * 2. 实体是复合类型：\'Map\', \'List\'，或者typeKind是reference并且namespace是\'entities\', \'structures\'\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isPublishedComplexType,\n    /**\n     * 数据类型的标题\n     *\n     * @function\n     * @param item - 行元素\n     * @return string\n     */\n    showDatatype,\n    /**\n     * 双击编辑数据类型输入框\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - 原生事件\n     */\n    onDblClickDatatype,\n    /**\n     * 获取可选类型\n     *\n     * @function\n     * @return 可选类型\n     */\n    getDataTypeList,\n    /**\n     * 失焦时取消当前行元素编辑状态\n     *\n     * @function\n     * @param item - 行元素\n     */\n    handleBlur,\n    /**\n     * 修改实体属性类型\n     *\n     * @function\n     * @param event - event.value 实际使用数据\n     */\n    onChangeDatatype,\n    /**\n     * 是否属于官方实体\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntity,\n    /**\n     * 复合类型\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isComplexType,\n    /**\n     * 修改是否必填\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkbox 原生事件\n     */\n    requireInput,\n    /**\n     * 能否设置默认值\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    canSetDefaultValue,\n    /**\n     * 对应节点是否有错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    IsError,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inTable,\n    /**\n     * 全部勾选或者取消全部勾选\n     *\n     * @function\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    toggleSelectAll,\n    /**\n     * 设置显示属性\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    setDisplay,\n    /**\n     * 显示在筛选\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inFilter,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inForm,\n    /**\n     * 显示在详情\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inDetail,\n    /**\n     * ElementPlus 的 popper 配置\n     */\n    popperOptions,\n    /**\n     * 右键菜单选中项\n     *\n     * @type {Vue.ref<object>}\n     */\n    menuSelectedItem,\n    /**\n     * 项对应的右键菜单是否存在\n     */\n    popperExistMap,\n    /**\n     * 项对应的右键菜单是否显示\n     */\n    popperVisibleMap,\n    /**\n     * 右键菜单的触发节点\n     */\n    triggerRef,\n    /**\n     * 右键菜单的出现位置\n     */\n    placement,\n    /**\n     * 右键菜单隐藏时的处理函数\n     */\n    onMenuPopperHide,\n    /**\n     * 菜单点击时\n     */\n    onMenuClick,\n    /**\n     * 菜单-查找引用\n     *\n     * @function\n     */\n    onMenuFindUsage,\n    /**\n     * 菜单-删除\n     *\n     * @function\n     */\n    onMenuDelete,\n    /**\n     * 实体属性数据类型\n     *\n     * @type {Vue.computed<string>}\n     */\n    typeName,\n    /**\n     * 小数位数的校验错误信息\n     *\n     * @type {Vue.computed<string>}\n     */\n    scaleErrorMsg,\n    /**\n     * 属性的响应式数据\n     *\n     * @type {Vue.reactive<object>}\n     * @property scale - 小数位数\n     */\n    model,\n    /**\n     * 小数位数的范围\n     *\n     * @type {Vue.computed<object>}\n     * @property min - 最小值\n     * @property max - 最大值\n     */\n    scaleOption,\n    /**\n     * 是否禁用小数位数\n     *\n     * @function\n     * @param item - 行元素\n     * @return boolean\n     */\n    decimalDisabled,\n    /**\n     * 修改小数位数\n     *\n     * @function\n     */\n    setScale,\n    /**\n     * 关联属性\n     *\n     * @type {Vue.ref<string>}\n     */\n    entityReference,\n    /**\n     * 类型列表\n     *\n     * @type {Vue.ref<array>}\n     */\n    dataTypeList,\n    /**\n     * 关联实体存在错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    isReleationEntityError,\n    /**\n     * 设置关联属性\n     *\n     * @function\n     * @param event - event.value 表示实际数据\n     */\n    onSaveReference,\n    /**\n     * 清除关联属性\n     *\n     * @function\n     */\n    onClearReference,\n    /**\n     * 设置关联属性实体记录删除规则\n     *\n     * @function\n     * @param event - 选中事件对象\n     */\n    setDeleteRule,\n    /**\n     * 设置错误信息\n     *\n     * @function\n     * @param errorMsgs - 错误信息\n     */\n    changeErrorMsgs,\n    /**\n     * 是否来源于数据库表/excel\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isTableOrExcelOrigin,\n    /**\n     * 描述输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的描述\n     */\n    onBlurDescription,\n    /**\n     * 是否显示数据库高级设置\n     *\n     * 1.没有设置数据源\n     * 2.实体是excel导入或者数据源反向导入\n     * 3.权限实体（贤宇说一直是以LCAP开头来判断的）\n     * 这3种情况不显示数据库设置\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    showDatabasetype,\n    /**\n     * 实体在同步数据源时产生的错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    sourceSyncErrMsgs,\n    /**\n     * 错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    errorMsgs,\n    /**\n     * 数据库列名校验规则\n     *\n     * @type {Vue.computed<object>}\n     */\n    entityPropertyColumnNameRules,\n    /**\n     * 数据库列名输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyColumnNamePlaceholder,\n    /**\n     * 生成名称校验规则\n     *\n     * @function\n     * @param node - 节点\n     * @return 名称校验规则\n     */\n    getEntityPropertyRules,\n    /**\n     * 名称输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyPlaceholder,\n    /**\n     * 设置选中行的数据类型\n     *\n     * @function\n     * @param value - 数据类型\n     */\n    setDataType,\n  } = inject(\'$context\');\n<\/script>\n\n<style module="$propertyDesigner">\n  .errorMsg {\n    color: var(--designer-font-second-color);\n    margin: 0 46px;\n  }\n\n  .errorMsg + .errorMsg {\n    margin-top: 10px;\n  }\n\n  .infoicon {\n    display: inline-block;\n    height: 12px;\n    width: 12px;\n    background: var(--assets-warning-info-svg) no-repeat;\n    background-size: 100% 100%;\n    vertical-align: -1px;\n    margin-right: 5px;\n  }\n</style>\n\n<style module>\n  div.table [class^=\'u-input__\']:focus,\n  div.table [class^=\'u-input__\'][focus],\n  div.table [class^=\'u-input__\']:hover,\n  div.table [class^=\'u-select__\']:focus,\n  div.table [class^=\'u-select__\'][focus],\n  div.table [class^=\'u-select__\'][opened],\n  div.table [class^=\'u-select__\']:hover {\n    border-color: var(--entity-designer-table-input-focus-border-color);\n    box-shadow: var(--entity-designer-table-input-focus-box-shadow);\n  }\n\n  .head {\n    margin: 16px;\n    padding: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n  }\n\n  div.head [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  .body {\n    margin: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n    overflow: hidden;\n  }\n\n  .entityListIcon {\n    width: 16px;\n    height: 16px;\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .edit {\n    display: inline-block;\n    width: 100%;\n    line-height: 38px;\n  }\n\n  .edit:hover {\n    cursor: pointer;\n  }\n\n  .edit:focus {\n    outline: none;\n  }\n\n  .edit .text > span {\n    color: var(--entity-designer-table-color);\n  }\n\n  .edit .text {\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .editwrap {\n    margin-left: -9px;\n  }\n\n  .editwrap [class^=\'s-datatype-select__\'] {\n    vertical-align: middle;\n  }\n\n  .text {\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n  }\n\n  .textContent {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n    max-width: calc(100% - 28px);\n    margin-right: 8px;\n  }\n  .textContent:empty {\n    display: none;\n  }\n\n  .text > span {\n    display: inline-block;\n    color: var(--entity-designer-table-disabled-color);\n    vertical-align: middle;\n  }\n\n  .validator {\n    width: 100%;\n  }\n\n  .btnnav {\n    border-bottom: 1px solid var(--entity-designer-border-color);\n    border-top: 1px solid var(--entity-designer-border-color);\n    padding: 5px 24px;\n  }\n\n  div.btnnav[direction=\'horizontal\'][gap=\'small\'] > :not(:last-child) {\n    margin-right: 8px;\n  }\n\n  .btnnav1 {\n    border-top: none;\n    background-color: var(--entity-designer-btnnav-background);\n  }\n\n  .bodywrap {\n    padding: 16px 24px 0;\n    overflow-x: auto;\n    overflow-y: hidden;\n    margin-bottom: 24px;\n  }\n\n  div.bodywrap [class^=\'u-grid-layout_column__\'] {\n    padding-bottom: 0;\n  }\n\n  .bodywrap1 {\n    padding: 16px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .advancedWrap {\n    padding: 10px 24px 25px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .entityfrom [class^=\'u-form_item_label__\'] {\n    width: 36px !important;\n  }\n\n  div.input {\n    width: 100%;\n    margin-right: 12px;\n  }\n\n  .iconBase {\n    display: inline-block;\n    width: 20px;\n    height: 38px;\n    line-height: 38px;\n    text-align: center;\n    font-size: var(--font-size-large);\n    font-size: 14px;\n  }\n\n  .iconKey {\n    color: var(--designer-table-edit-icon-key-color);\n  }\n\n  .iconLink {\n    color: var(--designer-table-edit-icon-link-color);\n  }\n\n  .iconEdit {\n    color: var(--color-base);\n    opacity: 0;\n  }\n\n  .iconLink2 {\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    line-height: 16px;\n    font-size: var(--font-size-huge);\n    color: var(--brand-primary);\n    cursor: pointer;\n    position: relative;\n    top: 2px;\n    left: 4px;\n  }\n\n  .edit:hover .iconEdit {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n\n  .edit:hover .iconEdit:hover {\n    opacity: 1;\n  }\n\n  .icon {\n    width: 14px;\n    height: 14px;\n    display: inline-block;\n    vertical-align: middle;\n    background-repeat: no-repeat;\n  }\n\n  div.normalfrom [class^=\'u-form_item_label__\'] {\n    width: 60px !important;\n  }\n\n  div.normalfrom > div {\n    margin-bottom: 16px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'],\n  div.normalfrom [class^=\'u-select__\'],\n  div.normalfrom [class^=\'u-form_item_field__\'],\n  div.normalfrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom [class^=\'u-form_item_label__\'] {\n    width: 94px !important;\n  }\n\n  div.reffrom [class^=\'u-input__\'],\n  div.reffrom [class^=\'u-tree-select__\'],\n  div.reffrom [class^=\'u-select__\'],\n  div.reffrom [class^=\'u-form_item_field__\'],\n  div.reffrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.reffrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom .text {\n    opacity: 0.3;\n  }\n\n  div.reffrom [class^=\'u-form_item_extra__\'] {\n    width: 12px;\n  }\n\n  .flexgrid {\n    display: flex;\n  }\n\n  .gridcolumn {\n    width: auto;\n  }\n\n  .gridcolumn:not(:last-child) {\n    margin-right: 24px;\n  }\n\n  div.fixedwidthinput,\n  div.textarea {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  .icondivider {\n    color: var(--entity-designer-border-color);\n  }\n\n  .advanced {\n    padding-top: 10px;\n  }\n\n  .scaleErrorMsg {\n    position: absolute;\n    color: rgb(242, 73, 87);\n  }\n  .typeError {\n    border-radius: 4px;\n    border: 1px solid var(--input-border-color-error);\n  }\n  .checkbox [class=\'el-checkbox__label\'] {\n    line-height: 23px;\n    font-size: 12px;\n    text-overflow: ellipsis;\n    text-align: left;\n    font-weight: 600;\n    color: var(--el-table-header-text-color);\n  }\n  .checkbolabel [class=\'el-checkbox__label\'] {\n    line-height: 23px !important;\n    font-size: 12px !important;\n    text-overflow: ellipsis !important;\n    text-align: left !important;\n    font-weight: 600 !important;\n    color: var(--el-table-header-text-color) !important;\n  }\n  .checkbox {\n    height: 23px;\n    line-height: 23px;\n  }\n</style>\n<style module="$contextmenu">\n  .menu {\n    margin-top: 0 !important;\n  }\n\n  .menu .group [class^=\'el-menu-item-group__title\'] {\n    --el-menu-text-color: var(--el-menu-top-title-text-color);\n    height: 32px;\n    font-weight: bold;\n    border-bottom: 1px solid var(--line-color-regular);\n    background: var(--fill-color-thead);\n    color: var(--el-menu-text-color);\n    cursor: auto;\n  }\n</style>\n\n<style scoped>\n  .tableCell :deep(.cell) {\n    padding: 0;\n    line-height: 20px;\n    padding-left: 6px;\n  }\n  .theadLable {\n    overflow: visible;\n    width: 100%;\n    padding-left: 6px;\n    border-right: 1px solid var(--entity-designer-property-dragger-border-color);\n  }\n  .topIconGroup {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 8px;\n    background-color: var(--entity-designer-icon-group-background-color);\n    padding: 5px 24px;\n    border-bottom: 1px solid var(--entity-designer-icon-group-border-color);\n    position: sticky;\n    z-index: 9;\n    top: 64px;\n  }\n\n  .icon {\n    margin-right: 8px;\n  }\n\n  .extraForm :deep(.el-form-item__label) {\n    font-size: 12px;\n  }\n\n  :deep(.row-style) {\n    border: 1px solid #4d87fe;\n  }\n\n  :deep(.cell-style) {\n    border-bottom: 1px solid #409eff;\n  }\n\n  .elFormFlex {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n</style>\n\n<style scoped>\n  .reflowPopover {\n    width: 340px;\n    padding: 8px;\n  }\n\n  .reflowPopoverEmpty {\n    padding: 20px 0 30px;\n  }\n\n  .reflowPopoverItem {\n    height: 48px;\n    line-height: 48px;\n    padding: 0 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    &:hover {\n      background-color: #edf2f9;\n    }\n  }\n\n  .warningIcon {\n    margin-right: 4px;\n  }\n\n  .reflowDialogFooter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 居中对齐flex布局 */\n  .centerFlex {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 单行文本溢出省略号 */\n  .sle,\n  [sle] {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  /* tooltip触发器样式 */\n  .tooltip-trigger {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n</style>\n',null],sourceRoot:""}]);const r=i},460:(e,n,t)=>{t.d(n,{Z:()=>r});var l=t(481),o=t.n(l),a=t(966),i=t.n(a)()(o());i.push([e.id,"\n.EntityPropertyDesigner__errorMsg--U135D {\n    color: var(--designer-font-second-color);\n    margin: 0 46px;\n}\n.EntityPropertyDesigner__errorMsg--U135D + .EntityPropertyDesigner__errorMsg--U135D {\n    margin-top: 10px;\n}\n.EntityPropertyDesigner__infoicon--uVHId {\n    display: inline-block;\n    height: 12px;\n    width: 12px;\n    background: var(--assets-warning-info-svg) no-repeat;\n    background-size: 100% 100%;\n    vertical-align: -1px;\n    margin-right: 5px;\n}\n","",{version:3,sources:["webpack://./src/components/EntityPropertyDesigner.vue"],names:[],mappings:";AAsjDE;IACE,wCAAwC;IACxC,cAAc;AAChB;AAEA;IACE,gBAAgB;AAClB;AAEA;IACE,qBAAqB;IACrB,YAAY;IACZ,WAAW;IACX,oDAAoD;IACpD,0BAA0B;IAC1B,oBAAoB;IACpB,iBAAiB;AACnB",sourcesContent:['<template>\n  <div>\n    <div\n      v-if="!isViewEntity"\n      class="topIconGroup"\n      :class="$style.body"\n      style="margin-top: 0px; margin-bottom: 0px; border-bottom: 0px; height: 40px"\n    >\n      \x3c!-- 添加实体属性 --\x3e\n      <s-others-icon name="add" tooltip="添加属性" button @click="handleAddItem"></s-others-icon>\n      \x3c!-- 删除实体属性 --\x3e\n      <s-others-icon\n        name="remove"\n        button\n        :tooltip="getRemoveTooltip()"\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          selectedItem.naslNode.primaryKey ||\n          isOfficalEntityProperty(selectedItem)\n        "\n        @click="removeItem(selectedItem)"\n      ></s-others-icon>\n      <div :class="$style.icondivider">|</div>\n      \x3c!-- 上移实体属性 --\x3e\n      <s-others-icon\n        name="position-up"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置顶\'\n            : \'上移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveUpItem"\n      ></s-others-icon>\n      \x3c!-- 下移实体属性 --\x3e\n      <s-others-icon\n        name="position-down"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置底\'\n            : \'下移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveDownItem"\n      ></s-others-icon>\n      \x3c!-- 一键添加到备选字段库 --\x3e\n      <el-button v-if="showReflowBtn" :loading="reflowLoading" @click="addReflowField">一键添加到备选字段库</el-button>\n    </div>\n    <div :class="$style.body" style="margin-top: 0px">\n      <div :class="$style.bodywrap" class="tableCell">\n        <el-table\n          ref="tableviewRef"\n          :data="renderList"\n          highlight-current-row\n          :style="`min-width:950px;${tableHeight}`"\n          style="width: 100%"\n          :class="\n            renderList.length > 8\n              ? [$style.table, $style.tablescroll, \'s-data-table-edit\']\n              : [$style.table, \'s-data-table-edit\']\n          "\n          :value="selectedItem && selectedItem.naslNode.name"\n          value-field="name"\n          :header-row-style="{ height: \'40px\' }"\n          :cell-style="{ padding: \'0px\' }"\n          :row-style="{ height: \'42px\' }"\n          :row-class-name="setRowClassName"\n          empty-text="暂无数据"\n          @row-contextmenu="onContextMenuRow"\n          @row-click="onSelectRowWithDataType"\n          @header-dragend="handleDragend"\n          @click.right.prevent\n          :border="true"\n        >\n          \x3c!-- 主键/关联属性的icon --\x3e\n          <el-table-column width="38" prop="primaryKey" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <s-others-icon\n                  v-if="item.naslNode.primaryKey"\n                  name="key"\n                  :class="[$style.iconBase, $style.iconKey]"\n                ></s-others-icon>\n                <s-others-icon\n                  v-if="item.naslNode.relationProperty"\n                  name="link"\n                  :class="[$style.iconBase, $style.iconLink]"\n                ></s-others-icon>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 标题 --\x3e\n          <el-table-column prop="label" min-width="107" label="字段注释">\n            <template #header>\n              <div class="theadLable">字段注释</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!item.loading && !item.naslNode.parentNode.loading && !isViewEntity">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'label\'"\n                  :class="$style.edit"\n                  @dblclick="onSetItemEdit(item, \'label\', true)"\n                  tabindex="0"\n                  @keyup="onKeyUp($event, item, \'label\')"\n                  :title="item.naslNode.label"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.label }}</span>\n                    <s-others-icon\n                      v-show="!isOfficalEntityProperty(item)"\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'label\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    ref="labelValidatorRef"\n                    v-slot="slotProps"\n                    :value="item.naslNode.label"\n                    rules="maxLength(63)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurLabel(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    <s-input\n                      placeholder="请输入标题"\n                      :model-value="item.naslNode.label"\n                      ref="labelEditor"\n                      :class="$style.input"\n                      @focus="handleLabelFocus(item.naslNode.label)"\n                      @blur:value="handleLabelBlur($event, slotProps, item)"\n                      @input="handleLabelInput($event, slotProps)"\n                      @keyup.enter="$event.target.blur()"\n                    ></s-input>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                \x3c!-- 之前仅仅为 item.label 但是实际上在item 对象中没有label属性，恐在特殊情况下存在，故范围限制为 区分 viewEntity --\x3e\n                <span>{{ isViewEntity ? item.naslNode.label : item.label }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 名称 --\x3e\n          <el-table-column label="字段名" prop="name" min-width="87">\n            <template #header>\n              <div class="theadLable">字段名</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!getDisable(item)">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'name\'"\n                  tabindex="0"\n                  :class="$style.edit"\n                  :title="item.naslNode.name"\n                  @dblclick="onSetItemEdit(item, \'name\', true)"\n                  @keyup="onKeyUp($event, item, \'name\')"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.name }}</span>\n                    <s-others-icon\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'name\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    v-slot="slotProps"\n                    :value="item.naslNode.name"\n                    :rules="getEntityPropertyRules(item.naslNode)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurName(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    \x3c!-- “属性名”为空是显示提示信息 --\x3e\n                    <el-tooltip\n                      :visible="tooltipOpened === \'entityAttribute\' && !itemNameValue"\n                      placement="top-start"\n                      content="属性为英文字母、数字和下划线，且首字母小写"\n                    >\n                      <s-input\n                        :placeholder="entityPropertyPlaceholder"\n                        :model-value="item.naslNode.name"\n                        ref="nameEditor"\n                        :class="$style.input"\n                        @focus="onFocusName(item)"\n                        @blur:value="slotProps.blurFn($event)"\n                        @input="slotProps.inputChange($event)"\n                        @keyup.enter="$event.target.blur()"\n                        @update:modelValue="itemNameValue = $event"\n                      ></s-input>\n                    </el-tooltip>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                <span>{{ item.naslNode.name }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 数据类型 --\x3e\n          <el-table-column label="数据类型" min-width="247">\n            <template #header>\n              <div class="theadLable">数据类型</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <el-tooltip v-if="isAppDeploying" content="应用发布中，暂不能修改" placement="bottom-start">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </el-tooltip>\n                \x3c!-- 禁用状态 / 已经发布过的复合类型 --\x3e\n                <template v-else-if="getDisable(item) || isPublishedComplexType(item)">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </template>\n                \x3c!-- 非禁用状态 --\x3e\n                <template v-else>\n                  \x3c!-- 展示态 --\x3e\n                  <div\n                    v-if="item.edit !== \'datatype\'"\n                    tabindex="0"\n                    :class="$style.edit"\n                    :ref="`datatype${item.naslNode.id}`"\n                    :title="showDatatype(item)"\n                    @dblclick="onDblClickDatatype(item, $event)"\n                    @keyup="onKeyUp($event, item, \'datatype\')"\n                  >\n                    <div :class="$style.text">\n                      <span :class="$style.textContent">{{ showDatatype(item) }}</span>\n                      <s-others-icon\n                        name="edit"\n                        :class="[$style.iconBase, $style.iconEdit]"\n                        @click="(getDataTypeList(), onSetItemEdit(item, \'datatype\', false))"\n                      ></s-others-icon>\n                    </div>\n                  </div>\n                  \x3c!-- 编辑态 --\x3e\n                  <div v-else :class="$style.editwrap">\n                    <el-tooltip :content="`${isAppDeploying ? \'应用发布中，暂不能修改\' : \'\'}`" placement="bottom-start">\n                      <s-datatype-select\n                        :unionable="false"\n                        :no-union-subtype="true"\n                        :data-type-list="item.naslNode.lastVersion ? dataTypeList : undefined"\n                        :last-version="item.naslNode.lastVersion"\n                        :type-annotation="item.naslNode.typeAnnotation"\n                        :concept="item.naslNode.entity.concept"\n                        :show-system-types="false"\n                        :show-generic-types="true"\n                        :show-entity="true"\n                        :show-structures="true"\n                        :emptyable="false"\n                        :hasAnonymousStructure="true"\n                        :disabled="item.naslNode.readonly || isAppDeploying || isPublishedComplexType(item)"\n                        @blur="handleBlur(item)"\n                        @change="onChangeDatatype"\n                      ></s-datatype-select>\n                    </el-tooltip>\n                  </div>\n                </template>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 是否必填 --\x3e\n          <el-table-column label="是否必填" width="70" prop="required" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else style="margin-left: 16px">\n                <el-checkbox\n                  v-model="item.naslNode.required"\n                  :disabled="getDisable(item) || isComplexType(item) || isOfficalEntity(item)"\n                  :tabindex="item.editable === false || item.loading || item.naslNode.parentNode.loading ? -1 : 0"\n                  :class="$style.checkbox"\n                  @change="requireInput(item, $event)"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 默认值 --\x3e\n          <el-table-column label="默认值" prop="defaultValue" width="120" :resizable="false">\n            <template #default="{ row: item }">\n              <div v-if="[\'createdTime\', \'updatedTime\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>自动生成</span>\n              </div>\n              <div v-else-if="[\'createdBy\', \'updatedBy\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>（无）</span>\n              </div>\n              <template v-else-if="!canSetDefaultValue(item)">\n                <div :class="$style.text">\n                  <span>（无）</span>\n                </div>\n              </template>\n              <template\n                v-else-if="\n                  item.loading || item.naslNode.parentNode.loading || item.naslNode.generationRule !== \'manual\'\n                "\n              >\n                <div :class="$style.text">\n                  <div :class="$style.text" v-if="item.naslNode.generationRule === \'auto\'">\n                    <span>自动生成</span>\n                  </div>\n                  <span v-else>{{ item.naslNode.defaultValue }}</span>\n                </div>\n              </template>\n              <template v-else>\n                <s-attr-input\n                  title="默认值绑定"\n                  node-concept="defaultValue"\n                  :name="item.naslNode.name"\n                  :parent-node="item.naslNode"\n                  :node="item.naslNode.defaultValue"\n                  :class="{\n                    [$style.typeError]: IsError(item.naslNode),\n                  }"\n                ></s-attr-input>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表格 --\x3e\n          <el-table-column width="100" prop="display.inTable" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表格"\n                :class="$style.checkbolabel"\n                :model-value="inTable"\n                @change="toggleSelectAll($event, \'inTable\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inTable"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inTable\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在筛选 --\x3e\n          <el-table-column width="100" prop="display.inFilter" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在筛选"\n                :class="$style.checkbolabel"\n                :model-value="inFilter"\n                @change="toggleSelectAll($event, \'inFilter\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inFilter"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inFilter\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表单 --\x3e\n          <el-table-column width="100" prop="display.inForm" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表单"\n                :class="$style.checkbolabel"\n                :model-value="inForm"\n                @change="toggleSelectAll($event, \'inForm\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inForm"\n                  :class="$style.checkbox"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  @change="setDisplay(item, $event, \'inForm\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在详情 --\x3e\n          <el-table-column width="100" prop="display.inDetail" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在详情"\n                :class="$style.checkbolabel"\n                :model-value="inDetail"\n                @change="toggleSelectAll($event, \'inDetail\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inDetail"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inDetail\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n        </el-table>\n        \x3c!-- 右键点击 --\x3e\n        <el-popover\n          :disabled-scroll="true"\n          trigger="click"\n          ref="menuPopper"\n          :popper-options="popperOptions"\n          v-if="menuSelectedItem && popperExistMap[menuSelectedItem.id]"\n          v-model:visible="popperVisibleMap[menuSelectedItem && menuSelectedItem.id]"\n          :virtual-ref="triggerRef"\n          :placement="placement"\n          :show-arrow="false"\n          @hide="onMenuPopperHide"\n        >\n          <el-menu :class="$contextmenu.menu" @click="onMenuClick">\n            <el-menu-item-group :class="$contextmenu.group" title="属性">\n              <el-menu-item :class="$contextmenu.item" @click="onMenuFindUsage">查找引用</el-menu-item>\n              <el-menu-item\n                :class="$contextmenu.item"\n                @click="onMenuDelete(removeItem)"\n                :disabled="\n                  (menuSelectedItem && menuSelectedItem.primaryKey) ||\n                  isOfficalEntityProperty({\n                    naslNode: menuSelectedItem,\n                  }) ||\n                  isViewEntity\n                "\n              >\n                删除\n              </el-menu-item>\n            </el-menu-item-group>\n          </el-menu>\n        </el-popover>\n      </div>\n      <template v-if="selectedItem">\n        <div :class="[$style.flexgrid, $style.bodywrap1]">\n          <div :class="$style.gridcolumn" class="extraForm">\n            <el-form\n              ref="selectedItemForm"\n              :model="selectedItem"\n              :class="[$style.reffrom, $style.blockFromLayout, \'s-data-attr-designer-form\']"\n              label-width="85px"\n              label-position="right"\n              :inline="true"\n            >\n              \x3c!-- 最 大/小 值/长度 --\x3e\n              <skeleton-render\n                name="views/data/components/entity-field-rules/index"\n                :property="selectedItem.naslNode"\n                :key="\'rules_\' + selectedItem.naslNode.name"\n                :disabled="\n                  selectedItem.loading ||\n                  selectedItem.naslNode.parentNode.loading ||\n                  selectedItem.naslNode.editable === false ||\n                  isViewEntity\n                "\n                :is-view-entity="isViewEntity"\n                direction="horizontal"\n                :class="$style.rules"\n              />\n              \x3c!-- 小数位数 --\x3e\n              <el-form-item v-if="typeName === \'Decimal\'" label="小数位数">\n                <el-input-number\n                  placeholder="请输入小数位数"\n                  :color="scaleErrorMsg ? \'error\' : \'\'"\n                  v-model="model.scale"\n                  :min="scaleOption.min"\n                  :max="scaleOption.max"\n                  controls-position="right"\n                  :disabled="decimalDisabled(selectedItem) || isViewEntity"\n                  :value-on-clear="0"\n                  @keyup.enter="$event.target.blur()"\n                  @change="setScale"\n                ></el-input-number>\n                <div v-if="scaleErrorMsg" :class="$style.scaleErrorMsg">\n                  <s-others-icon name="solid-hint"></s-others-icon>\n                  {{ scaleErrorMsg }}\n                </div>\n              </el-form-item>\n              \x3c!-- 关联属性 --\x3e\n              <el-form-item :key="selectedItem.naslNode.name">\n                <template #label>\n                  <div style="display: flex; align-items: center">\n                    关联属性\n                    <s-others-icon name="link2" :class="$style.iconLink2"></s-others-icon>\n                  </div>\n                </template>\n                <skeleton-render\n                  name="views/data/entity-reference/index"\n                  :entity="entity"\n                  :property="selectedItem.naslNode"\n                  :value="entityReference"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  :data-type-list="selectedItem.naslNode.lastVersion ? dataTypeList : undefined"\n                  :error="isReleationEntityError(selectedItem.naslNode)"\n                  @save="onSaveReference"\n                  @clear="onClearReference"\n                />\n              </el-form-item>\n              \x3c!-- 属性记录 --\x3e\n              <el-form-item\n                label="关联属性实体记录删除规则"\n                v-if="selectedItem.naslNode.relationProperty"\n                layout="block"\n                class="relationDelRule"\n              >\n                <el-select\n                  style="width: 240px"\n                  v-model="selectedItem.naslNode.deleteRule"\n                  placeholder="请选择"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  @change="setDeleteRule"\n                >\n                  <el-option label="不允许删除" value="protect"></el-option>\n                  <el-option label="允许删除且同时删除本实体记录" value="cascade"></el-option>\n                </el-select>\n              </el-form-item>\n              \x3c!-- 主键生成规则 --\x3e\n              <el-form-item v-if="selectedItem.naslNode.primaryKey" label="主键生成规则" placement="bottom">\n                <skeleton-render\n                  name="views/data/components/entity-primarykey-rules/index"\n                  :disabled="isViewEntity"\n                  :entity="entity"\n                  :selected-item="selectedItem.naslNode"\n                  @changeErrorMsgs="changeErrorMsgs"\n                />\n              </el-form-item>\n              \x3c!-- 数据库列名 --\x3e\n              <el-form-item label="数据库列名" placement="bottom">\n                <u-validator\n                  ref="columnNameValidatorRef"\n                  style="width: 100%"\n                  :rules="entityPropertyColumnNameRules"\n                  :value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                  @blur-dirty-valid="selectedItem.naslNode.setColumnName($event.value)"\n                  v-slot="slotProps"\n                >\n                  <s-input\n                    :placeholder="entityPropertyColumnNamePlaceholder"\n                    :model-value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                    :disabled="isTableOrExcelOrigin || isViewEntity"\n                    @change="slotProps.blurChange"\n                    @input="slotProps.inputChange($event)"\n                    @keyup.enter.stop="$event.target.blur()"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n              \x3c!-- 描述 --\x3e\n              <el-form-item label="描述" prop="description">\n                <u-validator\n                  v-slot="slotProps"\n                  :value="selectedItem.naslNode.description"\n                  rules="maxLength(63)"\n                  :class="$style.validator"\n                  @blur-valid="onBlurDescription(selectedItem, $event.value)"\n                  @blur-invalid="errorScrollIntoView"\n                  @validate-result="hasInvalid = !$event.valid"\n                >\n                  <s-input\n                    type="textarea"\n                    ref="descriptionEditor"\n                    placeholder="请输入描述"\n                    :model-value="selectedItem.naslNode.description"\n                    :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                    @blur:value="slotProps.blurFn($event)"\n                    @keyup.enter="slotProps.blurFn()"\n                    @input="slotProps.inputChange($event)"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n            </el-form>\n          </div>\n        </div>\n        <div :class="$style.advancedWrap" v-if="showDatabasetype">\n          <el-form :disabled="isViewEntity" label-width="80px" gap="small" class="s-data-attr-designer-form">\n            <skeleton-render\n              name="views/data/components/entity-property-databasetype/index"\n              :property="selectedItem.naslNode"\n            />\n          </el-form>\n        </div>\n      </template>\n      <div :class="$style.bodywrap1" v-show="errorMsgs.length || sourceSyncErrMsgs.length">\n        <div v-for="errorMsg in errorMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n        \x3c!-- 实体在同步数据源时产生的错误信息 --\x3e\n        <div v-for="errorMsg in sourceSyncErrMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n      </div>\n    </div>\n    \x3c!-- 查询弹出框 --\x3e\n    <el-popover\n      :visible="reflowPopoverVisible"\n      :virtual-ref="labelEditor"\n      :show-arrow="false"\n      placement="bottom-start"\n      :width="340"\n      virtual-triggering\n    >\n      <div class="reflowPopover" v-loading="reflowPopoverLoading">\n        <div class="reflowPopoverEmpty" v-if="fieldList.length === 0">\n          <s-others-icon name="hint" class="centerFlex" style="font-size: 28px; margin-bottom: 20px"></s-others-icon>\n          <span class="centerFlex">暂无推荐字段</span>\n        </div>\n        <div v-else>\n          <el-scrollbar height="250px">\n            <div\n              class="reflowPopoverItem"\n              v-for="item in fieldList"\n              :key="item.id"\n              @mouseenter="activeItem = item"\n              @mouseleave="activeItem = null"\n            >\n              <el-row :gutter="10">\n                <el-col :span="9" class="sle">\n                  <el-tooltip :content="item.name" placement="top" :show-after="500" :disabled="!isTextOverflow">\n                    <div\n                      class="tooltip-trigger"\n                      v-html="getFieldName(item.name, item.matchedNames)"\n                      @mouseenter="checkOverflow"\n                    ></div>\n                  </el-tooltip>\n                </el-col>\n                <el-col class="sle" :span="8">\n                  <el-tooltip\n                    :content="getFieldTypeTitle(item)"\n                    placement="top"\n                    :show-after="500"\n                    :disabled="!isTextOverflow"\n                  >\n                    <div class="tooltip-trigger" @mouseenter="checkOverflow">{{ getFieldTypeTitle(item) }}</div>\n                  </el-tooltip>\n                </el-col>\n                <el-col :span="4">\n                  {{ item.required ? \'必填\' : \'非必填\' }}\n                </el-col>\n                <el-col :span="3" v-show="activeItem?.id === item.id" style="color: #2383ff">使用</el-col>\n              </el-row>\n            </div>\n          </el-scrollbar>\n        </div>\n        <div style="height: 18px; margin-top: 10px">\n          <s-others-icon name="hint" class="warningIcon"></s-others-icon>\n          <span>输入_，可进行词根匹配</span>\n        </div>\n      </div>\n    </el-popover>\n    \x3c!-- 添加至备选数据库字段库弹窗 --\x3e\n    <el-dialog v-model="reflowDialogVisible" title="一键添加到备选字段库" width="50%">\n      <el-table\n        ref="reflowTableRef"\n        :data="reflowFieldList"\n        @select="handleSelectReflowField"\n        @select-all="handleSelectReflowField"\n      >\n        <el-table-column type="selection" width="40" />\n        <el-table-column label="字段注释" prop="label" />\n        <el-table-column label="字段名" prop="name" />\n        <el-table-column label="数据类型" prop="type" />\n        <el-table-column label="是否必填" prop="required">\n          <template #default="scope">\n            <span>{{ scope.row.required ? \'是\' : \'否\' }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label="字段长度" prop="length">\n          <template #default="scope">\n            <span>{{ getReflowFieldLength(scope.row) }}</span>\n          </template>\n        </el-table-column>\n      </el-table>\n      <template #footer>\n        <div class="reflowDialogFooter">\n          <el-button\n            type="primary"\n            :disabled="reflowConfirmBtnDisabled"\n            :loading="confirmLoading"\n            @click="handleUploadReflowField"\n          >\n            确 定\n          </el-button>\n          <el-button @click="reflowDialogVisible = false">取 消</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\n  import { inject, onMounted, ref, nextTick } from \'vue\';\n  import { ElMessage, ClickOutside as vClickOutside } from \'element-plus\';\n  import { requestApi, getIsReflowField, getFieldList, getReflowFieldList, uploadReflowField } from \'../apis\';\n  import { debounce } from \'../utils\';\n\n  const props = defineProps({\n    entity: Object,\n  });\n\n  const handleAddItem = () => {\n    addItem();\n    nextTick(() => {\n      onSetItemEdit(selectedItem.value, \'label\', true);\n    });\n  };\n\n  const showReflowBtn = ref(false);\n\n  const reflowPopoverVisible = ref(false);\n  const fieldList = ref([]);\n  const reflowQuery = ref(\'\');\n  const abortController = ref(null);\n  const requestId = ref(0); // 用于标识当前请求\n\n  const debounceQueryFieldList = debounce(() => {\n    // 设置loading状态\n    reflowPopoverLoading.value = true;\n\n    // 取消之前的请求\n    if (abortController.value) {\n      abortController.value.abort();\n    }\n\n    // 创建新的 AbortController 和请求ID\n    abortController.value = new AbortController();\n    const currentRequestId = ++requestId.value;\n\n    getFieldList({ query: reflowQuery.value }, abortController.value.signal)\n      .then(res => {\n        // 只有当前请求是最新的才更新数据\n        if (currentRequestId === requestId.value) {\n          fieldList.value = res.result || [];\n        }\n      })\n      .catch(err => {\n        if (err.name !== \'AbortError\') {\n          console.error(err);\n        }\n      })\n      .finally(() => {\n        // 只有当前请求是最新的才更新加载状态\n        if (currentRequestId === requestId.value) {\n          abortController.value = null;\n          reflowPopoverLoading.value = false;\n        }\n      });\n  }, 400);\n\n  const reflowPopoverLoading = ref(false);\n  const activeItem = ref(null);\n\n  const getFieldName = (name, matchedNames) => {\n    if (!name || typeof name !== \'string\') return \'\';\n    if (!Array.isArray(matchedNames)) return `<span style="color: red; font-weight: bold;">${name}</span>`;\n\n    const matchedSet = new Set(matchedNames.filter(item => item && typeof item === \'string\'));\n    const parts = name.split(/(_+)/);\n\n    return parts\n      .map(part => {\n        if (part.startsWith(\'_\')) return part;\n        return matchedSet.has(part) ? part : `<span style="color: red; font-weight: bold;">${part}</span>`;\n      })\n      .join(\'\');\n  };\n\n  const getFieldTypeTitle = item => {\n    if (item.type === \'String\') {\n      const stringLabel = getStringLabel(item.length);\n      return item.type + (stringLabel ? `  (${stringLabel})` : \'\');\n    }\n    return item.type;\n  };\n\n  const columnNameValidatorRef = ref(null);\n\n  const handleUseField = item => {\n    const target = selectedItem.value?.naslNode;\n    if (target?.concept === \'EntityProperty\') {\n      target.app.emit(\'collect:start\', { actionMsg: \'数据建模插件更新字段名\' });\n      const newName = target.parentNode?.getPropertyUniqueName?.(item.name) || item.name; // 保证字段名唯一\n      const typeName = item.type === \'Integer\' ? \'Long\' : item.type;\n      const updateData = {\n        name: newName,\n        columnName: newName,\n        required: item.required,\n        typeAnnotation: {\n          concept: \'TypeAnnotation\',\n          typeKind: \'primitive\',\n          typeNamespace: \'nasl.core\',\n          typeName,\n        },\n      };\n      if (item.type === \'String\' && item.length) {\n        const minRule = target.toJSON().rules.find(rule => rule.startsWith(\'minLength\'));\n        Object.assign(updateData, {\n          databaseTypeAnnotation: {\n            concept: \'DatabaseTypeAnnotation\',\n            typeName: \'varchar\',\n            arguments: {\n              length: item.length,\n            },\n          },\n          rules: [minRule, `maxLength(${item.length})`].filter(Boolean),\n        });\n      }\n      target.update(updateData);\n      setTimeout(() => {\n        // 延迟收集，把外层onBlurLabel的change也收集到这次的batchInstruct中\n        target.app.emit(\'collect:end\');\n      });\n\n      nextTick(async () => {\n        try {\n          const res = await columnNameValidatorRef.value?.validate();\n        } catch (error) {\n          // console.error(error);\n          // 新设置的字段名不符合规则，主动聚焦到输入框\n          onSetItemEdit(selectedItem.value, \'name\', true);\n        }\n      });\n    }\n  };\n\n  const handleLabelFocus = label => {\n    reflowQuery.value = label;\n  };\n\n  const handleLabelBlur = async (event, slotProps, item) => {\n    reflowPopoverVisible.value = false;\n    reflowQuery.value = \'\';\n    fieldList.value = [];\n\n    event = event.replace(/_/g, \'\'); // event 去除掉_\n\n    slotProps.blurFn(event); // 触发模版中原来的失焦逻辑\n    if (activeItem.value) {\n      handleUseField(activeItem.value);\n      activeItem.value = null;\n    }\n  };\n\n  const handleLabelInput = (event, slotProps) => {\n    reflowPopoverVisible.value = true;\n    reflowQuery.value = event;\n    slotProps.inputChange(event); // 触发模版中原有的修改逻辑\n    // 外置设置防抖查询loading状态\n    reflowPopoverLoading.value = true;\n    debounceQueryFieldList();\n  };\n\n  onMounted(() => {\n    getIsReflowField({}).then(res => {\n      showReflowBtn.value = res.result;\n    });\n  });\n\n  // 一键添加到备选字段库\n  const reflowLoading = ref(false);\n  const reflowFieldList = ref([]);\n\n  const addReflowField = () => {\n    reflowLoading.value = true;\n\n    const filterList = [\'id\', \'createdTime\', \'updatedTime\', \'createdBy\', \'updatedBy\'];\n    const filterRegex = /^property\\d+$|^.*[\\u4e00-\\u9fa5].*$/;\n\n    const properties = props.entity?.toJSON()?.properties || [];\n    const tempReflowFieldList = [];\n    const nameSet = new Set();\n    properties.forEach(property => {\n      if (\n        !property.label ||\n        filterList.includes(property.name) ||\n        filterRegex.test(property.name) ||\n        property.typeAnnotation?.typeKind !== \'primitive\'\n      ) {\n        return;\n      }\n      let type = property.typeAnnotation?.typeName || \'String\';\n      if (type === \'Long\') type = \'Integer\'; // 整数类型需要重命名为Integer\n      const propertyName = property.name.replace(/\\d+$/, \'\') || \'\';\n      if (nameSet.has(propertyName)) {\n        return;\n      }\n      nameSet.add(propertyName);\n      tempReflowFieldList.push({\n        name: propertyName,\n        label: property.label || \'\',\n        required: property.required || false,\n        type,\n        length: type === \'String\' ? property.databaseTypeAnnotation?.arguments?.length || 255 : void 0,\n      });\n    });\n    reflowFieldList.value = tempReflowFieldList;\n    if (reflowFieldList.length === 0) {\n      reflowLoading.value = false;\n      showMessage();\n      return;\n    }\n\n    // 备选库不需要校验字段唯一性，直接打开弹窗\n    requestApi(\n      getReflowFieldList,\n      {\n        list: tempReflowFieldList.map(item => ({\n          name: item.name,\n          label: item.label,\n        })),\n      },\n      res => {\n        if (res.result?.length === 0) {\n          showMessage();\n          return;\n        } else {\n          // 只有在res.result中的name，在tempReflowFieldList中存在，才显示\n          const set = new Set(res.result);\n          reflowFieldList.value = tempReflowFieldList.filter(item => set.has(item.name));\n          reflowDialogVisible.value = true;\n          nextTick(() => {\n            reflowConfirmBtnDisabled.value = false;\n            reflowTableRef.value.toggleAllSelection();\n          });\n        }\n      },\n      err => {\n        console.error(err);\n      },\n      () => {\n        reflowLoading.value = false;\n      }\n    );\n    // reflowDialogVisible.value = true;\n    // reflowLoading.value = false;\n    // nextTick(() => {\n    //   reflowConfirmBtnDisabled.value = false;\n    //   reflowTableRef.value.toggleAllSelection();\n    // });\n  };\n\n  // 显示[暂无可回流到备选数据库的字段]消息\n  const showMessage = (type = \'warning\', msg = \'暂无可回流到备选数据库的字段\') => {\n    ElMessage.closeAll();\n    ElMessage[type](msg);\n  };\n\n  const reflowDialogVisible = ref(false);\n  const reflowTableRef = ref(null);\n\n  const getStringLabel = length => {\n    const map = {\n      255: \'短 255\',\n      4000: \'中 4000\',\n      16777215: \'长 16777215\',\n    };\n    return map[length] || length;\n  };\n  const getReflowFieldLength = row => {\n    return row.type === \'String\' ? getStringLabel(row.length) : \'-\';\n  };\n\n  const reflowConfirmBtnDisabled = ref(false);\n  const isTextOverflow = ref(false);\n\n  // 检测文本是否溢出\n  const checkOverflow = event => {\n    const element = event.target;\n    isTextOverflow.value = element.scrollWidth > element.clientWidth;\n  };\n  const handleSelectReflowField = (selection, row) => {\n    reflowConfirmBtnDisabled.value = selection.length === 0;\n  };\n\n  const confirmLoading = ref(false);\n  const handleUploadReflowField = () => {\n    confirmLoading.value = true;\n    const selectedList = reflowTableRef.value.getSelectionRows();\n    requestApi(\n      uploadReflowField,\n      {\n        list: selectedList,\n      },\n      res => {\n        if (res.result) {\n          showMessage(\'success\', \'添加成功\');\n          reflowDialogVisible.value = false;\n        } else {\n          showMessage(\'error\', res.msg || \'添加失败\');\n        }\n      },\n      err => {\n        // console.error(err);\n        showMessage(\'error\', err);\n      },\n      () => {\n        confirmLoading.value = false;\n      }\n    );\n  };\n\n  const {\n    /**\n     * 名称输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    nameEditor,\n    /**\n     * 标题输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    labelEditor,\n    /**\n     * 描述输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    descriptionEditor,\n    /**\n     * 表格节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    tableviewRef,\n    /**\n     * 数据库视图导入生成的实体\n     * entity 的 origin 属性是否是 view\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isViewEntity,\n    /**\n     * 添加实体属性\n     *\n     * @function\n     */\n    addItem,\n    /**\n     * 生成移除按钮的提示\n     *\n     * @function\n     * @return string\n     */\n    getRemoveTooltip,\n    /**\n     * 表格选中的行元素\n     *\n     * @type {Vue.computed<object>}\n     */\n    selectedItem,\n    /**\n     * 是否是官方实体属性\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntityProperty,\n    /**\n     * 移除实体索引\n     *\n     * @function\n     * @param item - 需要删除的行元素\n     */\n    removeItem,\n    /**\n     * 表格的渲染数据\n     *\n     * @type {Vue.computed<array>}\n     */\n    renderList,\n    /**\n     * 上移当前选中的实体索引\n     *\n     * @function\n     */\n    moveUpItem,\n    /**\n     * 下移当前选中的实体索引\n     *\n     * @function\n     */\n    moveDownItem,\n    /**\n     * 表格高度\n     *\n     * @type {Vue.computed<number>}\n     */\n    tableHeight,\n    /**\n     * 设置表单列的样式\n     *\n     * @function\n     */\n    setRowClassName,\n    /**\n     * 右键选中表格行元素\n     *\n     * @function\n     */\n    onContextMenuRow,\n    /**\n     * 选中行元素时触发\n     *\n     * @function\n     * @param item - 行元素\n     */\n    onSelectRowWithDataType,\n    /**\n     * 拖拽调整表格列宽度\n     *\n     * @function\n     * @param newWidth - 新宽度\n     * @param oldWidth - 旧宽度\n     * @param column - 列元素\n     */\n    handleDragend,\n    /**\n     * 是否禁止编辑行元素\n     *\n     * @function\n     * @param item - 行元素\n     */\n    getDisable,\n    /**\n     * 设置表格列元素编辑状态\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 属性名称\n     * @param focus - 是否选中输入框\n     */\n    onSetItemEdit,\n    /**\n     * Tab 键跳转切换下一个属性\n     *\n     * @function\n     * @param event - 原生键盘事件\n     * @param item - 行元素\n     * @param name - 属性名称\n     */\n    onKeyUp,\n    /**\n     * 名称输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的名称\n     */\n    onBlurName,\n    /**\n     * 验证不通过时滚动到错误元素\n     */\n    errorScrollIntoView,\n    /**\n     * 存在错误\n     *\n     * @type {Vue.ref<boolean>}\n     */\n    hasInvalid,\n    /**\n     * 显示输入框的提示\n     *\n     * @type {Vue.ref<string>}\n     */\n    tooltipOpened,\n    /**\n     * 属性名，暂时存储属性名，用于输入框输入等操作\n     *\n     * @type {Vue.ref<string>}\n     */\n    itemNameValue,\n    /**\n     * 输入框获取焦点时触发\n     *\n     * 1. 设置tooltipOpened的值\n     * 2. 设置itemNameValue\n     *\n     * @function\n     * @param item - 当前行元素\n     */\n    onFocusName,\n    /**\n     * 标题输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的标题\n     */\n    onBlurLabel,\n    /**\n     * 是否应用正在发布\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isAppDeploying,\n    /**\n     * 是否实体已经发布过并且是复合类型\n     *\n     * 1. 实体已经发布过，在app下的depEntities可以找到该实体\n     * 2. 实体是复合类型：\'Map\', \'List\'，或者typeKind是reference并且namespace是\'entities\', \'structures\'\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isPublishedComplexType,\n    /**\n     * 数据类型的标题\n     *\n     * @function\n     * @param item - 行元素\n     * @return string\n     */\n    showDatatype,\n    /**\n     * 双击编辑数据类型输入框\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - 原生事件\n     */\n    onDblClickDatatype,\n    /**\n     * 获取可选类型\n     *\n     * @function\n     * @return 可选类型\n     */\n    getDataTypeList,\n    /**\n     * 失焦时取消当前行元素编辑状态\n     *\n     * @function\n     * @param item - 行元素\n     */\n    handleBlur,\n    /**\n     * 修改实体属性类型\n     *\n     * @function\n     * @param event - event.value 实际使用数据\n     */\n    onChangeDatatype,\n    /**\n     * 是否属于官方实体\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntity,\n    /**\n     * 复合类型\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isComplexType,\n    /**\n     * 修改是否必填\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkbox 原生事件\n     */\n    requireInput,\n    /**\n     * 能否设置默认值\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    canSetDefaultValue,\n    /**\n     * 对应节点是否有错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    IsError,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inTable,\n    /**\n     * 全部勾选或者取消全部勾选\n     *\n     * @function\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    toggleSelectAll,\n    /**\n     * 设置显示属性\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    setDisplay,\n    /**\n     * 显示在筛选\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inFilter,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inForm,\n    /**\n     * 显示在详情\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inDetail,\n    /**\n     * ElementPlus 的 popper 配置\n     */\n    popperOptions,\n    /**\n     * 右键菜单选中项\n     *\n     * @type {Vue.ref<object>}\n     */\n    menuSelectedItem,\n    /**\n     * 项对应的右键菜单是否存在\n     */\n    popperExistMap,\n    /**\n     * 项对应的右键菜单是否显示\n     */\n    popperVisibleMap,\n    /**\n     * 右键菜单的触发节点\n     */\n    triggerRef,\n    /**\n     * 右键菜单的出现位置\n     */\n    placement,\n    /**\n     * 右键菜单隐藏时的处理函数\n     */\n    onMenuPopperHide,\n    /**\n     * 菜单点击时\n     */\n    onMenuClick,\n    /**\n     * 菜单-查找引用\n     *\n     * @function\n     */\n    onMenuFindUsage,\n    /**\n     * 菜单-删除\n     *\n     * @function\n     */\n    onMenuDelete,\n    /**\n     * 实体属性数据类型\n     *\n     * @type {Vue.computed<string>}\n     */\n    typeName,\n    /**\n     * 小数位数的校验错误信息\n     *\n     * @type {Vue.computed<string>}\n     */\n    scaleErrorMsg,\n    /**\n     * 属性的响应式数据\n     *\n     * @type {Vue.reactive<object>}\n     * @property scale - 小数位数\n     */\n    model,\n    /**\n     * 小数位数的范围\n     *\n     * @type {Vue.computed<object>}\n     * @property min - 最小值\n     * @property max - 最大值\n     */\n    scaleOption,\n    /**\n     * 是否禁用小数位数\n     *\n     * @function\n     * @param item - 行元素\n     * @return boolean\n     */\n    decimalDisabled,\n    /**\n     * 修改小数位数\n     *\n     * @function\n     */\n    setScale,\n    /**\n     * 关联属性\n     *\n     * @type {Vue.ref<string>}\n     */\n    entityReference,\n    /**\n     * 类型列表\n     *\n     * @type {Vue.ref<array>}\n     */\n    dataTypeList,\n    /**\n     * 关联实体存在错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    isReleationEntityError,\n    /**\n     * 设置关联属性\n     *\n     * @function\n     * @param event - event.value 表示实际数据\n     */\n    onSaveReference,\n    /**\n     * 清除关联属性\n     *\n     * @function\n     */\n    onClearReference,\n    /**\n     * 设置关联属性实体记录删除规则\n     *\n     * @function\n     * @param event - 选中事件对象\n     */\n    setDeleteRule,\n    /**\n     * 设置错误信息\n     *\n     * @function\n     * @param errorMsgs - 错误信息\n     */\n    changeErrorMsgs,\n    /**\n     * 是否来源于数据库表/excel\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isTableOrExcelOrigin,\n    /**\n     * 描述输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的描述\n     */\n    onBlurDescription,\n    /**\n     * 是否显示数据库高级设置\n     *\n     * 1.没有设置数据源\n     * 2.实体是excel导入或者数据源反向导入\n     * 3.权限实体（贤宇说一直是以LCAP开头来判断的）\n     * 这3种情况不显示数据库设置\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    showDatabasetype,\n    /**\n     * 实体在同步数据源时产生的错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    sourceSyncErrMsgs,\n    /**\n     * 错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    errorMsgs,\n    /**\n     * 数据库列名校验规则\n     *\n     * @type {Vue.computed<object>}\n     */\n    entityPropertyColumnNameRules,\n    /**\n     * 数据库列名输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyColumnNamePlaceholder,\n    /**\n     * 生成名称校验规则\n     *\n     * @function\n     * @param node - 节点\n     * @return 名称校验规则\n     */\n    getEntityPropertyRules,\n    /**\n     * 名称输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyPlaceholder,\n    /**\n     * 设置选中行的数据类型\n     *\n     * @function\n     * @param value - 数据类型\n     */\n    setDataType,\n  } = inject(\'$context\');\n<\/script>\n\n<style module="$propertyDesigner">\n  .errorMsg {\n    color: var(--designer-font-second-color);\n    margin: 0 46px;\n  }\n\n  .errorMsg + .errorMsg {\n    margin-top: 10px;\n  }\n\n  .infoicon {\n    display: inline-block;\n    height: 12px;\n    width: 12px;\n    background: var(--assets-warning-info-svg) no-repeat;\n    background-size: 100% 100%;\n    vertical-align: -1px;\n    margin-right: 5px;\n  }\n</style>\n\n<style module>\n  div.table [class^=\'u-input__\']:focus,\n  div.table [class^=\'u-input__\'][focus],\n  div.table [class^=\'u-input__\']:hover,\n  div.table [class^=\'u-select__\']:focus,\n  div.table [class^=\'u-select__\'][focus],\n  div.table [class^=\'u-select__\'][opened],\n  div.table [class^=\'u-select__\']:hover {\n    border-color: var(--entity-designer-table-input-focus-border-color);\n    box-shadow: var(--entity-designer-table-input-focus-box-shadow);\n  }\n\n  .head {\n    margin: 16px;\n    padding: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n  }\n\n  div.head [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  .body {\n    margin: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n    overflow: hidden;\n  }\n\n  .entityListIcon {\n    width: 16px;\n    height: 16px;\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .edit {\n    display: inline-block;\n    width: 100%;\n    line-height: 38px;\n  }\n\n  .edit:hover {\n    cursor: pointer;\n  }\n\n  .edit:focus {\n    outline: none;\n  }\n\n  .edit .text > span {\n    color: var(--entity-designer-table-color);\n  }\n\n  .edit .text {\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .editwrap {\n    margin-left: -9px;\n  }\n\n  .editwrap [class^=\'s-datatype-select__\'] {\n    vertical-align: middle;\n  }\n\n  .text {\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n  }\n\n  .textContent {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n    max-width: calc(100% - 28px);\n    margin-right: 8px;\n  }\n  .textContent:empty {\n    display: none;\n  }\n\n  .text > span {\n    display: inline-block;\n    color: var(--entity-designer-table-disabled-color);\n    vertical-align: middle;\n  }\n\n  .validator {\n    width: 100%;\n  }\n\n  .btnnav {\n    border-bottom: 1px solid var(--entity-designer-border-color);\n    border-top: 1px solid var(--entity-designer-border-color);\n    padding: 5px 24px;\n  }\n\n  div.btnnav[direction=\'horizontal\'][gap=\'small\'] > :not(:last-child) {\n    margin-right: 8px;\n  }\n\n  .btnnav1 {\n    border-top: none;\n    background-color: var(--entity-designer-btnnav-background);\n  }\n\n  .bodywrap {\n    padding: 16px 24px 0;\n    overflow-x: auto;\n    overflow-y: hidden;\n    margin-bottom: 24px;\n  }\n\n  div.bodywrap [class^=\'u-grid-layout_column__\'] {\n    padding-bottom: 0;\n  }\n\n  .bodywrap1 {\n    padding: 16px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .advancedWrap {\n    padding: 10px 24px 25px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .entityfrom [class^=\'u-form_item_label__\'] {\n    width: 36px !important;\n  }\n\n  div.input {\n    width: 100%;\n    margin-right: 12px;\n  }\n\n  .iconBase {\n    display: inline-block;\n    width: 20px;\n    height: 38px;\n    line-height: 38px;\n    text-align: center;\n    font-size: var(--font-size-large);\n    font-size: 14px;\n  }\n\n  .iconKey {\n    color: var(--designer-table-edit-icon-key-color);\n  }\n\n  .iconLink {\n    color: var(--designer-table-edit-icon-link-color);\n  }\n\n  .iconEdit {\n    color: var(--color-base);\n    opacity: 0;\n  }\n\n  .iconLink2 {\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    line-height: 16px;\n    font-size: var(--font-size-huge);\n    color: var(--brand-primary);\n    cursor: pointer;\n    position: relative;\n    top: 2px;\n    left: 4px;\n  }\n\n  .edit:hover .iconEdit {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n\n  .edit:hover .iconEdit:hover {\n    opacity: 1;\n  }\n\n  .icon {\n    width: 14px;\n    height: 14px;\n    display: inline-block;\n    vertical-align: middle;\n    background-repeat: no-repeat;\n  }\n\n  div.normalfrom [class^=\'u-form_item_label__\'] {\n    width: 60px !important;\n  }\n\n  div.normalfrom > div {\n    margin-bottom: 16px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'],\n  div.normalfrom [class^=\'u-select__\'],\n  div.normalfrom [class^=\'u-form_item_field__\'],\n  div.normalfrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom [class^=\'u-form_item_label__\'] {\n    width: 94px !important;\n  }\n\n  div.reffrom [class^=\'u-input__\'],\n  div.reffrom [class^=\'u-tree-select__\'],\n  div.reffrom [class^=\'u-select__\'],\n  div.reffrom [class^=\'u-form_item_field__\'],\n  div.reffrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.reffrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom .text {\n    opacity: 0.3;\n  }\n\n  div.reffrom [class^=\'u-form_item_extra__\'] {\n    width: 12px;\n  }\n\n  .flexgrid {\n    display: flex;\n  }\n\n  .gridcolumn {\n    width: auto;\n  }\n\n  .gridcolumn:not(:last-child) {\n    margin-right: 24px;\n  }\n\n  div.fixedwidthinput,\n  div.textarea {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  .icondivider {\n    color: var(--entity-designer-border-color);\n  }\n\n  .advanced {\n    padding-top: 10px;\n  }\n\n  .scaleErrorMsg {\n    position: absolute;\n    color: rgb(242, 73, 87);\n  }\n  .typeError {\n    border-radius: 4px;\n    border: 1px solid var(--input-border-color-error);\n  }\n  .checkbox [class=\'el-checkbox__label\'] {\n    line-height: 23px;\n    font-size: 12px;\n    text-overflow: ellipsis;\n    text-align: left;\n    font-weight: 600;\n    color: var(--el-table-header-text-color);\n  }\n  .checkbolabel [class=\'el-checkbox__label\'] {\n    line-height: 23px !important;\n    font-size: 12px !important;\n    text-overflow: ellipsis !important;\n    text-align: left !important;\n    font-weight: 600 !important;\n    color: var(--el-table-header-text-color) !important;\n  }\n  .checkbox {\n    height: 23px;\n    line-height: 23px;\n  }\n</style>\n<style module="$contextmenu">\n  .menu {\n    margin-top: 0 !important;\n  }\n\n  .menu .group [class^=\'el-menu-item-group__title\'] {\n    --el-menu-text-color: var(--el-menu-top-title-text-color);\n    height: 32px;\n    font-weight: bold;\n    border-bottom: 1px solid var(--line-color-regular);\n    background: var(--fill-color-thead);\n    color: var(--el-menu-text-color);\n    cursor: auto;\n  }\n</style>\n\n<style scoped>\n  .tableCell :deep(.cell) {\n    padding: 0;\n    line-height: 20px;\n    padding-left: 6px;\n  }\n  .theadLable {\n    overflow: visible;\n    width: 100%;\n    padding-left: 6px;\n    border-right: 1px solid var(--entity-designer-property-dragger-border-color);\n  }\n  .topIconGroup {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 8px;\n    background-color: var(--entity-designer-icon-group-background-color);\n    padding: 5px 24px;\n    border-bottom: 1px solid var(--entity-designer-icon-group-border-color);\n    position: sticky;\n    z-index: 9;\n    top: 64px;\n  }\n\n  .icon {\n    margin-right: 8px;\n  }\n\n  .extraForm :deep(.el-form-item__label) {\n    font-size: 12px;\n  }\n\n  :deep(.row-style) {\n    border: 1px solid #4d87fe;\n  }\n\n  :deep(.cell-style) {\n    border-bottom: 1px solid #409eff;\n  }\n\n  .elFormFlex {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n</style>\n\n<style scoped>\n  .reflowPopover {\n    width: 340px;\n    padding: 8px;\n  }\n\n  .reflowPopoverEmpty {\n    padding: 20px 0 30px;\n  }\n\n  .reflowPopoverItem {\n    height: 48px;\n    line-height: 48px;\n    padding: 0 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    &:hover {\n      background-color: #edf2f9;\n    }\n  }\n\n  .warningIcon {\n    margin-right: 4px;\n  }\n\n  .reflowDialogFooter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 居中对齐flex布局 */\n  .centerFlex {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 单行文本溢出省略号 */\n  .sle,\n  [sle] {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  /* tooltip触发器样式 */\n  .tooltip-trigger {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n</style>\n'],sourceRoot:""}]),i.locals={errorMsg:"EntityPropertyDesigner__errorMsg--U135D",infoicon:"EntityPropertyDesigner__infoicon--uVHId"};const r=i},151:(e,n,t)=>{t.d(n,{Z:()=>r});var l=t(481),o=t.n(l),a=t(966),i=t.n(a)()(o());i.push([e.id,"\ndiv.EntityPropertyDesigner__table--DAcgg [class^='u-input__']:focus,\n  div.EntityPropertyDesigner__table--DAcgg [class^='u-input__'][focus],\n  div.EntityPropertyDesigner__table--DAcgg [class^='u-input__']:hover,\n  div.EntityPropertyDesigner__table--DAcgg [class^='u-select__']:focus,\n  div.EntityPropertyDesigner__table--DAcgg [class^='u-select__'][focus],\n  div.EntityPropertyDesigner__table--DAcgg [class^='u-select__'][opened],\n  div.EntityPropertyDesigner__table--DAcgg [class^='u-select__']:hover {\n    border-color: var(--entity-designer-table-input-focus-border-color);\n    box-shadow: var(--entity-designer-table-input-focus-box-shadow);\n}\n.EntityPropertyDesigner__head--gPuC3 {\n    margin: 16px;\n    padding: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n}\ndiv.EntityPropertyDesigner__head--gPuC3 [class^='u-input__'] {\n    height: 32px;\n    line-height: 30px;\n}\n.EntityPropertyDesigner__body--EvBMI {\n    margin: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n    overflow: hidden;\n}\n.EntityPropertyDesigner__entityListIcon--kBERs {\n    width: 16px;\n    height: 16px;\n    display: inline-block;\n    vertical-align: middle;\n}\n.EntityPropertyDesigner__edit--ClOqV {\n    display: inline-block;\n    width: 100%;\n    line-height: 38px;\n}\n.EntityPropertyDesigner__edit--ClOqV:hover {\n    cursor: pointer;\n}\n.EntityPropertyDesigner__edit--ClOqV:focus {\n    outline: none;\n}\n.EntityPropertyDesigner__edit--ClOqV .EntityPropertyDesigner__text--qpPcJ > span {\n    color: var(--entity-designer-table-color);\n}\n.EntityPropertyDesigner__edit--ClOqV .EntityPropertyDesigner__text--qpPcJ {\n    display: inline-block;\n    vertical-align: middle;\n}\n.EntityPropertyDesigner__editwrap--ZGrYT {\n    margin-left: -9px;\n}\n.EntityPropertyDesigner__editwrap--ZGrYT [class^='s-datatype-select__'] {\n    vertical-align: middle;\n}\n.EntityPropertyDesigner__text--qpPcJ {\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n}\n.EntityPropertyDesigner__textContent--ixaXm {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n    max-width: calc(100% - 28px);\n    margin-right: 8px;\n}\n.EntityPropertyDesigner__textContent--ixaXm:empty {\n    display: none;\n}\n.EntityPropertyDesigner__text--qpPcJ > span {\n    display: inline-block;\n    color: var(--entity-designer-table-disabled-color);\n    vertical-align: middle;\n}\n.EntityPropertyDesigner__validator--PFrhM {\n    width: 100%;\n}\n.EntityPropertyDesigner__btnnav--iOokw {\n    border-bottom: 1px solid var(--entity-designer-border-color);\n    border-top: 1px solid var(--entity-designer-border-color);\n    padding: 5px 24px;\n}\ndiv.EntityPropertyDesigner__btnnav--iOokw[direction='horizontal'][gap='small'] > :not(:last-child) {\n    margin-right: 8px;\n}\n.EntityPropertyDesigner__btnnav1--E5h5W {\n    border-top: none;\n    background-color: var(--entity-designer-btnnav-background);\n}\n.EntityPropertyDesigner__bodywrap--VKO0H {\n    padding: 16px 24px 0;\n    overflow-x: auto;\n    overflow-y: hidden;\n    margin-bottom: 24px;\n}\ndiv.EntityPropertyDesigner__bodywrap--VKO0H [class^='u-grid-layout_column__'] {\n    padding-bottom: 0;\n}\n.EntityPropertyDesigner__bodywrap1--zpK7G {\n    padding: 16px 24px;\n    background-color: var(--entity-designer-body-background);\n}\n.EntityPropertyDesigner__advancedWrap--ffldQ {\n    padding: 10px 24px 25px 24px;\n    background-color: var(--entity-designer-body-background);\n}\n.EntityPropertyDesigner__entityfrom--fqGAy [class^='u-form_item_label__'] {\n    width: 36px !important;\n}\ndiv.EntityPropertyDesigner__input--bg7Vc {\n    width: 100%;\n    margin-right: 12px;\n}\n.EntityPropertyDesigner__iconBase--F4Nxz {\n    display: inline-block;\n    width: 20px;\n    height: 38px;\n    line-height: 38px;\n    text-align: center;\n    font-size: var(--font-size-large);\n    font-size: 14px;\n}\n.EntityPropertyDesigner__iconKey--lPb7Y {\n    color: var(--designer-table-edit-icon-key-color);\n}\n.EntityPropertyDesigner__iconLink--lAthw {\n    color: var(--designer-table-edit-icon-link-color);\n}\n.EntityPropertyDesigner__iconEdit--jRzSd {\n    color: var(--color-base);\n    opacity: 0;\n}\n.EntityPropertyDesigner__iconLink2--EYHwI {\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    line-height: 16px;\n    font-size: var(--font-size-huge);\n    color: var(--brand-primary);\n    cursor: pointer;\n    position: relative;\n    top: 2px;\n    left: 4px;\n}\n.EntityPropertyDesigner__edit--ClOqV:hover .EntityPropertyDesigner__iconEdit--jRzSd {\n    opacity: 0.6;\n    cursor: pointer;\n}\n.EntityPropertyDesigner__edit--ClOqV:hover .EntityPropertyDesigner__iconEdit--jRzSd:hover {\n    opacity: 1;\n}\n.EntityPropertyDesigner__icon--cAvU8 {\n    width: 14px;\n    height: 14px;\n    display: inline-block;\n    vertical-align: middle;\n    background-repeat: no-repeat;\n}\ndiv.EntityPropertyDesigner__normalfrom--XxBVw [class^='u-form_item_label__'] {\n    width: 60px !important;\n}\ndiv.EntityPropertyDesigner__normalfrom--XxBVw > div {\n    margin-bottom: 16px;\n}\ndiv.EntityPropertyDesigner__normalfrom--XxBVw [class^='u-input__'],\n  div.EntityPropertyDesigner__normalfrom--XxBVw [class^='u-select__'],\n  div.EntityPropertyDesigner__normalfrom--XxBVw [class^='u-form_item_field__'],\n  div.EntityPropertyDesigner__normalfrom--XxBVw [class^='u-form_item_wrap__'] {\n    width: 240px;\n    max-width: 240px;\n}\ndiv.EntityPropertyDesigner__normalfrom--XxBVw [class^='u-input__'] {\n    height: 32px;\n    line-height: 30px;\n}\ndiv.EntityPropertyDesigner__reffrom--qgC1O [class^='u-form_item_label__'] {\n    width: 94px !important;\n}\ndiv.EntityPropertyDesigner__reffrom--qgC1O [class^='u-input__'],\n  div.EntityPropertyDesigner__reffrom--qgC1O [class^='u-tree-select__'],\n  div.EntityPropertyDesigner__reffrom--qgC1O [class^='u-select__'],\n  div.EntityPropertyDesigner__reffrom--qgC1O [class^='u-form_item_field__'],\n  div.EntityPropertyDesigner__reffrom--qgC1O [class^='u-form_item_wrap__'] {\n    width: 240px;\n    max-width: 240px;\n}\ndiv.EntityPropertyDesigner__reffrom--qgC1O [class^='u-input__'] {\n    height: 32px;\n    line-height: 30px;\n}\ndiv.EntityPropertyDesigner__reffrom--qgC1O .EntityPropertyDesigner__text--qpPcJ {\n    opacity: 0.3;\n}\ndiv.EntityPropertyDesigner__reffrom--qgC1O [class^='u-form_item_extra__'] {\n    width: 12px;\n}\n.EntityPropertyDesigner__flexgrid--vqhTk {\n    display: flex;\n}\n.EntityPropertyDesigner__gridcolumn--QtlHd {\n    width: auto;\n}\n.EntityPropertyDesigner__gridcolumn--QtlHd:not(:last-child) {\n    margin-right: 24px;\n}\ndiv.EntityPropertyDesigner__fixedwidthinput--NnYfy,\n  div.EntityPropertyDesigner__textarea--QDNlf {\n    width: 240px;\n    max-width: 240px;\n}\n.EntityPropertyDesigner__icondivider--u945n {\n    color: var(--entity-designer-border-color);\n}\n.EntityPropertyDesigner__advanced--izAOk {\n    padding-top: 10px;\n}\n.EntityPropertyDesigner__scaleErrorMsg--Z_N_y {\n    position: absolute;\n    color: rgb(242, 73, 87);\n}\n.EntityPropertyDesigner__typeError--nNcks {\n    border-radius: 4px;\n    border: 1px solid var(--input-border-color-error);\n}\n.EntityPropertyDesigner__checkbox--sXVL8 [class='el-checkbox__label'] {\n    line-height: 23px;\n    font-size: 12px;\n    text-overflow: ellipsis;\n    text-align: left;\n    font-weight: 600;\n    color: var(--el-table-header-text-color);\n}\n.EntityPropertyDesigner__checkbolabel--SDk5N [class='el-checkbox__label'] {\n    line-height: 23px !important;\n    font-size: 12px !important;\n    text-overflow: ellipsis !important;\n    text-align: left !important;\n    font-weight: 600 !important;\n    color: var(--el-table-header-text-color) !important;\n}\n.EntityPropertyDesigner__checkbox--sXVL8 {\n    height: 23px;\n    line-height: 23px;\n}\n","",{version:3,sources:["webpack://./src/components/EntityPropertyDesigner.vue"],names:[],mappings:";AA2kDE;;;;;;;IAOE,mEAAmE;IACnE,+DAA+D;AACjE;AAEA;IACE,YAAY;IACZ,aAAa;IACb,yDAAyD;IACzD,qDAAqD;AACvD;AAEA;IACE,YAAY;IACZ,iBAAiB;AACnB;AAEA;IACE,YAAY;IACZ,yDAAyD;IACzD,qDAAqD;IACrD,gBAAgB;AAClB;AAEA;IACE,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,sBAAsB;AACxB;AAEA;IACE,qBAAqB;IACrB,WAAW;IACX,iBAAiB;AACnB;AAEA;IACE,eAAe;AACjB;AAEA;IACE,aAAa;AACf;AAEA;IACE,yCAAyC;AAC3C;AAEA;IACE,qBAAqB;IACrB,sBAAsB;AACxB;AAEA;IACE,iBAAiB;AACnB;AAEA;IACE,sBAAsB;AACxB;AAEA;IACE,WAAW;IACX,gBAAgB;IAChB,uBAAuB;IACvB,mBAAmB;IACnB,qBAAqB;AACvB;AAEA;IACE,gBAAgB;IAChB,uBAAuB;IACvB,mBAAmB;IACnB,qBAAqB;IACrB,4BAA4B;IAC5B,iBAAiB;AACnB;AACA;IACE,aAAa;AACf;AAEA;IACE,qBAAqB;IACrB,kDAAkD;IAClD,sBAAsB;AACxB;AAEA;IACE,WAAW;AACb;AAEA;IACE,4DAA4D;IAC5D,yDAAyD;IACzD,iBAAiB;AACnB;AAEA;IACE,iBAAiB;AACnB;AAEA;IACE,gBAAgB;IAChB,0DAA0D;AAC5D;AAEA;IACE,oBAAoB;IACpB,gBAAgB;IAChB,kBAAkB;IAClB,mBAAmB;AACrB;AAEA;IACE,iBAAiB;AACnB;AAEA;IACE,kBAAkB;IAClB,wDAAwD;AAC1D;AAEA;IACE,4BAA4B;IAC5B,wDAAwD;AAC1D;AAEA;IACE,sBAAsB;AACxB;AAEA;IACE,WAAW;IACX,kBAAkB;AACpB;AAEA;IACE,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,iCAAiC;IACjC,eAAe;AACjB;AAEA;IACE,gDAAgD;AAClD;AAEA;IACE,iDAAiD;AACnD;AAEA;IACE,wBAAwB;IACxB,UAAU;AACZ;AAEA;IACE,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,gCAAgC;IAChC,2BAA2B;IAC3B,eAAe;IACf,kBAAkB;IAClB,QAAQ;IACR,SAAS;AACX;AAEA;IACE,YAAY;IACZ,eAAe;AACjB;AAEA;IACE,UAAU;AACZ;AAEA;IACE,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,sBAAsB;IACtB,4BAA4B;AAC9B;AAEA;IACE,sBAAsB;AACxB;AAEA;IACE,mBAAmB;AACrB;AAEA;;;;IAIE,YAAY;IACZ,gBAAgB;AAClB;AAEA;IACE,YAAY;IACZ,iBAAiB;AACnB;AAEA;IACE,sBAAsB;AACxB;AAEA;;;;;IAKE,YAAY;IACZ,gBAAgB;AAClB;AAEA;IACE,YAAY;IACZ,iBAAiB;AACnB;AAEA;IACE,YAAY;AACd;AAEA;IACE,WAAW;AACb;AAEA;IACE,aAAa;AACf;AAEA;IACE,WAAW;AACb;AAEA;IACE,kBAAkB;AACpB;AAEA;;IAEE,YAAY;IACZ,gBAAgB;AAClB;AAEA;IACE,0CAA0C;AAC5C;AAEA;IACE,iBAAiB;AACnB;AAEA;IACE,kBAAkB;IAClB,uBAAuB;AACzB;AACA;IACE,kBAAkB;IAClB,iDAAiD;AACnD;AACA;IACE,iBAAiB;IACjB,eAAe;IACf,uBAAuB;IACvB,gBAAgB;IAChB,gBAAgB;IAChB,wCAAwC;AAC1C;AACA;IACE,4BAA4B;IAC5B,0BAA0B;IAC1B,kCAAkC;IAClC,2BAA2B;IAC3B,2BAA2B;IAC3B,mDAAmD;AACrD;AACA;IACE,YAAY;IACZ,iBAAiB;AACnB",sourcesContent:['<template>\n  <div>\n    <div\n      v-if="!isViewEntity"\n      class="topIconGroup"\n      :class="$style.body"\n      style="margin-top: 0px; margin-bottom: 0px; border-bottom: 0px; height: 40px"\n    >\n      \x3c!-- 添加实体属性 --\x3e\n      <s-others-icon name="add" tooltip="添加属性" button @click="handleAddItem"></s-others-icon>\n      \x3c!-- 删除实体属性 --\x3e\n      <s-others-icon\n        name="remove"\n        button\n        :tooltip="getRemoveTooltip()"\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          selectedItem.naslNode.primaryKey ||\n          isOfficalEntityProperty(selectedItem)\n        "\n        @click="removeItem(selectedItem)"\n      ></s-others-icon>\n      <div :class="$style.icondivider">|</div>\n      \x3c!-- 上移实体属性 --\x3e\n      <s-others-icon\n        name="position-up"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置顶\'\n            : \'上移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveUpItem"\n      ></s-others-icon>\n      \x3c!-- 下移实体属性 --\x3e\n      <s-others-icon\n        name="position-down"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置底\'\n            : \'下移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveDownItem"\n      ></s-others-icon>\n      \x3c!-- 一键添加到备选字段库 --\x3e\n      <el-button v-if="showReflowBtn" :loading="reflowLoading" @click="addReflowField">一键添加到备选字段库</el-button>\n    </div>\n    <div :class="$style.body" style="margin-top: 0px">\n      <div :class="$style.bodywrap" class="tableCell">\n        <el-table\n          ref="tableviewRef"\n          :data="renderList"\n          highlight-current-row\n          :style="`min-width:950px;${tableHeight}`"\n          style="width: 100%"\n          :class="\n            renderList.length > 8\n              ? [$style.table, $style.tablescroll, \'s-data-table-edit\']\n              : [$style.table, \'s-data-table-edit\']\n          "\n          :value="selectedItem && selectedItem.naslNode.name"\n          value-field="name"\n          :header-row-style="{ height: \'40px\' }"\n          :cell-style="{ padding: \'0px\' }"\n          :row-style="{ height: \'42px\' }"\n          :row-class-name="setRowClassName"\n          empty-text="暂无数据"\n          @row-contextmenu="onContextMenuRow"\n          @row-click="onSelectRowWithDataType"\n          @header-dragend="handleDragend"\n          @click.right.prevent\n          :border="true"\n        >\n          \x3c!-- 主键/关联属性的icon --\x3e\n          <el-table-column width="38" prop="primaryKey" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <s-others-icon\n                  v-if="item.naslNode.primaryKey"\n                  name="key"\n                  :class="[$style.iconBase, $style.iconKey]"\n                ></s-others-icon>\n                <s-others-icon\n                  v-if="item.naslNode.relationProperty"\n                  name="link"\n                  :class="[$style.iconBase, $style.iconLink]"\n                ></s-others-icon>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 标题 --\x3e\n          <el-table-column prop="label" min-width="107" label="字段注释">\n            <template #header>\n              <div class="theadLable">字段注释</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!item.loading && !item.naslNode.parentNode.loading && !isViewEntity">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'label\'"\n                  :class="$style.edit"\n                  @dblclick="onSetItemEdit(item, \'label\', true)"\n                  tabindex="0"\n                  @keyup="onKeyUp($event, item, \'label\')"\n                  :title="item.naslNode.label"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.label }}</span>\n                    <s-others-icon\n                      v-show="!isOfficalEntityProperty(item)"\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'label\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    ref="labelValidatorRef"\n                    v-slot="slotProps"\n                    :value="item.naslNode.label"\n                    rules="maxLength(63)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurLabel(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    <s-input\n                      placeholder="请输入标题"\n                      :model-value="item.naslNode.label"\n                      ref="labelEditor"\n                      :class="$style.input"\n                      @focus="handleLabelFocus(item.naslNode.label)"\n                      @blur:value="handleLabelBlur($event, slotProps, item)"\n                      @input="handleLabelInput($event, slotProps)"\n                      @keyup.enter="$event.target.blur()"\n                    ></s-input>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                \x3c!-- 之前仅仅为 item.label 但是实际上在item 对象中没有label属性，恐在特殊情况下存在，故范围限制为 区分 viewEntity --\x3e\n                <span>{{ isViewEntity ? item.naslNode.label : item.label }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 名称 --\x3e\n          <el-table-column label="字段名" prop="name" min-width="87">\n            <template #header>\n              <div class="theadLable">字段名</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!getDisable(item)">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'name\'"\n                  tabindex="0"\n                  :class="$style.edit"\n                  :title="item.naslNode.name"\n                  @dblclick="onSetItemEdit(item, \'name\', true)"\n                  @keyup="onKeyUp($event, item, \'name\')"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.name }}</span>\n                    <s-others-icon\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'name\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    v-slot="slotProps"\n                    :value="item.naslNode.name"\n                    :rules="getEntityPropertyRules(item.naslNode)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurName(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    \x3c!-- “属性名”为空是显示提示信息 --\x3e\n                    <el-tooltip\n                      :visible="tooltipOpened === \'entityAttribute\' && !itemNameValue"\n                      placement="top-start"\n                      content="属性为英文字母、数字和下划线，且首字母小写"\n                    >\n                      <s-input\n                        :placeholder="entityPropertyPlaceholder"\n                        :model-value="item.naslNode.name"\n                        ref="nameEditor"\n                        :class="$style.input"\n                        @focus="onFocusName(item)"\n                        @blur:value="slotProps.blurFn($event)"\n                        @input="slotProps.inputChange($event)"\n                        @keyup.enter="$event.target.blur()"\n                        @update:modelValue="itemNameValue = $event"\n                      ></s-input>\n                    </el-tooltip>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                <span>{{ item.naslNode.name }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 数据类型 --\x3e\n          <el-table-column label="数据类型" min-width="247">\n            <template #header>\n              <div class="theadLable">数据类型</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <el-tooltip v-if="isAppDeploying" content="应用发布中，暂不能修改" placement="bottom-start">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </el-tooltip>\n                \x3c!-- 禁用状态 / 已经发布过的复合类型 --\x3e\n                <template v-else-if="getDisable(item) || isPublishedComplexType(item)">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </template>\n                \x3c!-- 非禁用状态 --\x3e\n                <template v-else>\n                  \x3c!-- 展示态 --\x3e\n                  <div\n                    v-if="item.edit !== \'datatype\'"\n                    tabindex="0"\n                    :class="$style.edit"\n                    :ref="`datatype${item.naslNode.id}`"\n                    :title="showDatatype(item)"\n                    @dblclick="onDblClickDatatype(item, $event)"\n                    @keyup="onKeyUp($event, item, \'datatype\')"\n                  >\n                    <div :class="$style.text">\n                      <span :class="$style.textContent">{{ showDatatype(item) }}</span>\n                      <s-others-icon\n                        name="edit"\n                        :class="[$style.iconBase, $style.iconEdit]"\n                        @click="(getDataTypeList(), onSetItemEdit(item, \'datatype\', false))"\n                      ></s-others-icon>\n                    </div>\n                  </div>\n                  \x3c!-- 编辑态 --\x3e\n                  <div v-else :class="$style.editwrap">\n                    <el-tooltip :content="`${isAppDeploying ? \'应用发布中，暂不能修改\' : \'\'}`" placement="bottom-start">\n                      <s-datatype-select\n                        :unionable="false"\n                        :no-union-subtype="true"\n                        :data-type-list="item.naslNode.lastVersion ? dataTypeList : undefined"\n                        :last-version="item.naslNode.lastVersion"\n                        :type-annotation="item.naslNode.typeAnnotation"\n                        :concept="item.naslNode.entity.concept"\n                        :show-system-types="false"\n                        :show-generic-types="true"\n                        :show-entity="true"\n                        :show-structures="true"\n                        :emptyable="false"\n                        :hasAnonymousStructure="true"\n                        :disabled="item.naslNode.readonly || isAppDeploying || isPublishedComplexType(item)"\n                        @blur="handleBlur(item)"\n                        @change="onChangeDatatype"\n                      ></s-datatype-select>\n                    </el-tooltip>\n                  </div>\n                </template>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 是否必填 --\x3e\n          <el-table-column label="是否必填" width="70" prop="required" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else style="margin-left: 16px">\n                <el-checkbox\n                  v-model="item.naslNode.required"\n                  :disabled="getDisable(item) || isComplexType(item) || isOfficalEntity(item)"\n                  :tabindex="item.editable === false || item.loading || item.naslNode.parentNode.loading ? -1 : 0"\n                  :class="$style.checkbox"\n                  @change="requireInput(item, $event)"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 默认值 --\x3e\n          <el-table-column label="默认值" prop="defaultValue" width="120" :resizable="false">\n            <template #default="{ row: item }">\n              <div v-if="[\'createdTime\', \'updatedTime\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>自动生成</span>\n              </div>\n              <div v-else-if="[\'createdBy\', \'updatedBy\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>（无）</span>\n              </div>\n              <template v-else-if="!canSetDefaultValue(item)">\n                <div :class="$style.text">\n                  <span>（无）</span>\n                </div>\n              </template>\n              <template\n                v-else-if="\n                  item.loading || item.naslNode.parentNode.loading || item.naslNode.generationRule !== \'manual\'\n                "\n              >\n                <div :class="$style.text">\n                  <div :class="$style.text" v-if="item.naslNode.generationRule === \'auto\'">\n                    <span>自动生成</span>\n                  </div>\n                  <span v-else>{{ item.naslNode.defaultValue }}</span>\n                </div>\n              </template>\n              <template v-else>\n                <s-attr-input\n                  title="默认值绑定"\n                  node-concept="defaultValue"\n                  :name="item.naslNode.name"\n                  :parent-node="item.naslNode"\n                  :node="item.naslNode.defaultValue"\n                  :class="{\n                    [$style.typeError]: IsError(item.naslNode),\n                  }"\n                ></s-attr-input>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表格 --\x3e\n          <el-table-column width="100" prop="display.inTable" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表格"\n                :class="$style.checkbolabel"\n                :model-value="inTable"\n                @change="toggleSelectAll($event, \'inTable\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inTable"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inTable\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在筛选 --\x3e\n          <el-table-column width="100" prop="display.inFilter" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在筛选"\n                :class="$style.checkbolabel"\n                :model-value="inFilter"\n                @change="toggleSelectAll($event, \'inFilter\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inFilter"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inFilter\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表单 --\x3e\n          <el-table-column width="100" prop="display.inForm" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表单"\n                :class="$style.checkbolabel"\n                :model-value="inForm"\n                @change="toggleSelectAll($event, \'inForm\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inForm"\n                  :class="$style.checkbox"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  @change="setDisplay(item, $event, \'inForm\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在详情 --\x3e\n          <el-table-column width="100" prop="display.inDetail" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在详情"\n                :class="$style.checkbolabel"\n                :model-value="inDetail"\n                @change="toggleSelectAll($event, \'inDetail\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inDetail"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inDetail\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n        </el-table>\n        \x3c!-- 右键点击 --\x3e\n        <el-popover\n          :disabled-scroll="true"\n          trigger="click"\n          ref="menuPopper"\n          :popper-options="popperOptions"\n          v-if="menuSelectedItem && popperExistMap[menuSelectedItem.id]"\n          v-model:visible="popperVisibleMap[menuSelectedItem && menuSelectedItem.id]"\n          :virtual-ref="triggerRef"\n          :placement="placement"\n          :show-arrow="false"\n          @hide="onMenuPopperHide"\n        >\n          <el-menu :class="$contextmenu.menu" @click="onMenuClick">\n            <el-menu-item-group :class="$contextmenu.group" title="属性">\n              <el-menu-item :class="$contextmenu.item" @click="onMenuFindUsage">查找引用</el-menu-item>\n              <el-menu-item\n                :class="$contextmenu.item"\n                @click="onMenuDelete(removeItem)"\n                :disabled="\n                  (menuSelectedItem && menuSelectedItem.primaryKey) ||\n                  isOfficalEntityProperty({\n                    naslNode: menuSelectedItem,\n                  }) ||\n                  isViewEntity\n                "\n              >\n                删除\n              </el-menu-item>\n            </el-menu-item-group>\n          </el-menu>\n        </el-popover>\n      </div>\n      <template v-if="selectedItem">\n        <div :class="[$style.flexgrid, $style.bodywrap1]">\n          <div :class="$style.gridcolumn" class="extraForm">\n            <el-form\n              ref="selectedItemForm"\n              :model="selectedItem"\n              :class="[$style.reffrom, $style.blockFromLayout, \'s-data-attr-designer-form\']"\n              label-width="85px"\n              label-position="right"\n              :inline="true"\n            >\n              \x3c!-- 最 大/小 值/长度 --\x3e\n              <skeleton-render\n                name="views/data/components/entity-field-rules/index"\n                :property="selectedItem.naslNode"\n                :key="\'rules_\' + selectedItem.naslNode.name"\n                :disabled="\n                  selectedItem.loading ||\n                  selectedItem.naslNode.parentNode.loading ||\n                  selectedItem.naslNode.editable === false ||\n                  isViewEntity\n                "\n                :is-view-entity="isViewEntity"\n                direction="horizontal"\n                :class="$style.rules"\n              />\n              \x3c!-- 小数位数 --\x3e\n              <el-form-item v-if="typeName === \'Decimal\'" label="小数位数">\n                <el-input-number\n                  placeholder="请输入小数位数"\n                  :color="scaleErrorMsg ? \'error\' : \'\'"\n                  v-model="model.scale"\n                  :min="scaleOption.min"\n                  :max="scaleOption.max"\n                  controls-position="right"\n                  :disabled="decimalDisabled(selectedItem) || isViewEntity"\n                  :value-on-clear="0"\n                  @keyup.enter="$event.target.blur()"\n                  @change="setScale"\n                ></el-input-number>\n                <div v-if="scaleErrorMsg" :class="$style.scaleErrorMsg">\n                  <s-others-icon name="solid-hint"></s-others-icon>\n                  {{ scaleErrorMsg }}\n                </div>\n              </el-form-item>\n              \x3c!-- 关联属性 --\x3e\n              <el-form-item :key="selectedItem.naslNode.name">\n                <template #label>\n                  <div style="display: flex; align-items: center">\n                    关联属性\n                    <s-others-icon name="link2" :class="$style.iconLink2"></s-others-icon>\n                  </div>\n                </template>\n                <skeleton-render\n                  name="views/data/entity-reference/index"\n                  :entity="entity"\n                  :property="selectedItem.naslNode"\n                  :value="entityReference"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  :data-type-list="selectedItem.naslNode.lastVersion ? dataTypeList : undefined"\n                  :error="isReleationEntityError(selectedItem.naslNode)"\n                  @save="onSaveReference"\n                  @clear="onClearReference"\n                />\n              </el-form-item>\n              \x3c!-- 属性记录 --\x3e\n              <el-form-item\n                label="关联属性实体记录删除规则"\n                v-if="selectedItem.naslNode.relationProperty"\n                layout="block"\n                class="relationDelRule"\n              >\n                <el-select\n                  style="width: 240px"\n                  v-model="selectedItem.naslNode.deleteRule"\n                  placeholder="请选择"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  @change="setDeleteRule"\n                >\n                  <el-option label="不允许删除" value="protect"></el-option>\n                  <el-option label="允许删除且同时删除本实体记录" value="cascade"></el-option>\n                </el-select>\n              </el-form-item>\n              \x3c!-- 主键生成规则 --\x3e\n              <el-form-item v-if="selectedItem.naslNode.primaryKey" label="主键生成规则" placement="bottom">\n                <skeleton-render\n                  name="views/data/components/entity-primarykey-rules/index"\n                  :disabled="isViewEntity"\n                  :entity="entity"\n                  :selected-item="selectedItem.naslNode"\n                  @changeErrorMsgs="changeErrorMsgs"\n                />\n              </el-form-item>\n              \x3c!-- 数据库列名 --\x3e\n              <el-form-item label="数据库列名" placement="bottom">\n                <u-validator\n                  ref="columnNameValidatorRef"\n                  style="width: 100%"\n                  :rules="entityPropertyColumnNameRules"\n                  :value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                  @blur-dirty-valid="selectedItem.naslNode.setColumnName($event.value)"\n                  v-slot="slotProps"\n                >\n                  <s-input\n                    :placeholder="entityPropertyColumnNamePlaceholder"\n                    :model-value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                    :disabled="isTableOrExcelOrigin || isViewEntity"\n                    @change="slotProps.blurChange"\n                    @input="slotProps.inputChange($event)"\n                    @keyup.enter.stop="$event.target.blur()"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n              \x3c!-- 描述 --\x3e\n              <el-form-item label="描述" prop="description">\n                <u-validator\n                  v-slot="slotProps"\n                  :value="selectedItem.naslNode.description"\n                  rules="maxLength(63)"\n                  :class="$style.validator"\n                  @blur-valid="onBlurDescription(selectedItem, $event.value)"\n                  @blur-invalid="errorScrollIntoView"\n                  @validate-result="hasInvalid = !$event.valid"\n                >\n                  <s-input\n                    type="textarea"\n                    ref="descriptionEditor"\n                    placeholder="请输入描述"\n                    :model-value="selectedItem.naslNode.description"\n                    :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                    @blur:value="slotProps.blurFn($event)"\n                    @keyup.enter="slotProps.blurFn()"\n                    @input="slotProps.inputChange($event)"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n            </el-form>\n          </div>\n        </div>\n        <div :class="$style.advancedWrap" v-if="showDatabasetype">\n          <el-form :disabled="isViewEntity" label-width="80px" gap="small" class="s-data-attr-designer-form">\n            <skeleton-render\n              name="views/data/components/entity-property-databasetype/index"\n              :property="selectedItem.naslNode"\n            />\n          </el-form>\n        </div>\n      </template>\n      <div :class="$style.bodywrap1" v-show="errorMsgs.length || sourceSyncErrMsgs.length">\n        <div v-for="errorMsg in errorMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n        \x3c!-- 实体在同步数据源时产生的错误信息 --\x3e\n        <div v-for="errorMsg in sourceSyncErrMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n      </div>\n    </div>\n    \x3c!-- 查询弹出框 --\x3e\n    <el-popover\n      :visible="reflowPopoverVisible"\n      :virtual-ref="labelEditor"\n      :show-arrow="false"\n      placement="bottom-start"\n      :width="340"\n      virtual-triggering\n    >\n      <div class="reflowPopover" v-loading="reflowPopoverLoading">\n        <div class="reflowPopoverEmpty" v-if="fieldList.length === 0">\n          <s-others-icon name="hint" class="centerFlex" style="font-size: 28px; margin-bottom: 20px"></s-others-icon>\n          <span class="centerFlex">暂无推荐字段</span>\n        </div>\n        <div v-else>\n          <el-scrollbar height="250px">\n            <div\n              class="reflowPopoverItem"\n              v-for="item in fieldList"\n              :key="item.id"\n              @mouseenter="activeItem = item"\n              @mouseleave="activeItem = null"\n            >\n              <el-row :gutter="10">\n                <el-col :span="9" class="sle">\n                  <el-tooltip :content="item.name" placement="top" :show-after="500" :disabled="!isTextOverflow">\n                    <div\n                      class="tooltip-trigger"\n                      v-html="getFieldName(item.name, item.matchedNames)"\n                      @mouseenter="checkOverflow"\n                    ></div>\n                  </el-tooltip>\n                </el-col>\n                <el-col class="sle" :span="8">\n                  <el-tooltip\n                    :content="getFieldTypeTitle(item)"\n                    placement="top"\n                    :show-after="500"\n                    :disabled="!isTextOverflow"\n                  >\n                    <div class="tooltip-trigger" @mouseenter="checkOverflow">{{ getFieldTypeTitle(item) }}</div>\n                  </el-tooltip>\n                </el-col>\n                <el-col :span="4">\n                  {{ item.required ? \'必填\' : \'非必填\' }}\n                </el-col>\n                <el-col :span="3" v-show="activeItem?.id === item.id" style="color: #2383ff">使用</el-col>\n              </el-row>\n            </div>\n          </el-scrollbar>\n        </div>\n        <div style="height: 18px; margin-top: 10px">\n          <s-others-icon name="hint" class="warningIcon"></s-others-icon>\n          <span>输入_，可进行词根匹配</span>\n        </div>\n      </div>\n    </el-popover>\n    \x3c!-- 添加至备选数据库字段库弹窗 --\x3e\n    <el-dialog v-model="reflowDialogVisible" title="一键添加到备选字段库" width="50%">\n      <el-table\n        ref="reflowTableRef"\n        :data="reflowFieldList"\n        @select="handleSelectReflowField"\n        @select-all="handleSelectReflowField"\n      >\n        <el-table-column type="selection" width="40" />\n        <el-table-column label="字段注释" prop="label" />\n        <el-table-column label="字段名" prop="name" />\n        <el-table-column label="数据类型" prop="type" />\n        <el-table-column label="是否必填" prop="required">\n          <template #default="scope">\n            <span>{{ scope.row.required ? \'是\' : \'否\' }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label="字段长度" prop="length">\n          <template #default="scope">\n            <span>{{ getReflowFieldLength(scope.row) }}</span>\n          </template>\n        </el-table-column>\n      </el-table>\n      <template #footer>\n        <div class="reflowDialogFooter">\n          <el-button\n            type="primary"\n            :disabled="reflowConfirmBtnDisabled"\n            :loading="confirmLoading"\n            @click="handleUploadReflowField"\n          >\n            确 定\n          </el-button>\n          <el-button @click="reflowDialogVisible = false">取 消</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\n  import { inject, onMounted, ref, nextTick } from \'vue\';\n  import { ElMessage, ClickOutside as vClickOutside } from \'element-plus\';\n  import { requestApi, getIsReflowField, getFieldList, getReflowFieldList, uploadReflowField } from \'../apis\';\n  import { debounce } from \'../utils\';\n\n  const props = defineProps({\n    entity: Object,\n  });\n\n  const handleAddItem = () => {\n    addItem();\n    nextTick(() => {\n      onSetItemEdit(selectedItem.value, \'label\', true);\n    });\n  };\n\n  const showReflowBtn = ref(false);\n\n  const reflowPopoverVisible = ref(false);\n  const fieldList = ref([]);\n  const reflowQuery = ref(\'\');\n  const abortController = ref(null);\n  const requestId = ref(0); // 用于标识当前请求\n\n  const debounceQueryFieldList = debounce(() => {\n    // 设置loading状态\n    reflowPopoverLoading.value = true;\n\n    // 取消之前的请求\n    if (abortController.value) {\n      abortController.value.abort();\n    }\n\n    // 创建新的 AbortController 和请求ID\n    abortController.value = new AbortController();\n    const currentRequestId = ++requestId.value;\n\n    getFieldList({ query: reflowQuery.value }, abortController.value.signal)\n      .then(res => {\n        // 只有当前请求是最新的才更新数据\n        if (currentRequestId === requestId.value) {\n          fieldList.value = res.result || [];\n        }\n      })\n      .catch(err => {\n        if (err.name !== \'AbortError\') {\n          console.error(err);\n        }\n      })\n      .finally(() => {\n        // 只有当前请求是最新的才更新加载状态\n        if (currentRequestId === requestId.value) {\n          abortController.value = null;\n          reflowPopoverLoading.value = false;\n        }\n      });\n  }, 400);\n\n  const reflowPopoverLoading = ref(false);\n  const activeItem = ref(null);\n\n  const getFieldName = (name, matchedNames) => {\n    if (!name || typeof name !== \'string\') return \'\';\n    if (!Array.isArray(matchedNames)) return `<span style="color: red; font-weight: bold;">${name}</span>`;\n\n    const matchedSet = new Set(matchedNames.filter(item => item && typeof item === \'string\'));\n    const parts = name.split(/(_+)/);\n\n    return parts\n      .map(part => {\n        if (part.startsWith(\'_\')) return part;\n        return matchedSet.has(part) ? part : `<span style="color: red; font-weight: bold;">${part}</span>`;\n      })\n      .join(\'\');\n  };\n\n  const getFieldTypeTitle = item => {\n    if (item.type === \'String\') {\n      const stringLabel = getStringLabel(item.length);\n      return item.type + (stringLabel ? `  (${stringLabel})` : \'\');\n    }\n    return item.type;\n  };\n\n  const columnNameValidatorRef = ref(null);\n\n  const handleUseField = item => {\n    const target = selectedItem.value?.naslNode;\n    if (target?.concept === \'EntityProperty\') {\n      target.app.emit(\'collect:start\', { actionMsg: \'数据建模插件更新字段名\' });\n      const newName = target.parentNode?.getPropertyUniqueName?.(item.name) || item.name; // 保证字段名唯一\n      const typeName = item.type === \'Integer\' ? \'Long\' : item.type;\n      const updateData = {\n        name: newName,\n        columnName: newName,\n        required: item.required,\n        typeAnnotation: {\n          concept: \'TypeAnnotation\',\n          typeKind: \'primitive\',\n          typeNamespace: \'nasl.core\',\n          typeName,\n        },\n      };\n      if (item.type === \'String\' && item.length) {\n        const minRule = target.toJSON().rules.find(rule => rule.startsWith(\'minLength\'));\n        Object.assign(updateData, {\n          databaseTypeAnnotation: {\n            concept: \'DatabaseTypeAnnotation\',\n            typeName: \'varchar\',\n            arguments: {\n              length: item.length,\n            },\n          },\n          rules: [minRule, `maxLength(${item.length})`].filter(Boolean),\n        });\n      }\n      target.update(updateData);\n      setTimeout(() => {\n        // 延迟收集，把外层onBlurLabel的change也收集到这次的batchInstruct中\n        target.app.emit(\'collect:end\');\n      });\n\n      nextTick(async () => {\n        try {\n          const res = await columnNameValidatorRef.value?.validate();\n        } catch (error) {\n          // console.error(error);\n          // 新设置的字段名不符合规则，主动聚焦到输入框\n          onSetItemEdit(selectedItem.value, \'name\', true);\n        }\n      });\n    }\n  };\n\n  const handleLabelFocus = label => {\n    reflowQuery.value = label;\n  };\n\n  const handleLabelBlur = async (event, slotProps, item) => {\n    reflowPopoverVisible.value = false;\n    reflowQuery.value = \'\';\n    fieldList.value = [];\n\n    event = event.replace(/_/g, \'\'); // event 去除掉_\n\n    slotProps.blurFn(event); // 触发模版中原来的失焦逻辑\n    if (activeItem.value) {\n      handleUseField(activeItem.value);\n      activeItem.value = null;\n    }\n  };\n\n  const handleLabelInput = (event, slotProps) => {\n    reflowPopoverVisible.value = true;\n    reflowQuery.value = event;\n    slotProps.inputChange(event); // 触发模版中原有的修改逻辑\n    // 外置设置防抖查询loading状态\n    reflowPopoverLoading.value = true;\n    debounceQueryFieldList();\n  };\n\n  onMounted(() => {\n    getIsReflowField({}).then(res => {\n      showReflowBtn.value = res.result;\n    });\n  });\n\n  // 一键添加到备选字段库\n  const reflowLoading = ref(false);\n  const reflowFieldList = ref([]);\n\n  const addReflowField = () => {\n    reflowLoading.value = true;\n\n    const filterList = [\'id\', \'createdTime\', \'updatedTime\', \'createdBy\', \'updatedBy\'];\n    const filterRegex = /^property\\d+$|^.*[\\u4e00-\\u9fa5].*$/;\n\n    const properties = props.entity?.toJSON()?.properties || [];\n    const tempReflowFieldList = [];\n    const nameSet = new Set();\n    properties.forEach(property => {\n      if (\n        !property.label ||\n        filterList.includes(property.name) ||\n        filterRegex.test(property.name) ||\n        property.typeAnnotation?.typeKind !== \'primitive\'\n      ) {\n        return;\n      }\n      let type = property.typeAnnotation?.typeName || \'String\';\n      if (type === \'Long\') type = \'Integer\'; // 整数类型需要重命名为Integer\n      const propertyName = property.name.replace(/\\d+$/, \'\') || \'\';\n      if (nameSet.has(propertyName)) {\n        return;\n      }\n      nameSet.add(propertyName);\n      tempReflowFieldList.push({\n        name: propertyName,\n        label: property.label || \'\',\n        required: property.required || false,\n        type,\n        length: type === \'String\' ? property.databaseTypeAnnotation?.arguments?.length || 255 : void 0,\n      });\n    });\n    reflowFieldList.value = tempReflowFieldList;\n    if (reflowFieldList.length === 0) {\n      reflowLoading.value = false;\n      showMessage();\n      return;\n    }\n\n    // 备选库不需要校验字段唯一性，直接打开弹窗\n    requestApi(\n      getReflowFieldList,\n      {\n        list: tempReflowFieldList.map(item => ({\n          name: item.name,\n          label: item.label,\n        })),\n      },\n      res => {\n        if (res.result?.length === 0) {\n          showMessage();\n          return;\n        } else {\n          // 只有在res.result中的name，在tempReflowFieldList中存在，才显示\n          const set = new Set(res.result);\n          reflowFieldList.value = tempReflowFieldList.filter(item => set.has(item.name));\n          reflowDialogVisible.value = true;\n          nextTick(() => {\n            reflowConfirmBtnDisabled.value = false;\n            reflowTableRef.value.toggleAllSelection();\n          });\n        }\n      },\n      err => {\n        console.error(err);\n      },\n      () => {\n        reflowLoading.value = false;\n      }\n    );\n    // reflowDialogVisible.value = true;\n    // reflowLoading.value = false;\n    // nextTick(() => {\n    //   reflowConfirmBtnDisabled.value = false;\n    //   reflowTableRef.value.toggleAllSelection();\n    // });\n  };\n\n  // 显示[暂无可回流到备选数据库的字段]消息\n  const showMessage = (type = \'warning\', msg = \'暂无可回流到备选数据库的字段\') => {\n    ElMessage.closeAll();\n    ElMessage[type](msg);\n  };\n\n  const reflowDialogVisible = ref(false);\n  const reflowTableRef = ref(null);\n\n  const getStringLabel = length => {\n    const map = {\n      255: \'短 255\',\n      4000: \'中 4000\',\n      16777215: \'长 16777215\',\n    };\n    return map[length] || length;\n  };\n  const getReflowFieldLength = row => {\n    return row.type === \'String\' ? getStringLabel(row.length) : \'-\';\n  };\n\n  const reflowConfirmBtnDisabled = ref(false);\n  const isTextOverflow = ref(false);\n\n  // 检测文本是否溢出\n  const checkOverflow = event => {\n    const element = event.target;\n    isTextOverflow.value = element.scrollWidth > element.clientWidth;\n  };\n  const handleSelectReflowField = (selection, row) => {\n    reflowConfirmBtnDisabled.value = selection.length === 0;\n  };\n\n  const confirmLoading = ref(false);\n  const handleUploadReflowField = () => {\n    confirmLoading.value = true;\n    const selectedList = reflowTableRef.value.getSelectionRows();\n    requestApi(\n      uploadReflowField,\n      {\n        list: selectedList,\n      },\n      res => {\n        if (res.result) {\n          showMessage(\'success\', \'添加成功\');\n          reflowDialogVisible.value = false;\n        } else {\n          showMessage(\'error\', res.msg || \'添加失败\');\n        }\n      },\n      err => {\n        // console.error(err);\n        showMessage(\'error\', err);\n      },\n      () => {\n        confirmLoading.value = false;\n      }\n    );\n  };\n\n  const {\n    /**\n     * 名称输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    nameEditor,\n    /**\n     * 标题输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    labelEditor,\n    /**\n     * 描述输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    descriptionEditor,\n    /**\n     * 表格节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    tableviewRef,\n    /**\n     * 数据库视图导入生成的实体\n     * entity 的 origin 属性是否是 view\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isViewEntity,\n    /**\n     * 添加实体属性\n     *\n     * @function\n     */\n    addItem,\n    /**\n     * 生成移除按钮的提示\n     *\n     * @function\n     * @return string\n     */\n    getRemoveTooltip,\n    /**\n     * 表格选中的行元素\n     *\n     * @type {Vue.computed<object>}\n     */\n    selectedItem,\n    /**\n     * 是否是官方实体属性\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntityProperty,\n    /**\n     * 移除实体索引\n     *\n     * @function\n     * @param item - 需要删除的行元素\n     */\n    removeItem,\n    /**\n     * 表格的渲染数据\n     *\n     * @type {Vue.computed<array>}\n     */\n    renderList,\n    /**\n     * 上移当前选中的实体索引\n     *\n     * @function\n     */\n    moveUpItem,\n    /**\n     * 下移当前选中的实体索引\n     *\n     * @function\n     */\n    moveDownItem,\n    /**\n     * 表格高度\n     *\n     * @type {Vue.computed<number>}\n     */\n    tableHeight,\n    /**\n     * 设置表单列的样式\n     *\n     * @function\n     */\n    setRowClassName,\n    /**\n     * 右键选中表格行元素\n     *\n     * @function\n     */\n    onContextMenuRow,\n    /**\n     * 选中行元素时触发\n     *\n     * @function\n     * @param item - 行元素\n     */\n    onSelectRowWithDataType,\n    /**\n     * 拖拽调整表格列宽度\n     *\n     * @function\n     * @param newWidth - 新宽度\n     * @param oldWidth - 旧宽度\n     * @param column - 列元素\n     */\n    handleDragend,\n    /**\n     * 是否禁止编辑行元素\n     *\n     * @function\n     * @param item - 行元素\n     */\n    getDisable,\n    /**\n     * 设置表格列元素编辑状态\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 属性名称\n     * @param focus - 是否选中输入框\n     */\n    onSetItemEdit,\n    /**\n     * Tab 键跳转切换下一个属性\n     *\n     * @function\n     * @param event - 原生键盘事件\n     * @param item - 行元素\n     * @param name - 属性名称\n     */\n    onKeyUp,\n    /**\n     * 名称输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的名称\n     */\n    onBlurName,\n    /**\n     * 验证不通过时滚动到错误元素\n     */\n    errorScrollIntoView,\n    /**\n     * 存在错误\n     *\n     * @type {Vue.ref<boolean>}\n     */\n    hasInvalid,\n    /**\n     * 显示输入框的提示\n     *\n     * @type {Vue.ref<string>}\n     */\n    tooltipOpened,\n    /**\n     * 属性名，暂时存储属性名，用于输入框输入等操作\n     *\n     * @type {Vue.ref<string>}\n     */\n    itemNameValue,\n    /**\n     * 输入框获取焦点时触发\n     *\n     * 1. 设置tooltipOpened的值\n     * 2. 设置itemNameValue\n     *\n     * @function\n     * @param item - 当前行元素\n     */\n    onFocusName,\n    /**\n     * 标题输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的标题\n     */\n    onBlurLabel,\n    /**\n     * 是否应用正在发布\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isAppDeploying,\n    /**\n     * 是否实体已经发布过并且是复合类型\n     *\n     * 1. 实体已经发布过，在app下的depEntities可以找到该实体\n     * 2. 实体是复合类型：\'Map\', \'List\'，或者typeKind是reference并且namespace是\'entities\', \'structures\'\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isPublishedComplexType,\n    /**\n     * 数据类型的标题\n     *\n     * @function\n     * @param item - 行元素\n     * @return string\n     */\n    showDatatype,\n    /**\n     * 双击编辑数据类型输入框\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - 原生事件\n     */\n    onDblClickDatatype,\n    /**\n     * 获取可选类型\n     *\n     * @function\n     * @return 可选类型\n     */\n    getDataTypeList,\n    /**\n     * 失焦时取消当前行元素编辑状态\n     *\n     * @function\n     * @param item - 行元素\n     */\n    handleBlur,\n    /**\n     * 修改实体属性类型\n     *\n     * @function\n     * @param event - event.value 实际使用数据\n     */\n    onChangeDatatype,\n    /**\n     * 是否属于官方实体\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntity,\n    /**\n     * 复合类型\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isComplexType,\n    /**\n     * 修改是否必填\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkbox 原生事件\n     */\n    requireInput,\n    /**\n     * 能否设置默认值\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    canSetDefaultValue,\n    /**\n     * 对应节点是否有错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    IsError,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inTable,\n    /**\n     * 全部勾选或者取消全部勾选\n     *\n     * @function\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    toggleSelectAll,\n    /**\n     * 设置显示属性\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    setDisplay,\n    /**\n     * 显示在筛选\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inFilter,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inForm,\n    /**\n     * 显示在详情\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inDetail,\n    /**\n     * ElementPlus 的 popper 配置\n     */\n    popperOptions,\n    /**\n     * 右键菜单选中项\n     *\n     * @type {Vue.ref<object>}\n     */\n    menuSelectedItem,\n    /**\n     * 项对应的右键菜单是否存在\n     */\n    popperExistMap,\n    /**\n     * 项对应的右键菜单是否显示\n     */\n    popperVisibleMap,\n    /**\n     * 右键菜单的触发节点\n     */\n    triggerRef,\n    /**\n     * 右键菜单的出现位置\n     */\n    placement,\n    /**\n     * 右键菜单隐藏时的处理函数\n     */\n    onMenuPopperHide,\n    /**\n     * 菜单点击时\n     */\n    onMenuClick,\n    /**\n     * 菜单-查找引用\n     *\n     * @function\n     */\n    onMenuFindUsage,\n    /**\n     * 菜单-删除\n     *\n     * @function\n     */\n    onMenuDelete,\n    /**\n     * 实体属性数据类型\n     *\n     * @type {Vue.computed<string>}\n     */\n    typeName,\n    /**\n     * 小数位数的校验错误信息\n     *\n     * @type {Vue.computed<string>}\n     */\n    scaleErrorMsg,\n    /**\n     * 属性的响应式数据\n     *\n     * @type {Vue.reactive<object>}\n     * @property scale - 小数位数\n     */\n    model,\n    /**\n     * 小数位数的范围\n     *\n     * @type {Vue.computed<object>}\n     * @property min - 最小值\n     * @property max - 最大值\n     */\n    scaleOption,\n    /**\n     * 是否禁用小数位数\n     *\n     * @function\n     * @param item - 行元素\n     * @return boolean\n     */\n    decimalDisabled,\n    /**\n     * 修改小数位数\n     *\n     * @function\n     */\n    setScale,\n    /**\n     * 关联属性\n     *\n     * @type {Vue.ref<string>}\n     */\n    entityReference,\n    /**\n     * 类型列表\n     *\n     * @type {Vue.ref<array>}\n     */\n    dataTypeList,\n    /**\n     * 关联实体存在错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    isReleationEntityError,\n    /**\n     * 设置关联属性\n     *\n     * @function\n     * @param event - event.value 表示实际数据\n     */\n    onSaveReference,\n    /**\n     * 清除关联属性\n     *\n     * @function\n     */\n    onClearReference,\n    /**\n     * 设置关联属性实体记录删除规则\n     *\n     * @function\n     * @param event - 选中事件对象\n     */\n    setDeleteRule,\n    /**\n     * 设置错误信息\n     *\n     * @function\n     * @param errorMsgs - 错误信息\n     */\n    changeErrorMsgs,\n    /**\n     * 是否来源于数据库表/excel\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isTableOrExcelOrigin,\n    /**\n     * 描述输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的描述\n     */\n    onBlurDescription,\n    /**\n     * 是否显示数据库高级设置\n     *\n     * 1.没有设置数据源\n     * 2.实体是excel导入或者数据源反向导入\n     * 3.权限实体（贤宇说一直是以LCAP开头来判断的）\n     * 这3种情况不显示数据库设置\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    showDatabasetype,\n    /**\n     * 实体在同步数据源时产生的错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    sourceSyncErrMsgs,\n    /**\n     * 错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    errorMsgs,\n    /**\n     * 数据库列名校验规则\n     *\n     * @type {Vue.computed<object>}\n     */\n    entityPropertyColumnNameRules,\n    /**\n     * 数据库列名输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyColumnNamePlaceholder,\n    /**\n     * 生成名称校验规则\n     *\n     * @function\n     * @param node - 节点\n     * @return 名称校验规则\n     */\n    getEntityPropertyRules,\n    /**\n     * 名称输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyPlaceholder,\n    /**\n     * 设置选中行的数据类型\n     *\n     * @function\n     * @param value - 数据类型\n     */\n    setDataType,\n  } = inject(\'$context\');\n<\/script>\n\n<style module="$propertyDesigner">\n  .errorMsg {\n    color: var(--designer-font-second-color);\n    margin: 0 46px;\n  }\n\n  .errorMsg + .errorMsg {\n    margin-top: 10px;\n  }\n\n  .infoicon {\n    display: inline-block;\n    height: 12px;\n    width: 12px;\n    background: var(--assets-warning-info-svg) no-repeat;\n    background-size: 100% 100%;\n    vertical-align: -1px;\n    margin-right: 5px;\n  }\n</style>\n\n<style module>\n  div.table [class^=\'u-input__\']:focus,\n  div.table [class^=\'u-input__\'][focus],\n  div.table [class^=\'u-input__\']:hover,\n  div.table [class^=\'u-select__\']:focus,\n  div.table [class^=\'u-select__\'][focus],\n  div.table [class^=\'u-select__\'][opened],\n  div.table [class^=\'u-select__\']:hover {\n    border-color: var(--entity-designer-table-input-focus-border-color);\n    box-shadow: var(--entity-designer-table-input-focus-box-shadow);\n  }\n\n  .head {\n    margin: 16px;\n    padding: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n  }\n\n  div.head [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  .body {\n    margin: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n    overflow: hidden;\n  }\n\n  .entityListIcon {\n    width: 16px;\n    height: 16px;\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .edit {\n    display: inline-block;\n    width: 100%;\n    line-height: 38px;\n  }\n\n  .edit:hover {\n    cursor: pointer;\n  }\n\n  .edit:focus {\n    outline: none;\n  }\n\n  .edit .text > span {\n    color: var(--entity-designer-table-color);\n  }\n\n  .edit .text {\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .editwrap {\n    margin-left: -9px;\n  }\n\n  .editwrap [class^=\'s-datatype-select__\'] {\n    vertical-align: middle;\n  }\n\n  .text {\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n  }\n\n  .textContent {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n    max-width: calc(100% - 28px);\n    margin-right: 8px;\n  }\n  .textContent:empty {\n    display: none;\n  }\n\n  .text > span {\n    display: inline-block;\n    color: var(--entity-designer-table-disabled-color);\n    vertical-align: middle;\n  }\n\n  .validator {\n    width: 100%;\n  }\n\n  .btnnav {\n    border-bottom: 1px solid var(--entity-designer-border-color);\n    border-top: 1px solid var(--entity-designer-border-color);\n    padding: 5px 24px;\n  }\n\n  div.btnnav[direction=\'horizontal\'][gap=\'small\'] > :not(:last-child) {\n    margin-right: 8px;\n  }\n\n  .btnnav1 {\n    border-top: none;\n    background-color: var(--entity-designer-btnnav-background);\n  }\n\n  .bodywrap {\n    padding: 16px 24px 0;\n    overflow-x: auto;\n    overflow-y: hidden;\n    margin-bottom: 24px;\n  }\n\n  div.bodywrap [class^=\'u-grid-layout_column__\'] {\n    padding-bottom: 0;\n  }\n\n  .bodywrap1 {\n    padding: 16px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .advancedWrap {\n    padding: 10px 24px 25px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .entityfrom [class^=\'u-form_item_label__\'] {\n    width: 36px !important;\n  }\n\n  div.input {\n    width: 100%;\n    margin-right: 12px;\n  }\n\n  .iconBase {\n    display: inline-block;\n    width: 20px;\n    height: 38px;\n    line-height: 38px;\n    text-align: center;\n    font-size: var(--font-size-large);\n    font-size: 14px;\n  }\n\n  .iconKey {\n    color: var(--designer-table-edit-icon-key-color);\n  }\n\n  .iconLink {\n    color: var(--designer-table-edit-icon-link-color);\n  }\n\n  .iconEdit {\n    color: var(--color-base);\n    opacity: 0;\n  }\n\n  .iconLink2 {\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    line-height: 16px;\n    font-size: var(--font-size-huge);\n    color: var(--brand-primary);\n    cursor: pointer;\n    position: relative;\n    top: 2px;\n    left: 4px;\n  }\n\n  .edit:hover .iconEdit {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n\n  .edit:hover .iconEdit:hover {\n    opacity: 1;\n  }\n\n  .icon {\n    width: 14px;\n    height: 14px;\n    display: inline-block;\n    vertical-align: middle;\n    background-repeat: no-repeat;\n  }\n\n  div.normalfrom [class^=\'u-form_item_label__\'] {\n    width: 60px !important;\n  }\n\n  div.normalfrom > div {\n    margin-bottom: 16px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'],\n  div.normalfrom [class^=\'u-select__\'],\n  div.normalfrom [class^=\'u-form_item_field__\'],\n  div.normalfrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom [class^=\'u-form_item_label__\'] {\n    width: 94px !important;\n  }\n\n  div.reffrom [class^=\'u-input__\'],\n  div.reffrom [class^=\'u-tree-select__\'],\n  div.reffrom [class^=\'u-select__\'],\n  div.reffrom [class^=\'u-form_item_field__\'],\n  div.reffrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.reffrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom .text {\n    opacity: 0.3;\n  }\n\n  div.reffrom [class^=\'u-form_item_extra__\'] {\n    width: 12px;\n  }\n\n  .flexgrid {\n    display: flex;\n  }\n\n  .gridcolumn {\n    width: auto;\n  }\n\n  .gridcolumn:not(:last-child) {\n    margin-right: 24px;\n  }\n\n  div.fixedwidthinput,\n  div.textarea {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  .icondivider {\n    color: var(--entity-designer-border-color);\n  }\n\n  .advanced {\n    padding-top: 10px;\n  }\n\n  .scaleErrorMsg {\n    position: absolute;\n    color: rgb(242, 73, 87);\n  }\n  .typeError {\n    border-radius: 4px;\n    border: 1px solid var(--input-border-color-error);\n  }\n  .checkbox [class=\'el-checkbox__label\'] {\n    line-height: 23px;\n    font-size: 12px;\n    text-overflow: ellipsis;\n    text-align: left;\n    font-weight: 600;\n    color: var(--el-table-header-text-color);\n  }\n  .checkbolabel [class=\'el-checkbox__label\'] {\n    line-height: 23px !important;\n    font-size: 12px !important;\n    text-overflow: ellipsis !important;\n    text-align: left !important;\n    font-weight: 600 !important;\n    color: var(--el-table-header-text-color) !important;\n  }\n  .checkbox {\n    height: 23px;\n    line-height: 23px;\n  }\n</style>\n<style module="$contextmenu">\n  .menu {\n    margin-top: 0 !important;\n  }\n\n  .menu .group [class^=\'el-menu-item-group__title\'] {\n    --el-menu-text-color: var(--el-menu-top-title-text-color);\n    height: 32px;\n    font-weight: bold;\n    border-bottom: 1px solid var(--line-color-regular);\n    background: var(--fill-color-thead);\n    color: var(--el-menu-text-color);\n    cursor: auto;\n  }\n</style>\n\n<style scoped>\n  .tableCell :deep(.cell) {\n    padding: 0;\n    line-height: 20px;\n    padding-left: 6px;\n  }\n  .theadLable {\n    overflow: visible;\n    width: 100%;\n    padding-left: 6px;\n    border-right: 1px solid var(--entity-designer-property-dragger-border-color);\n  }\n  .topIconGroup {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 8px;\n    background-color: var(--entity-designer-icon-group-background-color);\n    padding: 5px 24px;\n    border-bottom: 1px solid var(--entity-designer-icon-group-border-color);\n    position: sticky;\n    z-index: 9;\n    top: 64px;\n  }\n\n  .icon {\n    margin-right: 8px;\n  }\n\n  .extraForm :deep(.el-form-item__label) {\n    font-size: 12px;\n  }\n\n  :deep(.row-style) {\n    border: 1px solid #4d87fe;\n  }\n\n  :deep(.cell-style) {\n    border-bottom: 1px solid #409eff;\n  }\n\n  .elFormFlex {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n</style>\n\n<style scoped>\n  .reflowPopover {\n    width: 340px;\n    padding: 8px;\n  }\n\n  .reflowPopoverEmpty {\n    padding: 20px 0 30px;\n  }\n\n  .reflowPopoverItem {\n    height: 48px;\n    line-height: 48px;\n    padding: 0 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    &:hover {\n      background-color: #edf2f9;\n    }\n  }\n\n  .warningIcon {\n    margin-right: 4px;\n  }\n\n  .reflowDialogFooter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 居中对齐flex布局 */\n  .centerFlex {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 单行文本溢出省略号 */\n  .sle,\n  [sle] {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  /* tooltip触发器样式 */\n  .tooltip-trigger {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n</style>\n'],sourceRoot:""}]),i.locals={table:"EntityPropertyDesigner__table--DAcgg",head:"EntityPropertyDesigner__head--gPuC3",body:"EntityPropertyDesigner__body--EvBMI",entityListIcon:"EntityPropertyDesigner__entityListIcon--kBERs",edit:"EntityPropertyDesigner__edit--ClOqV",text:"EntityPropertyDesigner__text--qpPcJ",editwrap:"EntityPropertyDesigner__editwrap--ZGrYT",textContent:"EntityPropertyDesigner__textContent--ixaXm",validator:"EntityPropertyDesigner__validator--PFrhM",btnnav:"EntityPropertyDesigner__btnnav--iOokw",btnnav1:"EntityPropertyDesigner__btnnav1--E5h5W",bodywrap:"EntityPropertyDesigner__bodywrap--VKO0H",bodywrap1:"EntityPropertyDesigner__bodywrap1--zpK7G",advancedWrap:"EntityPropertyDesigner__advancedWrap--ffldQ",entityfrom:"EntityPropertyDesigner__entityfrom--fqGAy",input:"EntityPropertyDesigner__input--bg7Vc",iconBase:"EntityPropertyDesigner__iconBase--F4Nxz",iconKey:"EntityPropertyDesigner__iconKey--lPb7Y",iconLink:"EntityPropertyDesigner__iconLink--lAthw",iconEdit:"EntityPropertyDesigner__iconEdit--jRzSd",iconLink2:"EntityPropertyDesigner__iconLink2--EYHwI",icon:"EntityPropertyDesigner__icon--cAvU8",normalfrom:"EntityPropertyDesigner__normalfrom--XxBVw",reffrom:"EntityPropertyDesigner__reffrom--qgC1O",flexgrid:"EntityPropertyDesigner__flexgrid--vqhTk",gridcolumn:"EntityPropertyDesigner__gridcolumn--QtlHd",fixedwidthinput:"EntityPropertyDesigner__fixedwidthinput--NnYfy",textarea:"EntityPropertyDesigner__textarea--QDNlf",icondivider:"EntityPropertyDesigner__icondivider--u945n",advanced:"EntityPropertyDesigner__advanced--izAOk",scaleErrorMsg:"EntityPropertyDesigner__scaleErrorMsg--Z_N_y",typeError:"EntityPropertyDesigner__typeError--nNcks",checkbox:"EntityPropertyDesigner__checkbox--sXVL8",checkbolabel:"EntityPropertyDesigner__checkbolabel--SDk5N"};const r=i},772:(e,n,t)=>{t.d(n,{Z:()=>r});var l=t(481),o=t.n(l),a=t(966),i=t.n(a)()(o());i.push([e.id,"\n.EntityPropertyDesigner__menu--JM97v {\n    margin-top: 0 !important;\n}\n.EntityPropertyDesigner__menu--JM97v .EntityPropertyDesigner__group--QOObs [class^='el-menu-item-group__title'] {\n    --el-menu-text-color: var(--el-menu-top-title-text-color);\n    height: 32px;\n    font-weight: bold;\n    border-bottom: 1px solid var(--line-color-regular);\n    background: var(--fill-color-thead);\n    color: var(--el-menu-text-color);\n    cursor: auto;\n}\n","",{version:3,sources:["webpack://./src/components/EntityPropertyDesigner.vue"],names:[],mappings:";AAs3DE;IACE,wBAAwB;AAC1B;AAEA;IACE,yDAAyD;IACzD,YAAY;IACZ,iBAAiB;IACjB,kDAAkD;IAClD,mCAAmC;IACnC,gCAAgC;IAChC,YAAY;AACd",sourcesContent:['<template>\n  <div>\n    <div\n      v-if="!isViewEntity"\n      class="topIconGroup"\n      :class="$style.body"\n      style="margin-top: 0px; margin-bottom: 0px; border-bottom: 0px; height: 40px"\n    >\n      \x3c!-- 添加实体属性 --\x3e\n      <s-others-icon name="add" tooltip="添加属性" button @click="handleAddItem"></s-others-icon>\n      \x3c!-- 删除实体属性 --\x3e\n      <s-others-icon\n        name="remove"\n        button\n        :tooltip="getRemoveTooltip()"\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          selectedItem.naslNode.primaryKey ||\n          isOfficalEntityProperty(selectedItem)\n        "\n        @click="removeItem(selectedItem)"\n      ></s-others-icon>\n      <div :class="$style.icondivider">|</div>\n      \x3c!-- 上移实体属性 --\x3e\n      <s-others-icon\n        name="position-up"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置顶\'\n            : \'上移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[0].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveUpItem"\n      ></s-others-icon>\n      \x3c!-- 下移实体属性 --\x3e\n      <s-others-icon\n        name="position-down"\n        button\n        :tooltip="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n            ? \'当前属性已置底\'\n            : \'下移\'\n        "\n        :disabled="\n          !selectedItem ||\n          !selectedItem.naslNode ||\n          selectedItem.loading ||\n          renderList[renderList.length - 1].naslNode.name === selectedItem.naslNode.name\n        "\n        @click="moveDownItem"\n      ></s-others-icon>\n      \x3c!-- 一键添加到备选字段库 --\x3e\n      <el-button v-if="showReflowBtn" :loading="reflowLoading" @click="addReflowField">一键添加到备选字段库</el-button>\n    </div>\n    <div :class="$style.body" style="margin-top: 0px">\n      <div :class="$style.bodywrap" class="tableCell">\n        <el-table\n          ref="tableviewRef"\n          :data="renderList"\n          highlight-current-row\n          :style="`min-width:950px;${tableHeight}`"\n          style="width: 100%"\n          :class="\n            renderList.length > 8\n              ? [$style.table, $style.tablescroll, \'s-data-table-edit\']\n              : [$style.table, \'s-data-table-edit\']\n          "\n          :value="selectedItem && selectedItem.naslNode.name"\n          value-field="name"\n          :header-row-style="{ height: \'40px\' }"\n          :cell-style="{ padding: \'0px\' }"\n          :row-style="{ height: \'42px\' }"\n          :row-class-name="setRowClassName"\n          empty-text="暂无数据"\n          @row-contextmenu="onContextMenuRow"\n          @row-click="onSelectRowWithDataType"\n          @header-dragend="handleDragend"\n          @click.right.prevent\n          :border="true"\n        >\n          \x3c!-- 主键/关联属性的icon --\x3e\n          <el-table-column width="38" prop="primaryKey" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <s-others-icon\n                  v-if="item.naslNode.primaryKey"\n                  name="key"\n                  :class="[$style.iconBase, $style.iconKey]"\n                ></s-others-icon>\n                <s-others-icon\n                  v-if="item.naslNode.relationProperty"\n                  name="link"\n                  :class="[$style.iconBase, $style.iconLink]"\n                ></s-others-icon>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 标题 --\x3e\n          <el-table-column prop="label" min-width="107" label="字段注释">\n            <template #header>\n              <div class="theadLable">字段注释</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!item.loading && !item.naslNode.parentNode.loading && !isViewEntity">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'label\'"\n                  :class="$style.edit"\n                  @dblclick="onSetItemEdit(item, \'label\', true)"\n                  tabindex="0"\n                  @keyup="onKeyUp($event, item, \'label\')"\n                  :title="item.naslNode.label"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.label }}</span>\n                    <s-others-icon\n                      v-show="!isOfficalEntityProperty(item)"\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'label\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    ref="labelValidatorRef"\n                    v-slot="slotProps"\n                    :value="item.naslNode.label"\n                    rules="maxLength(63)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurLabel(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    <s-input\n                      placeholder="请输入标题"\n                      :model-value="item.naslNode.label"\n                      ref="labelEditor"\n                      :class="$style.input"\n                      @focus="handleLabelFocus(item.naslNode.label)"\n                      @blur:value="handleLabelBlur($event, slotProps, item)"\n                      @input="handleLabelInput($event, slotProps)"\n                      @keyup.enter="$event.target.blur()"\n                    ></s-input>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                \x3c!-- 之前仅仅为 item.label 但是实际上在item 对象中没有label属性，恐在特殊情况下存在，故范围限制为 区分 viewEntity --\x3e\n                <span>{{ isViewEntity ? item.naslNode.label : item.label }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 名称 --\x3e\n          <el-table-column label="字段名" prop="name" min-width="87">\n            <template #header>\n              <div class="theadLable">字段名</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              \x3c!-- 非禁用状态 --\x3e\n              <template v-else-if="!getDisable(item)">\n                \x3c!-- 展示态 --\x3e\n                <div\n                  v-if="item.edit !== \'name\'"\n                  tabindex="0"\n                  :class="$style.edit"\n                  :title="item.naslNode.name"\n                  @dblclick="onSetItemEdit(item, \'name\', true)"\n                  @keyup="onKeyUp($event, item, \'name\')"\n                >\n                  <div :class="$style.text">\n                    <span :class="$style.textContent">{{ item.naslNode.name }}</span>\n                    <s-others-icon\n                      name="edit"\n                      :class="[$style.iconBase, $style.iconEdit]"\n                      @click="onSetItemEdit(item, \'name\', true)"\n                    ></s-others-icon>\n                  </div>\n                </div>\n                \x3c!-- 编辑态 --\x3e\n                <div v-else :class="$style.editwrap">\n                  \x3c!-- value 传入的是被验证的值 --\x3e\n                  \x3c!-- validate-result 来调整 是否存在非法项 --\x3e\n                  <u-validator\n                    v-slot="slotProps"\n                    :value="item.naslNode.name"\n                    :rules="getEntityPropertyRules(item.naslNode)"\n                    :class="$style.validator"\n                    error-display="appear"\n                    error-append-to-body\n                    @blur-valid="onBlurName(item, $event.value)"\n                    @blur-invalid="errorScrollIntoView"\n                    @validate-result="hasInvalid = !$event.valid"\n                  >\n                    \x3c!-- “属性名”为空是显示提示信息 --\x3e\n                    <el-tooltip\n                      :visible="tooltipOpened === \'entityAttribute\' && !itemNameValue"\n                      placement="top-start"\n                      content="属性为英文字母、数字和下划线，且首字母小写"\n                    >\n                      <s-input\n                        :placeholder="entityPropertyPlaceholder"\n                        :model-value="item.naslNode.name"\n                        ref="nameEditor"\n                        :class="$style.input"\n                        @focus="onFocusName(item)"\n                        @blur:value="slotProps.blurFn($event)"\n                        @input="slotProps.inputChange($event)"\n                        @keyup.enter="$event.target.blur()"\n                        @update:modelValue="itemNameValue = $event"\n                      ></s-input>\n                    </el-tooltip>\n                  </u-validator>\n                </div>\n              </template>\n              \x3c!-- 禁用状态 --\x3e\n              <div v-else :class="$style.text">\n                <span>{{ item.naslNode.name }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 数据类型 --\x3e\n          <el-table-column label="数据类型" min-width="247">\n            <template #header>\n              <div class="theadLable">数据类型</div>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <template v-else>\n                <el-tooltip v-if="isAppDeploying" content="应用发布中，暂不能修改" placement="bottom-start">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </el-tooltip>\n                \x3c!-- 禁用状态 / 已经发布过的复合类型 --\x3e\n                <template v-else-if="getDisable(item) || isPublishedComplexType(item)">\n                  <div :class="$style.text">\n                    <span>{{ showDatatype(item) }}</span>\n                  </div>\n                </template>\n                \x3c!-- 非禁用状态 --\x3e\n                <template v-else>\n                  \x3c!-- 展示态 --\x3e\n                  <div\n                    v-if="item.edit !== \'datatype\'"\n                    tabindex="0"\n                    :class="$style.edit"\n                    :ref="`datatype${item.naslNode.id}`"\n                    :title="showDatatype(item)"\n                    @dblclick="onDblClickDatatype(item, $event)"\n                    @keyup="onKeyUp($event, item, \'datatype\')"\n                  >\n                    <div :class="$style.text">\n                      <span :class="$style.textContent">{{ showDatatype(item) }}</span>\n                      <s-others-icon\n                        name="edit"\n                        :class="[$style.iconBase, $style.iconEdit]"\n                        @click="(getDataTypeList(), onSetItemEdit(item, \'datatype\', false))"\n                      ></s-others-icon>\n                    </div>\n                  </div>\n                  \x3c!-- 编辑态 --\x3e\n                  <div v-else :class="$style.editwrap">\n                    <el-tooltip :content="`${isAppDeploying ? \'应用发布中，暂不能修改\' : \'\'}`" placement="bottom-start">\n                      <s-datatype-select\n                        :unionable="false"\n                        :no-union-subtype="true"\n                        :data-type-list="item.naslNode.lastVersion ? dataTypeList : undefined"\n                        :last-version="item.naslNode.lastVersion"\n                        :type-annotation="item.naslNode.typeAnnotation"\n                        :concept="item.naslNode.entity.concept"\n                        :show-system-types="false"\n                        :show-generic-types="true"\n                        :show-entity="true"\n                        :show-structures="true"\n                        :emptyable="false"\n                        :hasAnonymousStructure="true"\n                        :disabled="item.naslNode.readonly || isAppDeploying || isPublishedComplexType(item)"\n                        @blur="handleBlur(item)"\n                        @change="onChangeDatatype"\n                      ></s-datatype-select>\n                    </el-tooltip>\n                  </div>\n                </template>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 是否必填 --\x3e\n          <el-table-column label="是否必填" width="70" prop="required" :resizable="false">\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else style="margin-left: 16px">\n                <el-checkbox\n                  v-model="item.naslNode.required"\n                  :disabled="getDisable(item) || isComplexType(item) || isOfficalEntity(item)"\n                  :tabindex="item.editable === false || item.loading || item.naslNode.parentNode.loading ? -1 : 0"\n                  :class="$style.checkbox"\n                  @change="requireInput(item, $event)"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 默认值 --\x3e\n          <el-table-column label="默认值" prop="defaultValue" width="120" :resizable="false">\n            <template #default="{ row: item }">\n              <div v-if="[\'createdTime\', \'updatedTime\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>自动生成</span>\n              </div>\n              <div v-else-if="[\'createdBy\', \'updatedBy\'].includes(item.naslNode.name)" :class="$style.text">\n                <span>（无）</span>\n              </div>\n              <template v-else-if="!canSetDefaultValue(item)">\n                <div :class="$style.text">\n                  <span>（无）</span>\n                </div>\n              </template>\n              <template\n                v-else-if="\n                  item.loading || item.naslNode.parentNode.loading || item.naslNode.generationRule !== \'manual\'\n                "\n              >\n                <div :class="$style.text">\n                  <div :class="$style.text" v-if="item.naslNode.generationRule === \'auto\'">\n                    <span>自动生成</span>\n                  </div>\n                  <span v-else>{{ item.naslNode.defaultValue }}</span>\n                </div>\n              </template>\n              <template v-else>\n                <s-attr-input\n                  title="默认值绑定"\n                  node-concept="defaultValue"\n                  :name="item.naslNode.name"\n                  :parent-node="item.naslNode"\n                  :node="item.naslNode.defaultValue"\n                  :class="{\n                    [$style.typeError]: IsError(item.naslNode),\n                  }"\n                ></s-attr-input>\n              </template>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表格 --\x3e\n          <el-table-column width="100" prop="display.inTable" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表格"\n                :class="$style.checkbolabel"\n                :model-value="inTable"\n                @change="toggleSelectAll($event, \'inTable\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inTable"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inTable\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在筛选 --\x3e\n          <el-table-column width="100" prop="display.inFilter" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在筛选"\n                :class="$style.checkbolabel"\n                :model-value="inFilter"\n                @change="toggleSelectAll($event, \'inFilter\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inFilter"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inFilter\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在表单 --\x3e\n          <el-table-column width="100" prop="display.inForm" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在表单"\n                :class="$style.checkbolabel"\n                :model-value="inForm"\n                @change="toggleSelectAll($event, \'inForm\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inForm"\n                  :class="$style.checkbox"\n                  :disabled="item.loading || item.naslNode.parentNode.loading || isComplexType(item)"\n                  @change="setDisplay(item, $event, \'inForm\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n          \x3c!-- 显示在详情 --\x3e\n          <el-table-column width="100" prop="display.inDetail" :resizable="false">\n            <template #header>\n              <el-checkbox\n                label="显示在详情"\n                :class="$style.checkbolabel"\n                :model-value="inDetail"\n                @change="toggleSelectAll($event, \'inDetail\')"\n              ></el-checkbox>\n            </template>\n            <template #default="{ row: item, $index }">\n              <template v-if="$index === -1" />\n              <div v-else :data-item-id="item.id">\n                <el-checkbox\n                  :model-value="item.naslNode.display.inDetail"\n                  :disabled="item.loading || item.naslNode.parentNode.loading"\n                  :class="$style.checkbox"\n                  @change="setDisplay(item, $event, \'inDetail\')"\n                ></el-checkbox>\n              </div>\n            </template>\n          </el-table-column>\n        </el-table>\n        \x3c!-- 右键点击 --\x3e\n        <el-popover\n          :disabled-scroll="true"\n          trigger="click"\n          ref="menuPopper"\n          :popper-options="popperOptions"\n          v-if="menuSelectedItem && popperExistMap[menuSelectedItem.id]"\n          v-model:visible="popperVisibleMap[menuSelectedItem && menuSelectedItem.id]"\n          :virtual-ref="triggerRef"\n          :placement="placement"\n          :show-arrow="false"\n          @hide="onMenuPopperHide"\n        >\n          <el-menu :class="$contextmenu.menu" @click="onMenuClick">\n            <el-menu-item-group :class="$contextmenu.group" title="属性">\n              <el-menu-item :class="$contextmenu.item" @click="onMenuFindUsage">查找引用</el-menu-item>\n              <el-menu-item\n                :class="$contextmenu.item"\n                @click="onMenuDelete(removeItem)"\n                :disabled="\n                  (menuSelectedItem && menuSelectedItem.primaryKey) ||\n                  isOfficalEntityProperty({\n                    naslNode: menuSelectedItem,\n                  }) ||\n                  isViewEntity\n                "\n              >\n                删除\n              </el-menu-item>\n            </el-menu-item-group>\n          </el-menu>\n        </el-popover>\n      </div>\n      <template v-if="selectedItem">\n        <div :class="[$style.flexgrid, $style.bodywrap1]">\n          <div :class="$style.gridcolumn" class="extraForm">\n            <el-form\n              ref="selectedItemForm"\n              :model="selectedItem"\n              :class="[$style.reffrom, $style.blockFromLayout, \'s-data-attr-designer-form\']"\n              label-width="85px"\n              label-position="right"\n              :inline="true"\n            >\n              \x3c!-- 最 大/小 值/长度 --\x3e\n              <skeleton-render\n                name="views/data/components/entity-field-rules/index"\n                :property="selectedItem.naslNode"\n                :key="\'rules_\' + selectedItem.naslNode.name"\n                :disabled="\n                  selectedItem.loading ||\n                  selectedItem.naslNode.parentNode.loading ||\n                  selectedItem.naslNode.editable === false ||\n                  isViewEntity\n                "\n                :is-view-entity="isViewEntity"\n                direction="horizontal"\n                :class="$style.rules"\n              />\n              \x3c!-- 小数位数 --\x3e\n              <el-form-item v-if="typeName === \'Decimal\'" label="小数位数">\n                <el-input-number\n                  placeholder="请输入小数位数"\n                  :color="scaleErrorMsg ? \'error\' : \'\'"\n                  v-model="model.scale"\n                  :min="scaleOption.min"\n                  :max="scaleOption.max"\n                  controls-position="right"\n                  :disabled="decimalDisabled(selectedItem) || isViewEntity"\n                  :value-on-clear="0"\n                  @keyup.enter="$event.target.blur()"\n                  @change="setScale"\n                ></el-input-number>\n                <div v-if="scaleErrorMsg" :class="$style.scaleErrorMsg">\n                  <s-others-icon name="solid-hint"></s-others-icon>\n                  {{ scaleErrorMsg }}\n                </div>\n              </el-form-item>\n              \x3c!-- 关联属性 --\x3e\n              <el-form-item :key="selectedItem.naslNode.name">\n                <template #label>\n                  <div style="display: flex; align-items: center">\n                    关联属性\n                    <s-others-icon name="link2" :class="$style.iconLink2"></s-others-icon>\n                  </div>\n                </template>\n                <skeleton-render\n                  name="views/data/entity-reference/index"\n                  :entity="entity"\n                  :property="selectedItem.naslNode"\n                  :value="entityReference"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  :data-type-list="selectedItem.naslNode.lastVersion ? dataTypeList : undefined"\n                  :error="isReleationEntityError(selectedItem.naslNode)"\n                  @save="onSaveReference"\n                  @clear="onClearReference"\n                />\n              </el-form-item>\n              \x3c!-- 属性记录 --\x3e\n              <el-form-item\n                label="关联属性实体记录删除规则"\n                v-if="selectedItem.naslNode.relationProperty"\n                layout="block"\n                class="relationDelRule"\n              >\n                <el-select\n                  style="width: 240px"\n                  v-model="selectedItem.naslNode.deleteRule"\n                  placeholder="请选择"\n                  :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                  @change="setDeleteRule"\n                >\n                  <el-option label="不允许删除" value="protect"></el-option>\n                  <el-option label="允许删除且同时删除本实体记录" value="cascade"></el-option>\n                </el-select>\n              </el-form-item>\n              \x3c!-- 主键生成规则 --\x3e\n              <el-form-item v-if="selectedItem.naslNode.primaryKey" label="主键生成规则" placement="bottom">\n                <skeleton-render\n                  name="views/data/components/entity-primarykey-rules/index"\n                  :disabled="isViewEntity"\n                  :entity="entity"\n                  :selected-item="selectedItem.naslNode"\n                  @changeErrorMsgs="changeErrorMsgs"\n                />\n              </el-form-item>\n              \x3c!-- 数据库列名 --\x3e\n              <el-form-item label="数据库列名" placement="bottom">\n                <u-validator\n                  ref="columnNameValidatorRef"\n                  style="width: 100%"\n                  :rules="entityPropertyColumnNameRules"\n                  :value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                  @blur-dirty-valid="selectedItem.naslNode.setColumnName($event.value)"\n                  v-slot="slotProps"\n                >\n                  <s-input\n                    :placeholder="entityPropertyColumnNamePlaceholder"\n                    :model-value="selectedItem.naslNode.columnName || selectedItem.naslNode.name"\n                    :disabled="isTableOrExcelOrigin || isViewEntity"\n                    @change="slotProps.blurChange"\n                    @input="slotProps.inputChange($event)"\n                    @keyup.enter.stop="$event.target.blur()"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n              \x3c!-- 描述 --\x3e\n              <el-form-item label="描述" prop="description">\n                <u-validator\n                  v-slot="slotProps"\n                  :value="selectedItem.naslNode.description"\n                  rules="maxLength(63)"\n                  :class="$style.validator"\n                  @blur-valid="onBlurDescription(selectedItem, $event.value)"\n                  @blur-invalid="errorScrollIntoView"\n                  @validate-result="hasInvalid = !$event.valid"\n                >\n                  <s-input\n                    type="textarea"\n                    ref="descriptionEditor"\n                    placeholder="请输入描述"\n                    :model-value="selectedItem.naslNode.description"\n                    :disabled="selectedItem.loading || selectedItem.naslNode.parentNode.loading || isViewEntity"\n                    @blur:value="slotProps.blurFn($event)"\n                    @keyup.enter="slotProps.blurFn()"\n                    @input="slotProps.inputChange($event)"\n                  ></s-input>\n                </u-validator>\n              </el-form-item>\n            </el-form>\n          </div>\n        </div>\n        <div :class="$style.advancedWrap" v-if="showDatabasetype">\n          <el-form :disabled="isViewEntity" label-width="80px" gap="small" class="s-data-attr-designer-form">\n            <skeleton-render\n              name="views/data/components/entity-property-databasetype/index"\n              :property="selectedItem.naslNode"\n            />\n          </el-form>\n        </div>\n      </template>\n      <div :class="$style.bodywrap1" v-show="errorMsgs.length || sourceSyncErrMsgs.length">\n        <div v-for="errorMsg in errorMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n        \x3c!-- 实体在同步数据源时产生的错误信息 --\x3e\n        <div v-for="errorMsg in sourceSyncErrMsgs" :key="errorMsg" :class="$propertyDesigner.errorMsg">\n          <i :class="$propertyDesigner.infoicon"></i>\n          <span>{{ errorMsg }}</span>\n        </div>\n      </div>\n    </div>\n    \x3c!-- 查询弹出框 --\x3e\n    <el-popover\n      :visible="reflowPopoverVisible"\n      :virtual-ref="labelEditor"\n      :show-arrow="false"\n      placement="bottom-start"\n      :width="340"\n      virtual-triggering\n    >\n      <div class="reflowPopover" v-loading="reflowPopoverLoading">\n        <div class="reflowPopoverEmpty" v-if="fieldList.length === 0">\n          <s-others-icon name="hint" class="centerFlex" style="font-size: 28px; margin-bottom: 20px"></s-others-icon>\n          <span class="centerFlex">暂无推荐字段</span>\n        </div>\n        <div v-else>\n          <el-scrollbar height="250px">\n            <div\n              class="reflowPopoverItem"\n              v-for="item in fieldList"\n              :key="item.id"\n              @mouseenter="activeItem = item"\n              @mouseleave="activeItem = null"\n            >\n              <el-row :gutter="10">\n                <el-col :span="9" class="sle">\n                  <el-tooltip :content="item.name" placement="top" :show-after="500" :disabled="!isTextOverflow">\n                    <div\n                      class="tooltip-trigger"\n                      v-html="getFieldName(item.name, item.matchedNames)"\n                      @mouseenter="checkOverflow"\n                    ></div>\n                  </el-tooltip>\n                </el-col>\n                <el-col class="sle" :span="8">\n                  <el-tooltip\n                    :content="getFieldTypeTitle(item)"\n                    placement="top"\n                    :show-after="500"\n                    :disabled="!isTextOverflow"\n                  >\n                    <div class="tooltip-trigger" @mouseenter="checkOverflow">{{ getFieldTypeTitle(item) }}</div>\n                  </el-tooltip>\n                </el-col>\n                <el-col :span="4">\n                  {{ item.required ? \'必填\' : \'非必填\' }}\n                </el-col>\n                <el-col :span="3" v-show="activeItem?.id === item.id" style="color: #2383ff">使用</el-col>\n              </el-row>\n            </div>\n          </el-scrollbar>\n        </div>\n        <div style="height: 18px; margin-top: 10px">\n          <s-others-icon name="hint" class="warningIcon"></s-others-icon>\n          <span>输入_，可进行词根匹配</span>\n        </div>\n      </div>\n    </el-popover>\n    \x3c!-- 添加至备选数据库字段库弹窗 --\x3e\n    <el-dialog v-model="reflowDialogVisible" title="一键添加到备选字段库" width="50%">\n      <el-table\n        ref="reflowTableRef"\n        :data="reflowFieldList"\n        @select="handleSelectReflowField"\n        @select-all="handleSelectReflowField"\n      >\n        <el-table-column type="selection" width="40" />\n        <el-table-column label="字段注释" prop="label" />\n        <el-table-column label="字段名" prop="name" />\n        <el-table-column label="数据类型" prop="type" />\n        <el-table-column label="是否必填" prop="required">\n          <template #default="scope">\n            <span>{{ scope.row.required ? \'是\' : \'否\' }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label="字段长度" prop="length">\n          <template #default="scope">\n            <span>{{ getReflowFieldLength(scope.row) }}</span>\n          </template>\n        </el-table-column>\n      </el-table>\n      <template #footer>\n        <div class="reflowDialogFooter">\n          <el-button\n            type="primary"\n            :disabled="reflowConfirmBtnDisabled"\n            :loading="confirmLoading"\n            @click="handleUploadReflowField"\n          >\n            确 定\n          </el-button>\n          <el-button @click="reflowDialogVisible = false">取 消</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\n  import { inject, onMounted, ref, nextTick } from \'vue\';\n  import { ElMessage, ClickOutside as vClickOutside } from \'element-plus\';\n  import { requestApi, getIsReflowField, getFieldList, getReflowFieldList, uploadReflowField } from \'../apis\';\n  import { debounce } from \'../utils\';\n\n  const props = defineProps({\n    entity: Object,\n  });\n\n  const handleAddItem = () => {\n    addItem();\n    nextTick(() => {\n      onSetItemEdit(selectedItem.value, \'label\', true);\n    });\n  };\n\n  const showReflowBtn = ref(false);\n\n  const reflowPopoverVisible = ref(false);\n  const fieldList = ref([]);\n  const reflowQuery = ref(\'\');\n  const abortController = ref(null);\n  const requestId = ref(0); // 用于标识当前请求\n\n  const debounceQueryFieldList = debounce(() => {\n    // 设置loading状态\n    reflowPopoverLoading.value = true;\n\n    // 取消之前的请求\n    if (abortController.value) {\n      abortController.value.abort();\n    }\n\n    // 创建新的 AbortController 和请求ID\n    abortController.value = new AbortController();\n    const currentRequestId = ++requestId.value;\n\n    getFieldList({ query: reflowQuery.value }, abortController.value.signal)\n      .then(res => {\n        // 只有当前请求是最新的才更新数据\n        if (currentRequestId === requestId.value) {\n          fieldList.value = res.result || [];\n        }\n      })\n      .catch(err => {\n        if (err.name !== \'AbortError\') {\n          console.error(err);\n        }\n      })\n      .finally(() => {\n        // 只有当前请求是最新的才更新加载状态\n        if (currentRequestId === requestId.value) {\n          abortController.value = null;\n          reflowPopoverLoading.value = false;\n        }\n      });\n  }, 400);\n\n  const reflowPopoverLoading = ref(false);\n  const activeItem = ref(null);\n\n  const getFieldName = (name, matchedNames) => {\n    if (!name || typeof name !== \'string\') return \'\';\n    if (!Array.isArray(matchedNames)) return `<span style="color: red; font-weight: bold;">${name}</span>`;\n\n    const matchedSet = new Set(matchedNames.filter(item => item && typeof item === \'string\'));\n    const parts = name.split(/(_+)/);\n\n    return parts\n      .map(part => {\n        if (part.startsWith(\'_\')) return part;\n        return matchedSet.has(part) ? part : `<span style="color: red; font-weight: bold;">${part}</span>`;\n      })\n      .join(\'\');\n  };\n\n  const getFieldTypeTitle = item => {\n    if (item.type === \'String\') {\n      const stringLabel = getStringLabel(item.length);\n      return item.type + (stringLabel ? `  (${stringLabel})` : \'\');\n    }\n    return item.type;\n  };\n\n  const columnNameValidatorRef = ref(null);\n\n  const handleUseField = item => {\n    const target = selectedItem.value?.naslNode;\n    if (target?.concept === \'EntityProperty\') {\n      target.app.emit(\'collect:start\', { actionMsg: \'数据建模插件更新字段名\' });\n      const newName = target.parentNode?.getPropertyUniqueName?.(item.name) || item.name; // 保证字段名唯一\n      const typeName = item.type === \'Integer\' ? \'Long\' : item.type;\n      const updateData = {\n        name: newName,\n        columnName: newName,\n        required: item.required,\n        typeAnnotation: {\n          concept: \'TypeAnnotation\',\n          typeKind: \'primitive\',\n          typeNamespace: \'nasl.core\',\n          typeName,\n        },\n      };\n      if (item.type === \'String\' && item.length) {\n        const minRule = target.toJSON().rules.find(rule => rule.startsWith(\'minLength\'));\n        Object.assign(updateData, {\n          databaseTypeAnnotation: {\n            concept: \'DatabaseTypeAnnotation\',\n            typeName: \'varchar\',\n            arguments: {\n              length: item.length,\n            },\n          },\n          rules: [minRule, `maxLength(${item.length})`].filter(Boolean),\n        });\n      }\n      target.update(updateData);\n      setTimeout(() => {\n        // 延迟收集，把外层onBlurLabel的change也收集到这次的batchInstruct中\n        target.app.emit(\'collect:end\');\n      });\n\n      nextTick(async () => {\n        try {\n          const res = await columnNameValidatorRef.value?.validate();\n        } catch (error) {\n          // console.error(error);\n          // 新设置的字段名不符合规则，主动聚焦到输入框\n          onSetItemEdit(selectedItem.value, \'name\', true);\n        }\n      });\n    }\n  };\n\n  const handleLabelFocus = label => {\n    reflowQuery.value = label;\n  };\n\n  const handleLabelBlur = async (event, slotProps, item) => {\n    reflowPopoverVisible.value = false;\n    reflowQuery.value = \'\';\n    fieldList.value = [];\n\n    event = event.replace(/_/g, \'\'); // event 去除掉_\n\n    slotProps.blurFn(event); // 触发模版中原来的失焦逻辑\n    if (activeItem.value) {\n      handleUseField(activeItem.value);\n      activeItem.value = null;\n    }\n  };\n\n  const handleLabelInput = (event, slotProps) => {\n    reflowPopoverVisible.value = true;\n    reflowQuery.value = event;\n    slotProps.inputChange(event); // 触发模版中原有的修改逻辑\n    // 外置设置防抖查询loading状态\n    reflowPopoverLoading.value = true;\n    debounceQueryFieldList();\n  };\n\n  onMounted(() => {\n    getIsReflowField({}).then(res => {\n      showReflowBtn.value = res.result;\n    });\n  });\n\n  // 一键添加到备选字段库\n  const reflowLoading = ref(false);\n  const reflowFieldList = ref([]);\n\n  const addReflowField = () => {\n    reflowLoading.value = true;\n\n    const filterList = [\'id\', \'createdTime\', \'updatedTime\', \'createdBy\', \'updatedBy\'];\n    const filterRegex = /^property\\d+$|^.*[\\u4e00-\\u9fa5].*$/;\n\n    const properties = props.entity?.toJSON()?.properties || [];\n    const tempReflowFieldList = [];\n    const nameSet = new Set();\n    properties.forEach(property => {\n      if (\n        !property.label ||\n        filterList.includes(property.name) ||\n        filterRegex.test(property.name) ||\n        property.typeAnnotation?.typeKind !== \'primitive\'\n      ) {\n        return;\n      }\n      let type = property.typeAnnotation?.typeName || \'String\';\n      if (type === \'Long\') type = \'Integer\'; // 整数类型需要重命名为Integer\n      const propertyName = property.name.replace(/\\d+$/, \'\') || \'\';\n      if (nameSet.has(propertyName)) {\n        return;\n      }\n      nameSet.add(propertyName);\n      tempReflowFieldList.push({\n        name: propertyName,\n        label: property.label || \'\',\n        required: property.required || false,\n        type,\n        length: type === \'String\' ? property.databaseTypeAnnotation?.arguments?.length || 255 : void 0,\n      });\n    });\n    reflowFieldList.value = tempReflowFieldList;\n    if (reflowFieldList.length === 0) {\n      reflowLoading.value = false;\n      showMessage();\n      return;\n    }\n\n    // 备选库不需要校验字段唯一性，直接打开弹窗\n    requestApi(\n      getReflowFieldList,\n      {\n        list: tempReflowFieldList.map(item => ({\n          name: item.name,\n          label: item.label,\n        })),\n      },\n      res => {\n        if (res.result?.length === 0) {\n          showMessage();\n          return;\n        } else {\n          // 只有在res.result中的name，在tempReflowFieldList中存在，才显示\n          const set = new Set(res.result);\n          reflowFieldList.value = tempReflowFieldList.filter(item => set.has(item.name));\n          reflowDialogVisible.value = true;\n          nextTick(() => {\n            reflowConfirmBtnDisabled.value = false;\n            reflowTableRef.value.toggleAllSelection();\n          });\n        }\n      },\n      err => {\n        console.error(err);\n      },\n      () => {\n        reflowLoading.value = false;\n      }\n    );\n    // reflowDialogVisible.value = true;\n    // reflowLoading.value = false;\n    // nextTick(() => {\n    //   reflowConfirmBtnDisabled.value = false;\n    //   reflowTableRef.value.toggleAllSelection();\n    // });\n  };\n\n  // 显示[暂无可回流到备选数据库的字段]消息\n  const showMessage = (type = \'warning\', msg = \'暂无可回流到备选数据库的字段\') => {\n    ElMessage.closeAll();\n    ElMessage[type](msg);\n  };\n\n  const reflowDialogVisible = ref(false);\n  const reflowTableRef = ref(null);\n\n  const getStringLabel = length => {\n    const map = {\n      255: \'短 255\',\n      4000: \'中 4000\',\n      16777215: \'长 16777215\',\n    };\n    return map[length] || length;\n  };\n  const getReflowFieldLength = row => {\n    return row.type === \'String\' ? getStringLabel(row.length) : \'-\';\n  };\n\n  const reflowConfirmBtnDisabled = ref(false);\n  const isTextOverflow = ref(false);\n\n  // 检测文本是否溢出\n  const checkOverflow = event => {\n    const element = event.target;\n    isTextOverflow.value = element.scrollWidth > element.clientWidth;\n  };\n  const handleSelectReflowField = (selection, row) => {\n    reflowConfirmBtnDisabled.value = selection.length === 0;\n  };\n\n  const confirmLoading = ref(false);\n  const handleUploadReflowField = () => {\n    confirmLoading.value = true;\n    const selectedList = reflowTableRef.value.getSelectionRows();\n    requestApi(\n      uploadReflowField,\n      {\n        list: selectedList,\n      },\n      res => {\n        if (res.result) {\n          showMessage(\'success\', \'添加成功\');\n          reflowDialogVisible.value = false;\n        } else {\n          showMessage(\'error\', res.msg || \'添加失败\');\n        }\n      },\n      err => {\n        // console.error(err);\n        showMessage(\'error\', err);\n      },\n      () => {\n        confirmLoading.value = false;\n      }\n    );\n  };\n\n  const {\n    /**\n     * 名称输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    nameEditor,\n    /**\n     * 标题输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    labelEditor,\n    /**\n     * 描述输入框节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    descriptionEditor,\n    /**\n     * 表格节点\n     *\n     * @type {Vue.ref<HTMLElement>}\n     */\n    tableviewRef,\n    /**\n     * 数据库视图导入生成的实体\n     * entity 的 origin 属性是否是 view\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isViewEntity,\n    /**\n     * 添加实体属性\n     *\n     * @function\n     */\n    addItem,\n    /**\n     * 生成移除按钮的提示\n     *\n     * @function\n     * @return string\n     */\n    getRemoveTooltip,\n    /**\n     * 表格选中的行元素\n     *\n     * @type {Vue.computed<object>}\n     */\n    selectedItem,\n    /**\n     * 是否是官方实体属性\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntityProperty,\n    /**\n     * 移除实体索引\n     *\n     * @function\n     * @param item - 需要删除的行元素\n     */\n    removeItem,\n    /**\n     * 表格的渲染数据\n     *\n     * @type {Vue.computed<array>}\n     */\n    renderList,\n    /**\n     * 上移当前选中的实体索引\n     *\n     * @function\n     */\n    moveUpItem,\n    /**\n     * 下移当前选中的实体索引\n     *\n     * @function\n     */\n    moveDownItem,\n    /**\n     * 表格高度\n     *\n     * @type {Vue.computed<number>}\n     */\n    tableHeight,\n    /**\n     * 设置表单列的样式\n     *\n     * @function\n     */\n    setRowClassName,\n    /**\n     * 右键选中表格行元素\n     *\n     * @function\n     */\n    onContextMenuRow,\n    /**\n     * 选中行元素时触发\n     *\n     * @function\n     * @param item - 行元素\n     */\n    onSelectRowWithDataType,\n    /**\n     * 拖拽调整表格列宽度\n     *\n     * @function\n     * @param newWidth - 新宽度\n     * @param oldWidth - 旧宽度\n     * @param column - 列元素\n     */\n    handleDragend,\n    /**\n     * 是否禁止编辑行元素\n     *\n     * @function\n     * @param item - 行元素\n     */\n    getDisable,\n    /**\n     * 设置表格列元素编辑状态\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 属性名称\n     * @param focus - 是否选中输入框\n     */\n    onSetItemEdit,\n    /**\n     * Tab 键跳转切换下一个属性\n     *\n     * @function\n     * @param event - 原生键盘事件\n     * @param item - 行元素\n     * @param name - 属性名称\n     */\n    onKeyUp,\n    /**\n     * 名称输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的名称\n     */\n    onBlurName,\n    /**\n     * 验证不通过时滚动到错误元素\n     */\n    errorScrollIntoView,\n    /**\n     * 存在错误\n     *\n     * @type {Vue.ref<boolean>}\n     */\n    hasInvalid,\n    /**\n     * 显示输入框的提示\n     *\n     * @type {Vue.ref<string>}\n     */\n    tooltipOpened,\n    /**\n     * 属性名，暂时存储属性名，用于输入框输入等操作\n     *\n     * @type {Vue.ref<string>}\n     */\n    itemNameValue,\n    /**\n     * 输入框获取焦点时触发\n     *\n     * 1. 设置tooltipOpened的值\n     * 2. 设置itemNameValue\n     *\n     * @function\n     * @param item - 当前行元素\n     */\n    onFocusName,\n    /**\n     * 标题输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的标题\n     */\n    onBlurLabel,\n    /**\n     * 是否应用正在发布\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isAppDeploying,\n    /**\n     * 是否实体已经发布过并且是复合类型\n     *\n     * 1. 实体已经发布过，在app下的depEntities可以找到该实体\n     * 2. 实体是复合类型：\'Map\', \'List\'，或者typeKind是reference并且namespace是\'entities\', \'structures\'\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isPublishedComplexType,\n    /**\n     * 数据类型的标题\n     *\n     * @function\n     * @param item - 行元素\n     * @return string\n     */\n    showDatatype,\n    /**\n     * 双击编辑数据类型输入框\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - 原生事件\n     */\n    onDblClickDatatype,\n    /**\n     * 获取可选类型\n     *\n     * @function\n     * @return 可选类型\n     */\n    getDataTypeList,\n    /**\n     * 失焦时取消当前行元素编辑状态\n     *\n     * @function\n     * @param item - 行元素\n     */\n    handleBlur,\n    /**\n     * 修改实体属性类型\n     *\n     * @function\n     * @param event - event.value 实际使用数据\n     */\n    onChangeDatatype,\n    /**\n     * 是否属于官方实体\n     *\n     * @function\n     * @param entityProperty - 实体属性\n     * @return boolean\n     */\n    isOfficalEntity,\n    /**\n     * 复合类型\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    isComplexType,\n    /**\n     * 修改是否必填\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkbox 原生事件\n     */\n    requireInput,\n    /**\n     * 能否设置默认值\n     *\n     * @function\n     * @param property - 实体属性\n     * @return boolean\n     */\n    canSetDefaultValue,\n    /**\n     * 对应节点是否有错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    IsError,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inTable,\n    /**\n     * 全部勾选或者取消全部勾选\n     *\n     * @function\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    toggleSelectAll,\n    /**\n     * 设置显示属性\n     *\n     * @function\n     * @param item - 行元素\n     * @param event - el-checkhox 原生事件\n     * @param key - 属性名\n     */\n    setDisplay,\n    /**\n     * 显示在筛选\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inFilter,\n    /**\n     * 显示在表格\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inForm,\n    /**\n     * 显示在详情\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    inDetail,\n    /**\n     * ElementPlus 的 popper 配置\n     */\n    popperOptions,\n    /**\n     * 右键菜单选中项\n     *\n     * @type {Vue.ref<object>}\n     */\n    menuSelectedItem,\n    /**\n     * 项对应的右键菜单是否存在\n     */\n    popperExistMap,\n    /**\n     * 项对应的右键菜单是否显示\n     */\n    popperVisibleMap,\n    /**\n     * 右键菜单的触发节点\n     */\n    triggerRef,\n    /**\n     * 右键菜单的出现位置\n     */\n    placement,\n    /**\n     * 右键菜单隐藏时的处理函数\n     */\n    onMenuPopperHide,\n    /**\n     * 菜单点击时\n     */\n    onMenuClick,\n    /**\n     * 菜单-查找引用\n     *\n     * @function\n     */\n    onMenuFindUsage,\n    /**\n     * 菜单-删除\n     *\n     * @function\n     */\n    onMenuDelete,\n    /**\n     * 实体属性数据类型\n     *\n     * @type {Vue.computed<string>}\n     */\n    typeName,\n    /**\n     * 小数位数的校验错误信息\n     *\n     * @type {Vue.computed<string>}\n     */\n    scaleErrorMsg,\n    /**\n     * 属性的响应式数据\n     *\n     * @type {Vue.reactive<object>}\n     * @property scale - 小数位数\n     */\n    model,\n    /**\n     * 小数位数的范围\n     *\n     * @type {Vue.computed<object>}\n     * @property min - 最小值\n     * @property max - 最大值\n     */\n    scaleOption,\n    /**\n     * 是否禁用小数位数\n     *\n     * @function\n     * @param item - 行元素\n     * @return boolean\n     */\n    decimalDisabled,\n    /**\n     * 修改小数位数\n     *\n     * @function\n     */\n    setScale,\n    /**\n     * 关联属性\n     *\n     * @type {Vue.ref<string>}\n     */\n    entityReference,\n    /**\n     * 类型列表\n     *\n     * @type {Vue.ref<array>}\n     */\n    dataTypeList,\n    /**\n     * 关联实体存在错误\n     *\n     * @function\n     * @param node - 节点\n     * @return boolean\n     */\n    isReleationEntityError,\n    /**\n     * 设置关联属性\n     *\n     * @function\n     * @param event - event.value 表示实际数据\n     */\n    onSaveReference,\n    /**\n     * 清除关联属性\n     *\n     * @function\n     */\n    onClearReference,\n    /**\n     * 设置关联属性实体记录删除规则\n     *\n     * @function\n     * @param event - 选中事件对象\n     */\n    setDeleteRule,\n    /**\n     * 设置错误信息\n     *\n     * @function\n     * @param errorMsgs - 错误信息\n     */\n    changeErrorMsgs,\n    /**\n     * 是否来源于数据库表/excel\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    isTableOrExcelOrigin,\n    /**\n     * 描述输入框失焦并保存数据\n     *\n     * @function\n     * @param item - 当前行元素\n     * @param name - 需要保存的描述\n     */\n    onBlurDescription,\n    /**\n     * 是否显示数据库高级设置\n     *\n     * 1.没有设置数据源\n     * 2.实体是excel导入或者数据源反向导入\n     * 3.权限实体（贤宇说一直是以LCAP开头来判断的）\n     * 这3种情况不显示数据库设置\n     *\n     * @type {Vue.computed<boolean>}\n     */\n    showDatabasetype,\n    /**\n     * 实体在同步数据源时产生的错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    sourceSyncErrMsgs,\n    /**\n     * 错误信息\n     *\n     * @type {Vue.computed<array>}\n     */\n    errorMsgs,\n    /**\n     * 数据库列名校验规则\n     *\n     * @type {Vue.computed<object>}\n     */\n    entityPropertyColumnNameRules,\n    /**\n     * 数据库列名输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyColumnNamePlaceholder,\n    /**\n     * 生成名称校验规则\n     *\n     * @function\n     * @param node - 节点\n     * @return 名称校验规则\n     */\n    getEntityPropertyRules,\n    /**\n     * 名称输入框占位符\n     *\n     * @type {Vue.computed<string>}\n     */\n    entityPropertyPlaceholder,\n    /**\n     * 设置选中行的数据类型\n     *\n     * @function\n     * @param value - 数据类型\n     */\n    setDataType,\n  } = inject(\'$context\');\n<\/script>\n\n<style module="$propertyDesigner">\n  .errorMsg {\n    color: var(--designer-font-second-color);\n    margin: 0 46px;\n  }\n\n  .errorMsg + .errorMsg {\n    margin-top: 10px;\n  }\n\n  .infoicon {\n    display: inline-block;\n    height: 12px;\n    width: 12px;\n    background: var(--assets-warning-info-svg) no-repeat;\n    background-size: 100% 100%;\n    vertical-align: -1px;\n    margin-right: 5px;\n  }\n</style>\n\n<style module>\n  div.table [class^=\'u-input__\']:focus,\n  div.table [class^=\'u-input__\'][focus],\n  div.table [class^=\'u-input__\']:hover,\n  div.table [class^=\'u-select__\']:focus,\n  div.table [class^=\'u-select__\'][focus],\n  div.table [class^=\'u-select__\'][opened],\n  div.table [class^=\'u-select__\']:hover {\n    border-color: var(--entity-designer-table-input-focus-border-color);\n    box-shadow: var(--entity-designer-table-input-focus-box-shadow);\n  }\n\n  .head {\n    margin: 16px;\n    padding: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n  }\n\n  div.head [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  .body {\n    margin: 16px;\n    background: var(--entity-designer-panel-background-color);\n    border: 1px solid var(--entity-designer-border-color);\n    overflow: hidden;\n  }\n\n  .entityListIcon {\n    width: 16px;\n    height: 16px;\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .edit {\n    display: inline-block;\n    width: 100%;\n    line-height: 38px;\n  }\n\n  .edit:hover {\n    cursor: pointer;\n  }\n\n  .edit:focus {\n    outline: none;\n  }\n\n  .edit .text > span {\n    color: var(--entity-designer-table-color);\n  }\n\n  .edit .text {\n    display: inline-block;\n    vertical-align: middle;\n  }\n\n  .editwrap {\n    margin-left: -9px;\n  }\n\n  .editwrap [class^=\'s-datatype-select__\'] {\n    vertical-align: middle;\n  }\n\n  .text {\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n  }\n\n  .textContent {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-break: break-all;\n    max-width: calc(100% - 28px);\n    margin-right: 8px;\n  }\n  .textContent:empty {\n    display: none;\n  }\n\n  .text > span {\n    display: inline-block;\n    color: var(--entity-designer-table-disabled-color);\n    vertical-align: middle;\n  }\n\n  .validator {\n    width: 100%;\n  }\n\n  .btnnav {\n    border-bottom: 1px solid var(--entity-designer-border-color);\n    border-top: 1px solid var(--entity-designer-border-color);\n    padding: 5px 24px;\n  }\n\n  div.btnnav[direction=\'horizontal\'][gap=\'small\'] > :not(:last-child) {\n    margin-right: 8px;\n  }\n\n  .btnnav1 {\n    border-top: none;\n    background-color: var(--entity-designer-btnnav-background);\n  }\n\n  .bodywrap {\n    padding: 16px 24px 0;\n    overflow-x: auto;\n    overflow-y: hidden;\n    margin-bottom: 24px;\n  }\n\n  div.bodywrap [class^=\'u-grid-layout_column__\'] {\n    padding-bottom: 0;\n  }\n\n  .bodywrap1 {\n    padding: 16px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .advancedWrap {\n    padding: 10px 24px 25px 24px;\n    background-color: var(--entity-designer-body-background);\n  }\n\n  .entityfrom [class^=\'u-form_item_label__\'] {\n    width: 36px !important;\n  }\n\n  div.input {\n    width: 100%;\n    margin-right: 12px;\n  }\n\n  .iconBase {\n    display: inline-block;\n    width: 20px;\n    height: 38px;\n    line-height: 38px;\n    text-align: center;\n    font-size: var(--font-size-large);\n    font-size: 14px;\n  }\n\n  .iconKey {\n    color: var(--designer-table-edit-icon-key-color);\n  }\n\n  .iconLink {\n    color: var(--designer-table-edit-icon-link-color);\n  }\n\n  .iconEdit {\n    color: var(--color-base);\n    opacity: 0;\n  }\n\n  .iconLink2 {\n    display: inline-block;\n    width: 16px;\n    height: 16px;\n    line-height: 16px;\n    font-size: var(--font-size-huge);\n    color: var(--brand-primary);\n    cursor: pointer;\n    position: relative;\n    top: 2px;\n    left: 4px;\n  }\n\n  .edit:hover .iconEdit {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n\n  .edit:hover .iconEdit:hover {\n    opacity: 1;\n  }\n\n  .icon {\n    width: 14px;\n    height: 14px;\n    display: inline-block;\n    vertical-align: middle;\n    background-repeat: no-repeat;\n  }\n\n  div.normalfrom [class^=\'u-form_item_label__\'] {\n    width: 60px !important;\n  }\n\n  div.normalfrom > div {\n    margin-bottom: 16px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'],\n  div.normalfrom [class^=\'u-select__\'],\n  div.normalfrom [class^=\'u-form_item_field__\'],\n  div.normalfrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.normalfrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom [class^=\'u-form_item_label__\'] {\n    width: 94px !important;\n  }\n\n  div.reffrom [class^=\'u-input__\'],\n  div.reffrom [class^=\'u-tree-select__\'],\n  div.reffrom [class^=\'u-select__\'],\n  div.reffrom [class^=\'u-form_item_field__\'],\n  div.reffrom [class^=\'u-form_item_wrap__\'] {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  div.reffrom [class^=\'u-input__\'] {\n    height: 32px;\n    line-height: 30px;\n  }\n\n  div.reffrom .text {\n    opacity: 0.3;\n  }\n\n  div.reffrom [class^=\'u-form_item_extra__\'] {\n    width: 12px;\n  }\n\n  .flexgrid {\n    display: flex;\n  }\n\n  .gridcolumn {\n    width: auto;\n  }\n\n  .gridcolumn:not(:last-child) {\n    margin-right: 24px;\n  }\n\n  div.fixedwidthinput,\n  div.textarea {\n    width: 240px;\n    max-width: 240px;\n  }\n\n  .icondivider {\n    color: var(--entity-designer-border-color);\n  }\n\n  .advanced {\n    padding-top: 10px;\n  }\n\n  .scaleErrorMsg {\n    position: absolute;\n    color: rgb(242, 73, 87);\n  }\n  .typeError {\n    border-radius: 4px;\n    border: 1px solid var(--input-border-color-error);\n  }\n  .checkbox [class=\'el-checkbox__label\'] {\n    line-height: 23px;\n    font-size: 12px;\n    text-overflow: ellipsis;\n    text-align: left;\n    font-weight: 600;\n    color: var(--el-table-header-text-color);\n  }\n  .checkbolabel [class=\'el-checkbox__label\'] {\n    line-height: 23px !important;\n    font-size: 12px !important;\n    text-overflow: ellipsis !important;\n    text-align: left !important;\n    font-weight: 600 !important;\n    color: var(--el-table-header-text-color) !important;\n  }\n  .checkbox {\n    height: 23px;\n    line-height: 23px;\n  }\n</style>\n<style module="$contextmenu">\n  .menu {\n    margin-top: 0 !important;\n  }\n\n  .menu .group [class^=\'el-menu-item-group__title\'] {\n    --el-menu-text-color: var(--el-menu-top-title-text-color);\n    height: 32px;\n    font-weight: bold;\n    border-bottom: 1px solid var(--line-color-regular);\n    background: var(--fill-color-thead);\n    color: var(--el-menu-text-color);\n    cursor: auto;\n  }\n</style>\n\n<style scoped>\n  .tableCell :deep(.cell) {\n    padding: 0;\n    line-height: 20px;\n    padding-left: 6px;\n  }\n  .theadLable {\n    overflow: visible;\n    width: 100%;\n    padding-left: 6px;\n    border-right: 1px solid var(--entity-designer-property-dragger-border-color);\n  }\n  .topIconGroup {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 8px;\n    background-color: var(--entity-designer-icon-group-background-color);\n    padding: 5px 24px;\n    border-bottom: 1px solid var(--entity-designer-icon-group-border-color);\n    position: sticky;\n    z-index: 9;\n    top: 64px;\n  }\n\n  .icon {\n    margin-right: 8px;\n  }\n\n  .extraForm :deep(.el-form-item__label) {\n    font-size: 12px;\n  }\n\n  :deep(.row-style) {\n    border: 1px solid #4d87fe;\n  }\n\n  :deep(.cell-style) {\n    border-bottom: 1px solid #409eff;\n  }\n\n  .elFormFlex {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n</style>\n\n<style scoped>\n  .reflowPopover {\n    width: 340px;\n    padding: 8px;\n  }\n\n  .reflowPopoverEmpty {\n    padding: 20px 0 30px;\n  }\n\n  .reflowPopoverItem {\n    height: 48px;\n    line-height: 48px;\n    padding: 0 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    &:hover {\n      background-color: #edf2f9;\n    }\n  }\n\n  .warningIcon {\n    margin-right: 4px;\n  }\n\n  .reflowDialogFooter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 居中对齐flex布局 */\n  .centerFlex {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  /* 单行文本溢出省略号 */\n  .sle,\n  [sle] {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  /* tooltip触发器样式 */\n  .tooltip-trigger {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n</style>\n'],sourceRoot:""}]),i.locals={menu:"EntityPropertyDesigner__menu--JM97v",group:"EntityPropertyDesigner__group--QOObs"};const r=i},448:(e,n,t)=>{t.d(n,{Z:()=>r});var l=t(481),o=t.n(l),a=t(966),i=t.n(a)()(o());i.push([e.id,"\n.index__button--UGVYE {\n    margin: 5px;\n}\n","",{version:3,sources:["webpack://./src/components/render/index.vue"],names:[],mappings:";AAiBE;IACE,WAAW;AACb",sourcesContent:['<template>\n  \x3c!-- 实体属性编辑器 --\x3e\n  <skeleton-portal name="views/data/entity-property-designer/render" method="insert">\n    <template v-slot="props">\n      <EntityPropertyDesigner v-bind="props" />\n    </template>\n  </skeleton-portal>\n</template>\n\n<script setup>\n  import EntityPropertyDesigner from \'../EntityPropertyDesigner.vue\'\n  import { useAttrs } from \'vue\'\n\n  const attrs = useAttrs()\n<\/script>\n\n<style module>\n  .button {\n    margin: 5px;\n  }\n</style>\n'],sourceRoot:""}]),i.locals={button:"index__button--UGVYE"};const r=i},966:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t="",l=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),l&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),l&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t}).join("")},n.i=function(e,t,l,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(l)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);l&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},481:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},650:e=>{var n=[];function t(e){for(var t=-1,l=0;l<n.length;l++)if(n[l].identifier===e){t=l;break}return t}function l(e,l){for(var a={},i=[],r=0;r<e.length;r++){var s=e[r],d=l.base?s[0]+l.base:s[0],c=a[d]||0,p="".concat(d," ").concat(c);a[d]=c+1;var m=t(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==m)n[m].references++,n[m].updater(u);else{var f=o(u,l);l.byIndex=r,n.splice(r,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=l(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var r=t(a[i]);n[r].references--}for(var s=l(e,o),d=0;d<a.length;d++){var c=t(a[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=s}}},953:e=>{var n={};e.exports=function(e,t){var l=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!l)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");l.appendChild(t)}},88:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},174:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},968:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var l="";t.supports&&(l+="@supports (".concat(t.supports,") {")),t.media&&(l+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(l+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),l+=t.css,o&&(l+="}"),t.media&&(l+="}"),t.supports&&(l+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(l+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(l,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},971:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},149:(e,n)=>{n.Z=(e,n)=>{const t=e.__vccOpts||e;for(const[e,l]of n)t[e]=l;return t}}},n={};function t(l){var o=n[l];if(void 0!==o)return o.exports;var a=n[l]={id:l,exports:{}};return e[l](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var l in n)t.o(n,l)&&!t.o(e,l)&&Object.defineProperty(e,l,{enumerable:!0,get:n[l]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.nc=void 0;var l={};(()=>{t.r(l),t.d(l,{default:()=>Rt});var e={};t.r(e),t.d(e,{hasBrowserEnv:()=>ye,hasStandardBrowserEnv:()=>ge,hasStandardBrowserWebWorkerEnv:()=>be,navigator:()=>ve,origin:()=>he});const n=window.oppTools,o=window.Vue,a=window.ElementPlus;function i(e,n){return function(){return e.apply(n,arguments)}}const{toString:r}=Object.prototype,{getPrototypeOf:s}=Object,{iterator:d,toStringTag:c}=Symbol,p=(m=Object.create(null),e=>{const n=r.call(e);return m[n]||(m[n]=n.slice(8,-1).toLowerCase())});var m;const u=e=>(e=e.toLowerCase(),n=>p(n)===e),f=e=>n=>typeof n===e,{isArray:y}=Array,v=f("undefined");function g(e){return null!==e&&!v(e)&&null!==e.constructor&&!v(e.constructor)&&x(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const b=u("ArrayBuffer"),h=f("string"),x=f("function"),w=f("number"),A=e=>null!==e&&"object"==typeof e,N=e=>{if("object"!==p(e))return!1;const n=s(e);return!(null!==n&&n!==Object.prototype&&null!==Object.getPrototypeOf(n)||c in e||d in e)},k=u("Date"),E=u("File"),C=u("Blob"),I=u("FileList"),_=u("URLSearchParams"),[$,D,B,V]=["ReadableStream","Request","Response","Headers"].map(u);function L(e,n,{allOwnKeys:t=!1}={}){if(null==e)return;let l,o;if("object"!=typeof e&&(e=[e]),y(e))for(l=0,o=e.length;l<o;l++)n.call(null,e[l],l,e);else{if(g(e))return;const o=t?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(l=0;l<a;l++)i=o[l],n.call(null,e[i],i,e)}}function P(e,n){if(g(e))return null;n=n.toLowerCase();const t=Object.keys(e);let l,o=t.length;for(;o-- >0;)if(l=t[o],n===l.toLowerCase())return l;return null}const R="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,S=e=>!v(e)&&e!==R,F=(T="undefined"!=typeof Uint8Array&&s(Uint8Array),e=>T&&e instanceof T);var T;const M=u("HTMLFormElement"),O=(({hasOwnProperty:e})=>(n,t)=>e.call(n,t))(Object.prototype),q=u("RegExp"),z=(e,n)=>{const t=Object.getOwnPropertyDescriptors(e),l={};L(t,(t,o)=>{let a;!1!==(a=n(t,o,e))&&(l[o]=a||t)}),Object.defineProperties(e,l)},j=u("AsyncFunction"),U=(K="function"==typeof setImmediate,W=x(R.postMessage),K?setImmediate:W?(H=`axios@${Math.random()}`,Z=[],R.addEventListener("message",({source:e,data:n})=>{e===R&&n===H&&Z.length&&Z.shift()()},!1),e=>{Z.push(e),R.postMessage(H,"*")}):e=>setTimeout(e));var K,W,H,Z;const Y="undefined"!=typeof queueMicrotask?queueMicrotask.bind(R):"undefined"!=typeof process&&process.nextTick||U,Q={isArray:y,isArrayBuffer:b,isBuffer:g,isFormData:e=>{let n;return e&&("function"==typeof FormData&&e instanceof FormData||x(e.append)&&("formdata"===(n=p(e))||"object"===n&&x(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let n;return n="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&b(e.buffer),n},isString:h,isNumber:w,isBoolean:e=>!0===e||!1===e,isObject:A,isPlainObject:N,isEmptyObject:e=>{if(!A(e)||g(e))return!1;try{return 0===Object.keys(e).length&&Object.getPrototypeOf(e)===Object.prototype}catch(e){return!1}},isReadableStream:$,isRequest:D,isResponse:B,isHeaders:V,isUndefined:v,isDate:k,isFile:E,isBlob:C,isRegExp:q,isFunction:x,isStream:e=>A(e)&&x(e.pipe),isURLSearchParams:_,isTypedArray:F,isFileList:I,forEach:L,merge:function e(){const{caseless:n}=S(this)&&this||{},t={},l=(l,o)=>{const a=n&&P(t,o)||o;N(t[a])&&N(l)?t[a]=e(t[a],l):N(l)?t[a]=e({},l):y(l)?t[a]=l.slice():t[a]=l};for(let e=0,n=arguments.length;e<n;e++)arguments[e]&&L(arguments[e],l);return t},extend:(e,n,t,{allOwnKeys:l}={})=>(L(n,(n,l)=>{t&&x(n)?e[l]=i(n,t):e[l]=n},{allOwnKeys:l}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,n,t,l)=>{e.prototype=Object.create(n.prototype,l),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:n.prototype}),t&&Object.assign(e.prototype,t)},toFlatObject:(e,n,t,l)=>{let o,a,i;const r={};if(n=n||{},null==e)return n;do{for(o=Object.getOwnPropertyNames(e),a=o.length;a-- >0;)i=o[a],l&&!l(i,e,n)||r[i]||(n[i]=e[i],r[i]=!0);e=!1!==t&&s(e)}while(e&&(!t||t(e,n))&&e!==Object.prototype);return n},kindOf:p,kindOfTest:u,endsWith:(e,n,t)=>{e=String(e),(void 0===t||t>e.length)&&(t=e.length),t-=n.length;const l=e.indexOf(n,t);return-1!==l&&l===t},toArray:e=>{if(!e)return null;if(y(e))return e;let n=e.length;if(!w(n))return null;const t=new Array(n);for(;n-- >0;)t[n]=e[n];return t},forEachEntry:(e,n)=>{const t=(e&&e[d]).call(e);let l;for(;(l=t.next())&&!l.done;){const t=l.value;n.call(e,t[0],t[1])}},matchAll:(e,n)=>{let t;const l=[];for(;null!==(t=e.exec(n));)l.push(t);return l},isHTMLForm:M,hasOwnProperty:O,hasOwnProp:O,reduceDescriptors:z,freezeMethods:e=>{z(e,(n,t)=>{if(x(e)&&-1!==["arguments","caller","callee"].indexOf(t))return!1;const l=e[t];x(l)&&(n.enumerable=!1,"writable"in n?n.writable=!1:n.set||(n.set=()=>{throw Error("Can not rewrite read-only method '"+t+"'")}))})},toObjectSet:(e,n)=>{const t={},l=e=>{e.forEach(e=>{t[e]=!0})};return y(e)?l(e):l(String(e).split(n)),t},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(e,n,t){return n.toUpperCase()+t}),noop:()=>{},toFiniteNumber:(e,n)=>null!=e&&Number.isFinite(e=+e)?e:n,findKey:P,global:R,isContextDefined:S,isSpecCompliantForm:function(e){return!!(e&&x(e.append)&&"FormData"===e[c]&&e[d])},toJSONObject:e=>{const n=new Array(10),t=(e,l)=>{if(A(e)){if(n.indexOf(e)>=0)return;if(g(e))return e;if(!("toJSON"in e)){n[l]=e;const o=y(e)?[]:{};return L(e,(e,n)=>{const a=t(e,l+1);!v(a)&&(o[n]=a)}),n[l]=void 0,o}}return e};return t(e,0)},isAsyncFn:j,isThenable:e=>e&&(A(e)||x(e))&&x(e.then)&&x(e.catch),setImmediate:U,asap:Y,isIterable:e=>null!=e&&x(e[d])};function J(e,n,t,l,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",n&&(this.code=n),t&&(this.config=t),l&&(this.request=l),o&&(this.response=o,this.status=o.status?o.status:null)}Q.inherits(J,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Q.toJSONObject(this.config),code:this.code,status:this.status}}});const X=J.prototype,G={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{G[e]={value:e}}),Object.defineProperties(J,G),Object.defineProperty(X,"isAxiosError",{value:!0}),J.from=(e,n,t,l,o,a)=>{const i=Object.create(X);return Q.toFlatObject(e,i,function(e){return e!==Error.prototype},e=>"isAxiosError"!==e),J.call(i,e.message,n,t,l,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const ee=J;function ne(e){return Q.isPlainObject(e)||Q.isArray(e)}function te(e){return Q.endsWith(e,"[]")?e.slice(0,-2):e}function le(e,n,t){return e?e.concat(n).map(function(e,n){return e=te(e),!t&&n?"["+e+"]":e}).join(t?".":""):n}const oe=Q.toFlatObject(Q,{},null,function(e){return/^is[A-Z]/.test(e)}),ae=function(e,n,t){if(!Q.isObject(e))throw new TypeError("target must be an object");n=n||new FormData;const l=(t=Q.toFlatObject(t,{metaTokens:!0,dots:!1,indexes:!1},!1,function(e,n){return!Q.isUndefined(n[e])})).metaTokens,o=t.visitor||d,a=t.dots,i=t.indexes,r=(t.Blob||"undefined"!=typeof Blob&&Blob)&&Q.isSpecCompliantForm(n);if(!Q.isFunction(o))throw new TypeError("visitor must be a function");function s(e){if(null===e)return"";if(Q.isDate(e))return e.toISOString();if(Q.isBoolean(e))return e.toString();if(!r&&Q.isBlob(e))throw new ee("Blob is not supported. Use a Buffer instead.");return Q.isArrayBuffer(e)||Q.isTypedArray(e)?r&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function d(e,t,o){let r=e;if(e&&!o&&"object"==typeof e)if(Q.endsWith(t,"{}"))t=l?t:t.slice(0,-2),e=JSON.stringify(e);else if(Q.isArray(e)&&function(e){return Q.isArray(e)&&!e.some(ne)}(e)||(Q.isFileList(e)||Q.endsWith(t,"[]"))&&(r=Q.toArray(e)))return t=te(t),r.forEach(function(e,l){!Q.isUndefined(e)&&null!==e&&n.append(!0===i?le([t],l,a):null===i?t:t+"[]",s(e))}),!1;return!!ne(e)||(n.append(le(o,t,a),s(e)),!1)}const c=[],p=Object.assign(oe,{defaultVisitor:d,convertValue:s,isVisitable:ne});if(!Q.isObject(e))throw new TypeError("data must be an object");return function e(t,l){if(!Q.isUndefined(t)){if(-1!==c.indexOf(t))throw Error("Circular reference detected in "+l.join("."));c.push(t),Q.forEach(t,function(t,a){!0===(!(Q.isUndefined(t)||null===t)&&o.call(n,t,Q.isString(a)?a.trim():a,l,p))&&e(t,l?l.concat(a):[a])}),c.pop()}}(e),n};function ie(e){const n={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(e){return n[e]})}function re(e,n){this._pairs=[],e&&ae(e,this,n)}const se=re.prototype;se.append=function(e,n){this._pairs.push([e,n])},se.toString=function(e){const n=e?function(n){return e.call(this,n,ie)}:ie;return this._pairs.map(function(e){return n(e[0])+"="+n(e[1])},"").join("&")};const de=re;function ce(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function pe(e,n,t){if(!n)return e;const l=t&&t.encode||ce;Q.isFunction(t)&&(t={serialize:t});const o=t&&t.serialize;let a;if(a=o?o(n,t):Q.isURLSearchParams(n)?n.toString():new de(n,t).toString(l),a){const n=e.indexOf("#");-1!==n&&(e=e.slice(0,n)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}const me=class{constructor(){this.handlers=[]}use(e,n,t){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!t&&t.synchronous,runWhen:t?t.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Q.forEach(this.handlers,function(n){null!==n&&e(n)})}},ue={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},fe={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:de,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},ye="undefined"!=typeof window&&"undefined"!=typeof document,ve="object"==typeof navigator&&navigator||void 0,ge=ye&&(!ve||["ReactNative","NativeScript","NS"].indexOf(ve.product)<0),be="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,he=ye&&window.location.href||"http://localhost",xe={...e,...fe},we=function(e){function n(e,t,l,o){let a=e[o++];if("__proto__"===a)return!0;const i=Number.isFinite(+a),r=o>=e.length;return a=!a&&Q.isArray(l)?l.length:a,r?(Q.hasOwnProp(l,a)?l[a]=[l[a],t]:l[a]=t,!i):(l[a]&&Q.isObject(l[a])||(l[a]=[]),n(e,t,l[a],o)&&Q.isArray(l[a])&&(l[a]=function(e){const n={},t=Object.keys(e);let l;const o=t.length;let a;for(l=0;l<o;l++)a=t[l],n[a]=e[a];return n}(l[a])),!i)}if(Q.isFormData(e)&&Q.isFunction(e.entries)){const t={};return Q.forEachEntry(e,(e,l)=>{n(function(e){return Q.matchAll(/\w+|\[(\w*)]/g,e).map(e=>"[]"===e[0]?"":e[1]||e[0])}(e),l,t,0)}),t}return null},Ae={transitional:ue,adapter:["xhr","http","fetch"],transformRequest:[function(e,n){const t=n.getContentType()||"",l=t.indexOf("application/json")>-1,o=Q.isObject(e);if(o&&Q.isHTMLForm(e)&&(e=new FormData(e)),Q.isFormData(e))return l?JSON.stringify(we(e)):e;if(Q.isArrayBuffer(e)||Q.isBuffer(e)||Q.isStream(e)||Q.isFile(e)||Q.isBlob(e)||Q.isReadableStream(e))return e;if(Q.isArrayBufferView(e))return e.buffer;if(Q.isURLSearchParams(e))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(t.indexOf("application/x-www-form-urlencoded")>-1)return function(e,n){return ae(e,new xe.classes.URLSearchParams,{visitor:function(e,n,t,l){return xe.isNode&&Q.isBuffer(e)?(this.append(n,e.toString("base64")),!1):l.defaultVisitor.apply(this,arguments)},...n})}(e,this.formSerializer).toString();if((a=Q.isFileList(e))||t.indexOf("multipart/form-data")>-1){const n=this.env&&this.env.FormData;return ae(a?{"files[]":e}:e,n&&new n,this.formSerializer)}}return o||l?(n.setContentType("application/json",!1),function(e){if(Q.isString(e))try{return(0,JSON.parse)(e),Q.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const n=this.transitional||Ae.transitional,t=n&&n.forcedJSONParsing,l="json"===this.responseType;if(Q.isResponse(e)||Q.isReadableStream(e))return e;if(e&&Q.isString(e)&&(t&&!this.responseType||l)){const t=!(n&&n.silentJSONParsing)&&l;try{return JSON.parse(e)}catch(e){if(t){if("SyntaxError"===e.name)throw ee.from(e,ee.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:xe.classes.FormData,Blob:xe.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Q.forEach(["delete","get","head","post","put","patch"],e=>{Ae.headers[e]={}});const Ne=Ae,ke=Q.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Ee=Symbol("internals");function Ce(e){return e&&String(e).trim().toLowerCase()}function Ie(e){return!1===e||null==e?e:Q.isArray(e)?e.map(Ie):String(e)}function _e(e,n,t,l,o){return Q.isFunction(l)?l.call(this,n,t):(o&&(n=t),Q.isString(n)?Q.isString(l)?-1!==n.indexOf(l):Q.isRegExp(l)?l.test(n):void 0:void 0)}class $e{constructor(e){e&&this.set(e)}set(e,n,t){const l=this;function o(e,n,t){const o=Ce(n);if(!o)throw new Error("header name must be a non-empty string");const a=Q.findKey(l,o);(!a||void 0===l[a]||!0===t||void 0===t&&!1!==l[a])&&(l[a||n]=Ie(e))}const a=(e,n)=>Q.forEach(e,(e,t)=>o(e,t,n));if(Q.isPlainObject(e)||e instanceof this.constructor)a(e,n);else if(Q.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))a((e=>{const n={};let t,l,o;return e&&e.split("\n").forEach(function(e){o=e.indexOf(":"),t=e.substring(0,o).trim().toLowerCase(),l=e.substring(o+1).trim(),!t||n[t]&&ke[t]||("set-cookie"===t?n[t]?n[t].push(l):n[t]=[l]:n[t]=n[t]?n[t]+", "+l:l)}),n})(e),n);else if(Q.isObject(e)&&Q.isIterable(e)){let t,l,o={};for(const n of e){if(!Q.isArray(n))throw TypeError("Object iterator must return a key-value pair");o[l=n[0]]=(t=o[l])?Q.isArray(t)?[...t,n[1]]:[t,n[1]]:n[1]}a(o,n)}else null!=e&&o(n,e,t);return this}get(e,n){if(e=Ce(e)){const t=Q.findKey(this,e);if(t){const e=this[t];if(!n)return e;if(!0===n)return function(e){const n=Object.create(null),t=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let l;for(;l=t.exec(e);)n[l[1]]=l[2];return n}(e);if(Q.isFunction(n))return n.call(this,e,t);if(Q.isRegExp(n))return n.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,n){if(e=Ce(e)){const t=Q.findKey(this,e);return!(!t||void 0===this[t]||n&&!_e(0,this[t],t,n))}return!1}delete(e,n){const t=this;let l=!1;function o(e){if(e=Ce(e)){const o=Q.findKey(t,e);!o||n&&!_e(0,t[o],o,n)||(delete t[o],l=!0)}}return Q.isArray(e)?e.forEach(o):o(e),l}clear(e){const n=Object.keys(this);let t=n.length,l=!1;for(;t--;){const o=n[t];e&&!_e(0,this[o],o,e,!0)||(delete this[o],l=!0)}return l}normalize(e){const n=this,t={};return Q.forEach(this,(l,o)=>{const a=Q.findKey(t,o);if(a)return n[a]=Ie(l),void delete n[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(e,n,t)=>n.toUpperCase()+t)}(o):String(o).trim();i!==o&&delete n[o],n[i]=Ie(l),t[i]=!0}),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const n=Object.create(null);return Q.forEach(this,(t,l)=>{null!=t&&!1!==t&&(n[l]=e&&Q.isArray(t)?t.join(", "):t)}),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([e,n])=>e+": "+n).join("\n")}getSetCookie(){return this.get("set-cookie")||[]}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...n){const t=new this(e);return n.forEach(e=>t.set(e)),t}static accessor(e){const n=(this[Ee]=this[Ee]={accessors:{}}).accessors,t=this.prototype;function l(e){const l=Ce(e);n[l]||(function(e,n){const t=Q.toCamelCase(" "+n);["get","set","has"].forEach(l=>{Object.defineProperty(e,l+t,{value:function(e,t,o){return this[l].call(this,n,e,t,o)},configurable:!0})})}(t,e),n[l]=!0)}return Q.isArray(e)?e.forEach(l):l(e),this}}$e.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Q.reduceDescriptors($e.prototype,({value:e},n)=>{let t=n[0].toUpperCase()+n.slice(1);return{get:()=>e,set(e){this[t]=e}}}),Q.freezeMethods($e);const De=$e;function Be(e,n){const t=this||Ne,l=n||t,o=De.from(l.headers);let a=l.data;return Q.forEach(e,function(e){a=e.call(t,a,o.normalize(),n?n.status:void 0)}),o.normalize(),a}function Ve(e){return!(!e||!e.__CANCEL__)}function Le(e,n,t){ee.call(this,null==e?"canceled":e,ee.ERR_CANCELED,n,t),this.name="CanceledError"}Q.inherits(Le,ee,{__CANCEL__:!0});const Pe=Le;function Re(e,n,t){const l=t.config.validateStatus;t.status&&l&&!l(t.status)?n(new ee("Request failed with status code "+t.status,[ee.ERR_BAD_REQUEST,ee.ERR_BAD_RESPONSE][Math.floor(t.status/100)-4],t.config,t.request,t)):e(t)}const Se=(e,n,t=3)=>{let l=0;const o=function(e,n){e=e||10;const t=new Array(e),l=new Array(e);let o,a=0,i=0;return n=void 0!==n?n:1e3,function(r){const s=Date.now(),d=l[i];o||(o=s),t[a]=r,l[a]=s;let c=i,p=0;for(;c!==a;)p+=t[c++],c%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),s-o<n)return;const m=d&&s-d;return m?Math.round(1e3*p/m):void 0}}(50,250);return function(e,n){let t,l,o=0,a=1e3/n;const i=(n,a=Date.now())=>{o=a,t=null,l&&(clearTimeout(l),l=null),e(...n)};return[(...e)=>{const n=Date.now(),r=n-o;r>=a?i(e,n):(t=e,l||(l=setTimeout(()=>{l=null,i(t)},a-r)))},()=>t&&i(t)]}(t=>{const a=t.loaded,i=t.lengthComputable?t.total:void 0,r=a-l,s=o(r);l=a,e({loaded:a,total:i,progress:i?a/i:void 0,bytes:r,rate:s||void 0,estimated:s&&i&&a<=i?(i-a)/s:void 0,event:t,lengthComputable:null!=i,[n?"download":"upload"]:!0})},t)},Fe=(e,n)=>{const t=null!=e;return[l=>n[0]({lengthComputable:t,total:e,loaded:l}),n[1]]},Te=e=>(...n)=>Q.asap(()=>e(...n)),Me=xe.hasStandardBrowserEnv?((e,n)=>t=>(t=new URL(t,xe.origin),e.protocol===t.protocol&&e.host===t.host&&(n||e.port===t.port)))(new URL(xe.origin),xe.navigator&&/(msie|trident)/i.test(xe.navigator.userAgent)):()=>!0,Oe=xe.hasStandardBrowserEnv?{write(e,n,t,l,o,a){const i=[e+"="+encodeURIComponent(n)];Q.isNumber(t)&&i.push("expires="+new Date(t).toGMTString()),Q.isString(l)&&i.push("path="+l),Q.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function qe(e,n,t){let l=!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(n);return e&&(l||0==t)?function(e,n){return n?e.replace(/\/?\/$/,"")+"/"+n.replace(/^\/+/,""):e}(e,n):n}const ze=e=>e instanceof De?{...e}:e;function je(e,n){n=n||{};const t={};function l(e,n,t,l){return Q.isPlainObject(e)&&Q.isPlainObject(n)?Q.merge.call({caseless:l},e,n):Q.isPlainObject(n)?Q.merge({},n):Q.isArray(n)?n.slice():n}function o(e,n,t,o){return Q.isUndefined(n)?Q.isUndefined(e)?void 0:l(void 0,e,0,o):l(e,n,0,o)}function a(e,n){if(!Q.isUndefined(n))return l(void 0,n)}function i(e,n){return Q.isUndefined(n)?Q.isUndefined(e)?void 0:l(void 0,e):l(void 0,n)}function r(t,o,a){return a in n?l(t,o):a in e?l(void 0,t):void 0}const s={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:r,headers:(e,n,t)=>o(ze(e),ze(n),0,!0)};return Q.forEach(Object.keys({...e,...n}),function(l){const a=s[l]||o,i=a(e[l],n[l],l);Q.isUndefined(i)&&a!==r||(t[l]=i)}),t}const Ue=e=>{const n=je({},e);let t,{data:l,withXSRFToken:o,xsrfHeaderName:a,xsrfCookieName:i,headers:r,auth:s}=n;if(n.headers=r=De.from(r),n.url=pe(qe(n.baseURL,n.url,n.allowAbsoluteUrls),e.params,e.paramsSerializer),s&&r.set("Authorization","Basic "+btoa((s.username||"")+":"+(s.password?unescape(encodeURIComponent(s.password)):""))),Q.isFormData(l))if(xe.hasStandardBrowserEnv||xe.hasStandardBrowserWebWorkerEnv)r.setContentType(void 0);else if(!1!==(t=r.getContentType())){const[e,...n]=t?t.split(";").map(e=>e.trim()).filter(Boolean):[];r.setContentType([e||"multipart/form-data",...n].join("; "))}if(xe.hasStandardBrowserEnv&&(o&&Q.isFunction(o)&&(o=o(n)),o||!1!==o&&Me(n.url))){const e=a&&i&&Oe.read(i);e&&r.set(a,e)}return n},Ke="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise(function(n,t){const l=Ue(e);let o=l.data;const a=De.from(l.headers).normalize();let i,r,s,d,c,{responseType:p,onUploadProgress:m,onDownloadProgress:u}=l;function f(){d&&d(),c&&c(),l.cancelToken&&l.cancelToken.unsubscribe(i),l.signal&&l.signal.removeEventListener("abort",i)}let y=new XMLHttpRequest;function v(){if(!y)return;const l=De.from("getAllResponseHeaders"in y&&y.getAllResponseHeaders());Re(function(e){n(e),f()},function(e){t(e),f()},{data:p&&"text"!==p&&"json"!==p?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:l,config:e,request:y}),y=null}y.open(l.method.toUpperCase(),l.url,!0),y.timeout=l.timeout,"onloadend"in y?y.onloadend=v:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))&&setTimeout(v)},y.onabort=function(){y&&(t(new ee("Request aborted",ee.ECONNABORTED,e,y)),y=null)},y.onerror=function(){t(new ee("Network Error",ee.ERR_NETWORK,e,y)),y=null},y.ontimeout=function(){let n=l.timeout?"timeout of "+l.timeout+"ms exceeded":"timeout exceeded";const o=l.transitional||ue;l.timeoutErrorMessage&&(n=l.timeoutErrorMessage),t(new ee(n,o.clarifyTimeoutError?ee.ETIMEDOUT:ee.ECONNABORTED,e,y)),y=null},void 0===o&&a.setContentType(null),"setRequestHeader"in y&&Q.forEach(a.toJSON(),function(e,n){y.setRequestHeader(n,e)}),Q.isUndefined(l.withCredentials)||(y.withCredentials=!!l.withCredentials),p&&"json"!==p&&(y.responseType=l.responseType),u&&([s,c]=Se(u,!0),y.addEventListener("progress",s)),m&&y.upload&&([r,d]=Se(m),y.upload.addEventListener("progress",r),y.upload.addEventListener("loadend",d)),(l.cancelToken||l.signal)&&(i=n=>{y&&(t(!n||n.type?new Pe(null,e,y):n),y.abort(),y=null)},l.cancelToken&&l.cancelToken.subscribe(i),l.signal&&(l.signal.aborted?i():l.signal.addEventListener("abort",i)));const g=function(e){const n=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return n&&n[1]||""}(l.url);g&&-1===xe.protocols.indexOf(g)?t(new ee("Unsupported protocol "+g+":",ee.ERR_BAD_REQUEST,e)):y.send(o||null)})},We=(e,n)=>{const{length:t}=e=e?e.filter(Boolean):[];if(n||t){let t,l=new AbortController;const o=function(e){if(!t){t=!0,i();const n=e instanceof Error?e:this.reason;l.abort(n instanceof ee?n:new Pe(n instanceof Error?n.message:n))}};let a=n&&setTimeout(()=>{a=null,o(new ee(`timeout ${n} of ms exceeded`,ee.ETIMEDOUT))},n);const i=()=>{e&&(a&&clearTimeout(a),a=null,e.forEach(e=>{e.unsubscribe?e.unsubscribe(o):e.removeEventListener("abort",o)}),e=null)};e.forEach(e=>e.addEventListener("abort",o));const{signal:r}=l;return r.unsubscribe=()=>Q.asap(i),r}},He=function*(e,n){let t=e.byteLength;if(!n||t<n)return void(yield e);let l,o=0;for(;o<t;)l=o+n,yield e.slice(o,l),o=l},Ze=(e,n,t,l)=>{const o=async function*(e,n){for await(const t of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const n=e.getReader();try{for(;;){const{done:e,value:t}=await n.read();if(e)break;yield t}}finally{await n.cancel()}}(e))yield*He(t,n)}(e,n);let a,i=0,r=e=>{a||(a=!0,l&&l(e))};return new ReadableStream({async pull(e){try{const{done:n,value:l}=await o.next();if(n)return r(),void e.close();let a=l.byteLength;if(t){let e=i+=a;t(e)}e.enqueue(new Uint8Array(l))}catch(e){throw r(e),e}},cancel:e=>(r(e),o.return())},{highWaterMark:2})},Ye="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Qe=Ye&&"function"==typeof ReadableStream,Je=Ye&&("function"==typeof TextEncoder?(Xe=new TextEncoder,e=>Xe.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Xe;const Ge=(e,...n)=>{try{return!!e(...n)}catch(e){return!1}},en=Qe&&Ge(()=>{let e=!1;const n=new Request(xe.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!n}),nn=Qe&&Ge(()=>Q.isReadableStream(new Response("").body)),tn={stream:nn&&(e=>e.body)};var ln;Ye&&(ln=new Response,["text","arrayBuffer","blob","formData","stream"].forEach(e=>{!tn[e]&&(tn[e]=Q.isFunction(ln[e])?n=>n[e]():(n,t)=>{throw new ee(`Response type '${e}' is not supported`,ee.ERR_NOT_SUPPORT,t)})}));const on=Ye&&(async e=>{let{url:n,method:t,data:l,signal:o,cancelToken:a,timeout:i,onDownloadProgress:r,onUploadProgress:s,responseType:d,headers:c,withCredentials:p="same-origin",fetchOptions:m}=Ue(e);d=d?(d+"").toLowerCase():"text";let u,f=We([o,a&&a.toAbortSignal()],i);const y=f&&f.unsubscribe&&(()=>{f.unsubscribe()});let v;try{if(s&&en&&"get"!==t&&"head"!==t&&0!==(v=await(async(e,n)=>{const t=Q.toFiniteNumber(e.getContentLength());return null==t?(async e=>{if(null==e)return 0;if(Q.isBlob(e))return e.size;if(Q.isSpecCompliantForm(e)){const n=new Request(xe.origin,{method:"POST",body:e});return(await n.arrayBuffer()).byteLength}return Q.isArrayBufferView(e)||Q.isArrayBuffer(e)?e.byteLength:(Q.isURLSearchParams(e)&&(e+=""),Q.isString(e)?(await Je(e)).byteLength:void 0)})(n):t})(c,l))){let e,t=new Request(n,{method:"POST",body:l,duplex:"half"});if(Q.isFormData(l)&&(e=t.headers.get("content-type"))&&c.setContentType(e),t.body){const[e,n]=Fe(v,Se(Te(s)));l=Ze(t.body,65536,e,n)}}Q.isString(p)||(p=p?"include":"omit");const o="credentials"in Request.prototype;u=new Request(n,{...m,signal:f,method:t.toUpperCase(),headers:c.normalize().toJSON(),body:l,duplex:"half",credentials:o?p:void 0});let a=await fetch(u,m);const i=nn&&("stream"===d||"response"===d);if(nn&&(r||i&&y)){const e={};["status","statusText","headers"].forEach(n=>{e[n]=a[n]});const n=Q.toFiniteNumber(a.headers.get("content-length")),[t,l]=r&&Fe(n,Se(Te(r),!0))||[];a=new Response(Ze(a.body,65536,t,()=>{l&&l(),y&&y()}),e)}d=d||"text";let g=await tn[Q.findKey(tn,d)||"text"](a,e);return!i&&y&&y(),await new Promise((n,t)=>{Re(n,t,{data:g,headers:De.from(a.headers),status:a.status,statusText:a.statusText,config:e,request:u})})}catch(n){if(y&&y(),n&&"TypeError"===n.name&&/Load failed|fetch/i.test(n.message))throw Object.assign(new ee("Network Error",ee.ERR_NETWORK,e,u),{cause:n.cause||n});throw ee.from(n,n&&n.code,e,u)}}),an={http:null,xhr:Ke,fetch:on};Q.forEach(an,(e,n)=>{if(e){try{Object.defineProperty(e,"name",{value:n})}catch(e){}Object.defineProperty(e,"adapterName",{value:n})}});const rn=e=>`- ${e}`,sn=e=>Q.isFunction(e)||null===e||!1===e,dn=e=>{e=Q.isArray(e)?e:[e];const{length:n}=e;let t,l;const o={};for(let a=0;a<n;a++){let n;if(t=e[a],l=t,!sn(t)&&(l=an[(n=String(t)).toLowerCase()],void 0===l))throw new ee(`Unknown adapter '${n}'`);if(l)break;o[n||"#"+a]=l}if(!l){const e=Object.entries(o).map(([e,n])=>`adapter ${e} `+(!1===n?"is not supported by the environment":"is not available in the build"));let t=n?e.length>1?"since :\n"+e.map(rn).join("\n"):" "+rn(e[0]):"as no adapter specified";throw new ee("There is no suitable adapter to dispatch the request "+t,"ERR_NOT_SUPPORT")}return l};function cn(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Pe(null,e)}function pn(e){return cn(e),e.headers=De.from(e.headers),e.data=Be.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),dn(e.adapter||Ne.adapter)(e).then(function(n){return cn(e),n.data=Be.call(e,e.transformResponse,n),n.headers=De.from(n.headers),n},function(n){return Ve(n)||(cn(e),n&&n.response&&(n.response.data=Be.call(e,e.transformResponse,n.response),n.response.headers=De.from(n.response.headers))),Promise.reject(n)})}const mn="1.11.0",un={};["object","boolean","number","function","string","symbol"].forEach((e,n)=>{un[e]=function(t){return typeof t===e||"a"+(n<1?"n ":" ")+e}});const fn={};un.transitional=function(e,n,t){function l(e,n){return"[Axios v"+mn+"] Transitional option '"+e+"'"+n+(t?". "+t:"")}return(t,o,a)=>{if(!1===e)throw new ee(l(o," has been removed"+(n?" in "+n:"")),ee.ERR_DEPRECATED);return n&&!fn[o]&&(fn[o]=!0,console.warn(l(o," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(t,o,a)}},un.spelling=function(e){return(n,t)=>(console.warn(`${t} is likely a misspelling of ${e}`),!0)};const yn={assertOptions:function(e,n,t){if("object"!=typeof e)throw new ee("options must be an object",ee.ERR_BAD_OPTION_VALUE);const l=Object.keys(e);let o=l.length;for(;o-- >0;){const a=l[o],i=n[a];if(i){const n=e[a],t=void 0===n||i(n,a,e);if(!0!==t)throw new ee("option "+a+" must be "+t,ee.ERR_BAD_OPTION_VALUE);continue}if(!0!==t)throw new ee("Unknown option "+a,ee.ERR_BAD_OPTION)}},validators:un},vn=yn.validators;class gn{constructor(e){this.defaults=e||{},this.interceptors={request:new me,response:new me}}async request(e,n){try{return await this._request(e,n)}catch(e){if(e instanceof Error){let n={};Error.captureStackTrace?Error.captureStackTrace(n):n=new Error;const t=n.stack?n.stack.replace(/^.+\n/,""):"";try{e.stack?t&&!String(e.stack).endsWith(t.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+t):e.stack=t}catch(e){}}throw e}}_request(e,n){"string"==typeof e?(n=n||{}).url=e:n=e||{},n=je(this.defaults,n);const{transitional:t,paramsSerializer:l,headers:o}=n;void 0!==t&&yn.assertOptions(t,{silentJSONParsing:vn.transitional(vn.boolean),forcedJSONParsing:vn.transitional(vn.boolean),clarifyTimeoutError:vn.transitional(vn.boolean)},!1),null!=l&&(Q.isFunction(l)?n.paramsSerializer={serialize:l}:yn.assertOptions(l,{encode:vn.function,serialize:vn.function},!0)),void 0!==n.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?n.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:n.allowAbsoluteUrls=!0),yn.assertOptions(n,{baseUrl:vn.spelling("baseURL"),withXsrfToken:vn.spelling("withXSRFToken")},!0),n.method=(n.method||this.defaults.method||"get").toLowerCase();let a=o&&Q.merge(o.common,o[n.method]);o&&Q.forEach(["delete","get","head","post","put","patch","common"],e=>{delete o[e]}),n.headers=De.concat(a,o);const i=[];let r=!0;this.interceptors.request.forEach(function(e){"function"==typeof e.runWhen&&!1===e.runWhen(n)||(r=r&&e.synchronous,i.unshift(e.fulfilled,e.rejected))});const s=[];let d;this.interceptors.response.forEach(function(e){s.push(e.fulfilled,e.rejected)});let c,p=0;if(!r){const e=[pn.bind(this),void 0];for(e.unshift(...i),e.push(...s),c=e.length,d=Promise.resolve(n);p<c;)d=d.then(e[p++],e[p++]);return d}c=i.length;let m=n;for(p=0;p<c;){const e=i[p++],n=i[p++];try{m=e(m)}catch(e){n.call(this,e);break}}try{d=pn.call(this,m)}catch(e){return Promise.reject(e)}for(p=0,c=s.length;p<c;)d=d.then(s[p++],s[p++]);return d}getUri(e){return pe(qe((e=je(this.defaults,e)).baseURL,e.url,e.allowAbsoluteUrls),e.params,e.paramsSerializer)}}Q.forEach(["delete","get","head","options"],function(e){gn.prototype[e]=function(n,t){return this.request(je(t||{},{method:e,url:n,data:(t||{}).data}))}}),Q.forEach(["post","put","patch"],function(e){function n(n){return function(t,l,o){return this.request(je(o||{},{method:e,headers:n?{"Content-Type":"multipart/form-data"}:{},url:t,data:l}))}}gn.prototype[e]=n(),gn.prototype[e+"Form"]=n(!0)});const bn=gn;class hn{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let n;this.promise=new Promise(function(e){n=e});const t=this;this.promise.then(e=>{if(!t._listeners)return;let n=t._listeners.length;for(;n-- >0;)t._listeners[n](e);t._listeners=null}),this.promise.then=e=>{let n;const l=new Promise(e=>{t.subscribe(e),n=e}).then(e);return l.cancel=function(){t.unsubscribe(n)},l},e(function(e,l,o){t.reason||(t.reason=new Pe(e,l,o),n(t.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const n=this._listeners.indexOf(e);-1!==n&&this._listeners.splice(n,1)}toAbortSignal(){const e=new AbortController,n=n=>{e.abort(n)};return this.subscribe(n),e.signal.unsubscribe=()=>this.unsubscribe(n),e.signal}static source(){let e;return{token:new hn(function(n){e=n}),cancel:e}}}const xn=hn,wn={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(wn).forEach(([e,n])=>{wn[n]=e});const An=wn,Nn=function e(n){const t=new bn(n),l=i(bn.prototype.request,t);return Q.extend(l,bn.prototype,t,{allOwnKeys:!0}),Q.extend(l,t,null,{allOwnKeys:!0}),l.create=function(t){return e(je(n,t))},l}(Ne);Nn.Axios=bn,Nn.CanceledError=Pe,Nn.CancelToken=xn,Nn.isCancel=Ve,Nn.VERSION=mn,Nn.toFormData=ae,Nn.AxiosError=ee,Nn.Cancel=Nn.CanceledError,Nn.all=function(e){return Promise.all(e)},Nn.spread=function(e){return function(n){return e.apply(null,n)}},Nn.isAxiosError=function(e){return Q.isObject(e)&&!0===e.isAxiosError},Nn.mergeConfig=je,Nn.AxiosHeaders=De,Nn.formToJSON=e=>we(Q.isHTMLForm(e)?new FormData(e):e),Nn.getAdapter=dn,Nn.HttpStatusCode=An,Nn.default=Nn;const kn=Nn.create({});kn.interceptors.request.use(e=>e,e=>Promise.reject(e)),kn.interceptors.response.use(e=>e,e=>Promise.reject(e));const En=kn;function Cn(e,n,t=null){const l=t?{signal:t}:{};return En.get(e,{params:n,...l}).then(e=>e.data).catch(e=>{throw e})}function In(e,n){return En.post(e,n).then(e=>e.data).catch(e=>{throw e})}const _n="https://data-defaulttenant.lcp.auxgroup.com",$n=`${_n}/rest/getIsReflowField`,Dn=`${_n}/rest/getFieldList`,Bn=`${_n}/rest/getReflowFieldList`,Vn=`${_n}/rest/uploadReflowField`;function Ln(){}function Pn(e,n,t=Ln,l=Ln,o=Ln){e(n).then(e=>{t(e)}).catch(e=>{l(e)}).finally(()=>{o()})}function Rn(e){return In(Bn,{...e})}function Sn(e){return In(Vn,{...e})}const Fn=["onDblclick","onKeyup","title"],Tn=["title","onDblclick","onKeyup"],Mn=["title","onDblclick","onKeyup"],On={key:1,style:{"margin-left":"16px"}},qn={key:1},zn=["data-item-id"],jn=["data-item-id"],Un=["data-item-id"],Kn=["data-item-id"],Wn={style:{display:"flex","align-items":"center"}},Hn={class:"reflowPopover"},Zn={key:0,class:"reflowPopoverEmpty"},Yn={key:1},Qn=["onMouseenter"],Jn=["innerHTML"],Xn={style:{height:"18px","margin-top":"10px"}},Gn={class:"reflowDialogFooter"},et={__name:"EntityPropertyDesigner",props:{entity:Object},setup(e){const n=e,t=()=>{R(),(0,o.nextTick)(()=>{Y(F.value,"label",!0)})},l=(0,o.ref)(!1),i=(0,o.ref)(!1),r=(0,o.ref)([]),s=(0,o.ref)(""),d=(0,o.ref)(null),c=(0,o.ref)(0),p=function(e,n=150){let t;return function(...l){clearTimeout(t),t=setTimeout(()=>e.apply(this,l),n)}}(()=>{m.value=!0,d.value&&d.value.abort(),d.value=new AbortController;const e=++c.value;(function(e,n=null){return Cn(Dn,{...e},n)})({query:s.value},d.value.signal).then(n=>{e===c.value&&(r.value=n.result||[])}).catch(e=>{"AbortError"!==e.name&&console.error(e)}).finally(()=>{e===c.value&&(d.value=null,m.value=!1)})},400),m=(0,o.ref)(!1),u=(0,o.ref)(null),f=(e,n)=>{if(!e||"string"!=typeof e)return"";if(!Array.isArray(n))return`<span style="color: red; font-weight: bold;">${e}</span>`;const t=new Set(n.filter(e=>e&&"string"==typeof e));return e.split(/(_+)/).map(e=>e.startsWith("_")||t.has(e)?e:`<span style="color: red; font-weight: bold;">${e}</span>`).join("")},y=e=>{if("String"===e.type){const n=N(e.length);return e.type+(n?`  (${n})`:"")}return e.type},v=(0,o.ref)(null);(0,o.onMounted)(()=>{var e;(e={},Cn($n,{...e})).then(e=>{l.value=e.result})});const g=(0,o.ref)(!1),b=(0,o.ref)([]),h=()=>{g.value=!0;const e=["id","createdTime","updatedTime","createdBy","updatedBy"],t=/^property\d+$|^.*[\u4e00-\u9fa5].*$/,l=n.entity?.toJSON()?.properties||[],a=[],i=new Set;if(l.forEach(n=>{if(!n.label||e.includes(n.name)||t.test(n.name)||"primitive"!==n.typeAnnotation?.typeKind)return;let l=n.typeAnnotation?.typeName||"String";"Long"===l&&(l="Integer");const o=n.name.replace(/\d+$/,"")||"";i.has(o)||(i.add(o),a.push({name:o,label:n.label||"",required:n.required||!1,type:l,length:"String"===l?n.databaseTypeAnnotation?.arguments?.length||255:void 0}))}),b.value=a,0===b.length)return g.value=!1,void x();Pn(Rn,{list:a.map(e=>({name:e.name,label:e.label}))},e=>{if(0!==e.result?.length){const n=new Set(e.result);b.value=a.filter(e=>n.has(e.name)),w.value=!0,(0,o.nextTick)(()=>{k.value=!1,A.value.toggleAllSelection()})}else x()},e=>{console.error(e)},()=>{g.value=!1})},x=(e="warning",n="暂无可回流到备选数据库的字段")=>{a.ElMessage.closeAll(),a.ElMessage[e](n)},w=(0,o.ref)(!1),A=(0,o.ref)(null),N=e=>({255:"短 255",4e3:"中 4000",16777215:"长 16777215"}[e]||e),k=(0,o.ref)(!1),E=(0,o.ref)(!1),C=e=>{const n=e.target;E.value=n.scrollWidth>n.clientWidth},I=(e,n)=>{k.value=0===e.length},_=(0,o.ref)(!1),$=()=>{_.value=!0,Pn(Sn,{list:A.value.getSelectionRows()},e=>{e.result?(x("success","添加成功"),w.value=!1):x("error",e.msg||"添加失败")},e=>{x("error",e)},()=>{_.value=!1})},{nameEditor:D,labelEditor:B,descriptionEditor:V,tableviewRef:L,isViewEntity:P,addItem:R,getRemoveTooltip:S,selectedItem:F,isOfficalEntityProperty:T,removeItem:M,renderList:O,moveUpItem:q,moveDownItem:z,tableHeight:j,setRowClassName:U,onContextMenuRow:K,onSelectRowWithDataType:W,handleDragend:H,getDisable:Z,onSetItemEdit:Y,onKeyUp:Q,onBlurName:J,errorScrollIntoView:X,hasInvalid:G,tooltipOpened:ee,itemNameValue:ne,onFocusName:te,onBlurLabel:le,isAppDeploying:oe,isPublishedComplexType:ae,showDatatype:ie,onDblClickDatatype:re,getDataTypeList:se,handleBlur:de,onChangeDatatype:ce,isOfficalEntity:pe,isComplexType:me,requireInput:ue,canSetDefaultValue:fe,IsError:ye,inTable:ve,toggleSelectAll:ge,setDisplay:be,inFilter:he,inForm:xe,inDetail:we,popperOptions:Ae,menuSelectedItem:Ne,popperExistMap:ke,popperVisibleMap:Ee,triggerRef:Ce,placement:Ie,onMenuPopperHide:_e,onMenuClick:$e,onMenuFindUsage:De,onMenuDelete:Be,typeName:Ve,scaleErrorMsg:Le,model:Pe,scaleOption:Re,decimalDisabled:Se,setScale:Fe,entityReference:Te,dataTypeList:Me,isReleationEntityError:Oe,onSaveReference:qe,onClearReference:ze,setDeleteRule:je,changeErrorMsgs:Ue,isTableOrExcelOrigin:Ke,onBlurDescription:We,showDatabasetype:He,sourceSyncErrMsgs:Ze,errorMsgs:Ye,entityPropertyColumnNameRules:Qe,entityPropertyColumnNamePlaceholder:Je,getEntityPropertyRules:Xe,entityPropertyPlaceholder:Ge,setDataType:en}=(0,o.inject)("$context");return(n,a)=>{const d=(0,o.resolveComponent)("s-others-icon"),c=(0,o.resolveComponent)("el-button"),x=(0,o.resolveComponent)("el-table-column"),R=(0,o.resolveComponent)("s-input"),en=(0,o.resolveComponent)("u-validator"),nn=(0,o.resolveComponent)("el-tooltip"),tn=(0,o.resolveComponent)("s-datatype-select"),ln=(0,o.resolveComponent)("el-checkbox"),on=(0,o.resolveComponent)("s-attr-input"),an=(0,o.resolveComponent)("el-table"),rn=(0,o.resolveComponent)("el-menu-item"),sn=(0,o.resolveComponent)("el-menu-item-group"),dn=(0,o.resolveComponent)("el-menu"),cn=(0,o.resolveComponent)("el-popover"),pn=(0,o.resolveComponent)("skeleton-render"),mn=(0,o.resolveComponent)("el-input-number"),un=(0,o.resolveComponent)("el-form-item"),fn=(0,o.resolveComponent)("el-option"),yn=(0,o.resolveComponent)("el-select"),vn=(0,o.resolveComponent)("el-form"),gn=(0,o.resolveComponent)("el-col"),bn=(0,o.resolveComponent)("el-row"),hn=(0,o.resolveComponent)("el-scrollbar"),xn=(0,o.resolveComponent)("el-dialog"),wn=(0,o.resolveDirective)("loading");return(0,o.openBlock)(),(0,o.createElementBlock)("div",null,[(0,o.unref)(P)?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:(0,o.normalizeClass)(["topIconGroup",n.$style.body]),style:{"margin-top":"0px","margin-bottom":"0px","border-bottom":"0px",height:"40px"}},[(0,o.createCommentVNode)(" 添加实体属性 "),(0,o.createVNode)(d,{name:"add",tooltip:"添加属性",button:"",onClick:t}),(0,o.createCommentVNode)(" 删除实体属性 "),(0,o.createVNode)(d,{name:"remove",button:"",tooltip:(0,o.unref)(S)(),disabled:!(0,o.unref)(F)||!(0,o.unref)(F).naslNode||(0,o.unref)(F).loading||(0,o.unref)(F).naslNode.primaryKey||(0,o.unref)(T)((0,o.unref)(F)),onClick:a[0]||(a[0]=e=>(0,o.unref)(M)((0,o.unref)(F)))},null,8,["tooltip","disabled"]),(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.icondivider)},"|",2),(0,o.createCommentVNode)(" 上移实体属性 "),(0,o.createVNode)(d,{name:"position-up",button:"",tooltip:(0,o.unref)(F)&&(0,o.unref)(F).naslNode&&!(0,o.unref)(F).loading&&(0,o.unref)(O)[0].naslNode.name!==(0,o.unref)(F).naslNode.name?"上移":"当前属性已置顶",disabled:!(0,o.unref)(F)||!(0,o.unref)(F).naslNode||(0,o.unref)(F).loading||(0,o.unref)(O)[0].naslNode.name===(0,o.unref)(F).naslNode.name,onClick:(0,o.unref)(q)},null,8,["tooltip","disabled","onClick"]),(0,o.createCommentVNode)(" 下移实体属性 "),(0,o.createVNode)(d,{name:"position-down",button:"",tooltip:(0,o.unref)(F)&&(0,o.unref)(F).naslNode&&!(0,o.unref)(F).loading&&(0,o.unref)(O)[(0,o.unref)(O).length-1].naslNode.name!==(0,o.unref)(F).naslNode.name?"下移":"当前属性已置底",disabled:!(0,o.unref)(F)||!(0,o.unref)(F).naslNode||(0,o.unref)(F).loading||(0,o.unref)(O)[(0,o.unref)(O).length-1].naslNode.name===(0,o.unref)(F).naslNode.name,onClick:(0,o.unref)(z)},null,8,["tooltip","disabled","onClick"]),(0,o.createCommentVNode)(" 一键添加到备选字段库 "),l.value?((0,o.openBlock)(),(0,o.createBlock)(c,{key:0,loading:g.value,onClick:h},{default:(0,o.withCtx)(()=>[...a[23]||(a[23]=[(0,o.createTextVNode)("一键添加到备选字段库",-1)])]),_:1},8,["loading"])):(0,o.createCommentVNode)("v-if",!0)],2)),(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.body),style:{"margin-top":"0px"}},[(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)([n.$style.bodywrap,"tableCell"])},[(0,o.createVNode)(an,{ref_key:"tableviewRef",ref:L,data:(0,o.unref)(O),"highlight-current-row":"",style:(0,o.normalizeStyle)([`min-width:950px;${(0,o.unref)(j)}`,{width:"100%"}]),class:(0,o.normalizeClass)((0,o.unref)(O).length>8?[n.$style.table,n.$style.tablescroll,"s-data-table-edit"]:[n.$style.table,"s-data-table-edit"]),value:(0,o.unref)(F)&&(0,o.unref)(F).naslNode.name,"value-field":"name","header-row-style":{height:"40px"},"cell-style":{padding:"0px"},"row-style":{height:"42px"},"row-class-name":(0,o.unref)(U),"empty-text":"暂无数据",onRowContextmenu:(0,o.unref)(K),onRowClick:(0,o.unref)(W),onHeaderDragend:(0,o.unref)(H),onContextmenu:a[10]||(a[10]=(0,o.withModifiers)(()=>{},["right","prevent"])),border:!0},{default:(0,o.withCtx)(()=>[(0,o.createCommentVNode)(" 主键/关联属性的icon "),(0,o.createVNode)(x,{width:"38",prop:"primaryKey",resizable:!1},{default:(0,o.withCtx)(({row:e,$index:t})=>[-1===t?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[],64)):((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:1},[e.naslNode.primaryKey?((0,o.openBlock)(),(0,o.createBlock)(d,{key:0,name:"key",class:(0,o.normalizeClass)([n.$style.iconBase,n.$style.iconKey])},null,8,["class"])):(0,o.createCommentVNode)("v-if",!0),e.naslNode.relationProperty?((0,o.openBlock)(),(0,o.createBlock)(d,{key:1,name:"link",class:(0,o.normalizeClass)([n.$style.iconBase,n.$style.iconLink])},null,8,["class"])):(0,o.createCommentVNode)("v-if",!0)],64))]),_:1}),(0,o.createCommentVNode)(" 标题 "),(0,o.createVNode)(x,{prop:"label","min-width":"107",label:"字段注释"},{header:(0,o.withCtx)(()=>[...a[24]||(a[24]=[(0,o.createElementVNode)("div",{class:"theadLable"},"字段注释",-1)])]),default:(0,o.withCtx)(({row:e,$index:t})=>[-1===t?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[],64)):e.loading||e.naslNode.parentNode.loading||(0,o.unref)(P)?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:2},[(0,o.createCommentVNode)(" 禁用状态 "),(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.text)},[(0,o.createCommentVNode)(" 之前仅仅为 item.label 但是实际上在item 对象中没有label属性，恐在特殊情况下存在，故范围限制为 区分 viewEntity "),(0,o.createElementVNode)("span",null,(0,o.toDisplayString)((0,o.unref)(P)?e.naslNode.label:e.label),1)],2)],2112)):((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:1},[(0,o.createCommentVNode)(" 非禁用状态 "),(0,o.createCommentVNode)(" 展示态 "),"label"!==e.edit?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:(0,o.normalizeClass)(n.$style.edit),onDblclick:n=>(0,o.unref)(Y)(e,"label",!0),tabindex:"0",onKeyup:n=>(0,o.unref)(Q)(n,e,"label"),title:e.naslNode.label},[(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.text)},[(0,o.createElementVNode)("span",{class:(0,o.normalizeClass)(n.$style.textContent)},(0,o.toDisplayString)(e.naslNode.label),3),(0,o.withDirectives)((0,o.createVNode)(d,{name:"edit",class:(0,o.normalizeClass)([n.$style.iconBase,n.$style.iconEdit]),onClick:n=>(0,o.unref)(Y)(e,"label",!0)},null,8,["class","onClick"]),[[o.vShow,!(0,o.unref)(T)(e)]])],2)],42,Fn)):((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:1},[(0,o.createCommentVNode)(" 编辑态 "),(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.editwrap)},[(0,o.createCommentVNode)(" value 传入的是被验证的值 "),(0,o.createCommentVNode)(" validate-result 来调整 是否存在非法项 "),(0,o.createVNode)(en,{ref:"labelValidatorRef",value:e.naslNode.label,rules:"maxLength(63)",class:(0,o.normalizeClass)(n.$style.validator),"error-display":"appear","error-append-to-body":"",onBlurValid:n=>(0,o.unref)(le)(e,n.value),onBlurInvalid:(0,o.unref)(X),onValidateResult:a[2]||(a[2]=e=>G.value=!e.valid)},{default:(0,o.withCtx)(t=>[(0,o.createVNode)(R,{placeholder:"请输入标题","model-value":e.naslNode.label,ref_key:"labelEditor",ref:B,class:(0,o.normalizeClass)(n.$style.input),onFocus:n=>{return t=e.naslNode.label,void(s.value=t);var t},"onBlur:value":e=>(async(e,n)=>{i.value=!1,s.value="",r.value=[],e=e.replace(/_/g,""),n.blurFn(e),u.value&&((e=>{const n=F.value?.naslNode;if("EntityProperty"===n?.concept){n.app.emit("collect:start",{actionMsg:"数据建模插件更新字段名"});const t=n.parentNode?.getPropertyUniqueName?.(e.name)||e.name,l="Integer"===e.type?"Long":e.type,a={name:t,columnName:t,required:e.required,typeAnnotation:{concept:"TypeAnnotation",typeKind:"primitive",typeNamespace:"nasl.core",typeName:l}};if("String"===e.type&&e.length){const t=n.toJSON().rules.find(e=>e.startsWith("minLength"));Object.assign(a,{databaseTypeAnnotation:{concept:"DatabaseTypeAnnotation",typeName:"varchar",arguments:{length:e.length}},rules:[t,`maxLength(${e.length})`].filter(Boolean)})}n.update(a),setTimeout(()=>{n.app.emit("collect:end")}),(0,o.nextTick)(async()=>{try{await(v.value?.validate())}catch(e){Y(F.value,"name",!0)}})}})(u.value),u.value=null)})(e,t),onInput:e=>((e,n)=>{i.value=!0,s.value=e,n.inputChange(e),m.value=!0,p()})(e,t),onKeyup:a[1]||(a[1]=(0,o.withKeys)(e=>e.target.blur(),["enter"]))},null,8,["model-value","class","onFocus","onBlur:value","onInput"])]),_:2},1032,["value","class","onBlurValid","onBlurInvalid"])],2)],2112))],64))]),_:1}),(0,o.createCommentVNode)(" 名称 "),(0,o.createVNode)(x,{label:"字段名",prop:"name","min-width":"87"},{header:(0,o.withCtx)(()=>[...a[25]||(a[25]=[(0,o.createElementVNode)("div",{class:"theadLable"},"字段名",-1)])]),default:(0,o.withCtx)(({row:e,$index:t})=>[-1===t?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[],64)):(0,o.unref)(Z)(e)?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:2},[(0,o.createCommentVNode)(" 禁用状态 "),(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.text)},[(0,o.createElementVNode)("span",null,(0,o.toDisplayString)(e.naslNode.name),1)],2)],2112)):((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:1},[(0,o.createCommentVNode)(" 非禁用状态 "),(0,o.createCommentVNode)(" 展示态 "),"name"!==e.edit?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,tabindex:"0",class:(0,o.normalizeClass)(n.$style.edit),title:e.naslNode.name,onDblclick:n=>(0,o.unref)(Y)(e,"name",!0),onKeyup:n=>(0,o.unref)(Q)(n,e,"name")},[(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.text)},[(0,o.createElementVNode)("span",{class:(0,o.normalizeClass)(n.$style.textContent)},(0,o.toDisplayString)(e.naslNode.name),3),(0,o.createVNode)(d,{name:"edit",class:(0,o.normalizeClass)([n.$style.iconBase,n.$style.iconEdit]),onClick:n=>(0,o.unref)(Y)(e,"name",!0)},null,8,["class","onClick"])],2)],42,Tn)):((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:1},[(0,o.createCommentVNode)(" 编辑态 "),(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.editwrap)},[(0,o.createCommentVNode)(" value 传入的是被验证的值 "),(0,o.createCommentVNode)(" validate-result 来调整 是否存在非法项 "),(0,o.createVNode)(en,{value:e.naslNode.name,rules:(0,o.unref)(Xe)(e.naslNode),class:(0,o.normalizeClass)(n.$style.validator),"error-display":"appear","error-append-to-body":"",onBlurValid:n=>(0,o.unref)(J)(e,n.value),onBlurInvalid:(0,o.unref)(X),onValidateResult:a[5]||(a[5]=e=>G.value=!e.valid)},{default:(0,o.withCtx)(t=>[(0,o.createCommentVNode)(" “属性名”为空是显示提示信息 "),(0,o.createVNode)(nn,{visible:"entityAttribute"===(0,o.unref)(ee)&&!(0,o.unref)(ne),placement:"top-start",content:"属性为英文字母、数字和下划线，且首字母小写"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(R,{placeholder:(0,o.unref)(Ge),"model-value":e.naslNode.name,ref_key:"nameEditor",ref:D,class:(0,o.normalizeClass)(n.$style.input),onFocus:n=>(0,o.unref)(te)(e),"onBlur:value":e=>t.blurFn(e),onInput:e=>t.inputChange(e),onKeyup:a[3]||(a[3]=(0,o.withKeys)(e=>e.target.blur(),["enter"])),"onUpdate:modelValue":a[4]||(a[4]=e=>ne.value=e)},null,8,["placeholder","model-value","class","onFocus","onBlur:value","onInput"])]),_:2},1032,["visible"])]),_:2},1032,["value","rules","class","onBlurValid","onBlurInvalid"])],2)],2112))],64))]),_:1}),(0,o.createCommentVNode)(" 数据类型 "),(0,o.createVNode)(x,{label:"数据类型","min-width":"247"},{header:(0,o.withCtx)(()=>[...a[26]||(a[26]=[(0,o.createElementVNode)("div",{class:"theadLable"},"数据类型",-1)])]),default:(0,o.withCtx)(({row:e,$index:t})=>[-1===t?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[],64)):((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:1},[(0,o.unref)(oe)?((0,o.openBlock)(),(0,o.createBlock)(nn,{key:0,content:"应用发布中，暂不能修改",placement:"bottom-start"},{default:(0,o.withCtx)(()=>[(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.text)},[(0,o.createElementVNode)("span",null,(0,o.toDisplayString)((0,o.unref)(ie)(e)),1)],2)]),_:2},1024)):(0,o.unref)(Z)(e)||(0,o.unref)(ae)(e)?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:1},[(0,o.createCommentVNode)(" 禁用状态 / 已经发布过的复合类型 "),(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.text)},[(0,o.createElementVNode)("span",null,(0,o.toDisplayString)((0,o.unref)(ie)(e)),1)],2)],64)):((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:2},[(0,o.createCommentVNode)(" 非禁用状态 "),(0,o.createCommentVNode)(" 展示态 "),"datatype"!==e.edit?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,tabindex:"0",class:(0,o.normalizeClass)(n.$style.edit),ref:`datatype${e.naslNode.id}`,title:(0,o.unref)(ie)(e),onDblclick:n=>(0,o.unref)(re)(e,n),onKeyup:n=>(0,o.unref)(Q)(n,e,"datatype")},[(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.text)},[(0,o.createElementVNode)("span",{class:(0,o.normalizeClass)(n.$style.textContent)},(0,o.toDisplayString)((0,o.unref)(ie)(e)),3),(0,o.createVNode)(d,{name:"edit",class:(0,o.normalizeClass)([n.$style.iconBase,n.$style.iconEdit]),onClick:n=>((0,o.unref)(se)(),(0,o.unref)(Y)(e,"datatype",!1))},null,8,["class","onClick"])],2)],42,Mn)):((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:1},[(0,o.createCommentVNode)(" 编辑态 "),(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.editwrap)},[(0,o.createVNode)(nn,{content:(0,o.unref)(oe)?"应用发布中，暂不能修改":"",placement:"bottom-start"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(tn,{unionable:!1,"no-union-subtype":!0,"data-type-list":e.naslNode.lastVersion?(0,o.unref)(Me):void 0,"last-version":e.naslNode.lastVersion,"type-annotation":e.naslNode.typeAnnotation,concept:e.naslNode.entity.concept,"show-system-types":!1,"show-generic-types":!0,"show-entity":!0,"show-structures":!0,emptyable:!1,hasAnonymousStructure:!0,disabled:e.naslNode.readonly||(0,o.unref)(oe)||(0,o.unref)(ae)(e),onBlur:n=>(0,o.unref)(de)(e),onChange:(0,o.unref)(ce)},null,8,["data-type-list","last-version","type-annotation","concept","disabled","onBlur","onChange"])]),_:2},1032,["content"])],2)],2112))],64))],64))]),_:1}),(0,o.createCommentVNode)(" 是否必填 "),(0,o.createVNode)(x,{label:"是否必填",width:"70",prop:"required",resizable:!1},{default:(0,o.withCtx)(({row:e,$index:t})=>[-1===t?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[],64)):((0,o.openBlock)(),(0,o.createElementBlock)("div",On,[(0,o.createVNode)(ln,{modelValue:e.naslNode.required,"onUpdate:modelValue":n=>e.naslNode.required=n,disabled:(0,o.unref)(Z)(e)||(0,o.unref)(me)(e)||(0,o.unref)(pe)(e),tabindex:!1===e.editable||e.loading||e.naslNode.parentNode.loading?-1:0,class:(0,o.normalizeClass)(n.$style.checkbox),onChange:n=>(0,o.unref)(ue)(e,n)},null,8,["modelValue","onUpdate:modelValue","disabled","tabindex","class","onChange"])]))]),_:1}),(0,o.createCommentVNode)(" 默认值 "),(0,o.createVNode)(x,{label:"默认值",prop:"defaultValue",width:"120",resizable:!1},{default:(0,o.withCtx)(({row:e})=>[["createdTime","updatedTime"].includes(e.naslNode.name)?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:(0,o.normalizeClass)(n.$style.text)},[...a[27]||(a[27]=[(0,o.createElementVNode)("span",null,"自动生成",-1)])],2)):["createdBy","updatedBy"].includes(e.naslNode.name)?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:1,class:(0,o.normalizeClass)(n.$style.text)},[...a[28]||(a[28]=[(0,o.createElementVNode)("span",null,"（无）",-1)])],2)):(0,o.unref)(fe)(e)?e.loading||e.naslNode.parentNode.loading||"manual"!==e.naslNode.generationRule?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:3,class:(0,o.normalizeClass)(n.$style.text)},["auto"===e.naslNode.generationRule?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:(0,o.normalizeClass)(n.$style.text)},[...a[30]||(a[30]=[(0,o.createElementVNode)("span",null,"自动生成",-1)])],2)):((0,o.openBlock)(),(0,o.createElementBlock)("span",qn,(0,o.toDisplayString)(e.naslNode.defaultValue),1))],2)):((0,o.openBlock)(),(0,o.createBlock)(on,{key:4,title:"默认值绑定","node-concept":"defaultValue",name:e.naslNode.name,"parent-node":e.naslNode,node:e.naslNode.defaultValue,class:(0,o.normalizeClass)({[n.$style.typeError]:(0,o.unref)(ye)(e.naslNode)})},null,8,["name","parent-node","node","class"])):((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:2,class:(0,o.normalizeClass)(n.$style.text)},[...a[29]||(a[29]=[(0,o.createElementVNode)("span",null,"（无）",-1)])],2))]),_:1}),(0,o.createCommentVNode)(" 显示在表格 "),(0,o.createVNode)(x,{width:"100",prop:"display.inTable",resizable:!1},{header:(0,o.withCtx)(()=>[(0,o.createVNode)(ln,{label:"显示在表格",class:(0,o.normalizeClass)(n.$style.checkbolabel),"model-value":(0,o.unref)(ve),onChange:a[6]||(a[6]=e=>(0,o.unref)(ge)(e,"inTable"))},null,8,["class","model-value"])]),default:(0,o.withCtx)(({row:e,$index:t})=>[-1===t?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[],64)):((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:1,"data-item-id":e.id},[(0,o.createVNode)(ln,{"model-value":e.naslNode.display.inTable,disabled:e.loading||e.naslNode.parentNode.loading,class:(0,o.normalizeClass)(n.$style.checkbox),onChange:n=>(0,o.unref)(be)(e,n,"inTable")},null,8,["model-value","disabled","class","onChange"])],8,zn))]),_:1}),(0,o.createCommentVNode)(" 显示在筛选 "),(0,o.createVNode)(x,{width:"100",prop:"display.inFilter",resizable:!1},{header:(0,o.withCtx)(()=>[(0,o.createVNode)(ln,{label:"显示在筛选",class:(0,o.normalizeClass)(n.$style.checkbolabel),"model-value":(0,o.unref)(he),onChange:a[7]||(a[7]=e=>(0,o.unref)(ge)(e,"inFilter"))},null,8,["class","model-value"])]),default:(0,o.withCtx)(({row:e,$index:t})=>[-1===t?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[],64)):((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:1,"data-item-id":e.id},[(0,o.createVNode)(ln,{"model-value":e.naslNode.display.inFilter,disabled:e.loading||e.naslNode.parentNode.loading||(0,o.unref)(me)(e),class:(0,o.normalizeClass)(n.$style.checkbox),onChange:n=>(0,o.unref)(be)(e,n,"inFilter")},null,8,["model-value","disabled","class","onChange"])],8,jn))]),_:1}),(0,o.createCommentVNode)(" 显示在表单 "),(0,o.createVNode)(x,{width:"100",prop:"display.inForm",resizable:!1},{header:(0,o.withCtx)(()=>[(0,o.createVNode)(ln,{label:"显示在表单",class:(0,o.normalizeClass)(n.$style.checkbolabel),"model-value":(0,o.unref)(xe),onChange:a[8]||(a[8]=e=>(0,o.unref)(ge)(e,"inForm"))},null,8,["class","model-value"])]),default:(0,o.withCtx)(({row:e,$index:t})=>[-1===t?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[],64)):((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:1,"data-item-id":e.id},[(0,o.createVNode)(ln,{"model-value":e.naslNode.display.inForm,class:(0,o.normalizeClass)(n.$style.checkbox),disabled:e.loading||e.naslNode.parentNode.loading||(0,o.unref)(me)(e),onChange:n=>(0,o.unref)(be)(e,n,"inForm")},null,8,["model-value","class","disabled","onChange"])],8,Un))]),_:1}),(0,o.createCommentVNode)(" 显示在详情 "),(0,o.createVNode)(x,{width:"100",prop:"display.inDetail",resizable:!1},{header:(0,o.withCtx)(()=>[(0,o.createVNode)(ln,{label:"显示在详情",class:(0,o.normalizeClass)(n.$style.checkbolabel),"model-value":(0,o.unref)(we),onChange:a[9]||(a[9]=e=>(0,o.unref)(ge)(e,"inDetail"))},null,8,["class","model-value"])]),default:(0,o.withCtx)(({row:e,$index:t})=>[-1===t?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[],64)):((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:1,"data-item-id":e.id},[(0,o.createVNode)(ln,{"model-value":e.naslNode.display.inDetail,disabled:e.loading||e.naslNode.parentNode.loading,class:(0,o.normalizeClass)(n.$style.checkbox),onChange:n=>(0,o.unref)(be)(e,n,"inDetail")},null,8,["model-value","disabled","class","onChange"])],8,Kn))]),_:1})]),_:1},8,["data","style","class","value","row-class-name","onRowContextmenu","onRowClick","onHeaderDragend"]),(0,o.createCommentVNode)(" 右键点击 "),(0,o.unref)(Ne)&&(0,o.unref)(ke)[(0,o.unref)(Ne).id]?((0,o.openBlock)(),(0,o.createBlock)(cn,{key:0,"disabled-scroll":!0,trigger:"click",ref:"menuPopper","popper-options":(0,o.unref)(Ae),visible:(0,o.unref)(Ee)[(0,o.unref)(Ne)&&(0,o.unref)(Ne).id],"onUpdate:visible":a[12]||(a[12]=e=>(0,o.unref)(Ee)[(0,o.unref)(Ne)&&(0,o.unref)(Ne).id]=e),"virtual-ref":(0,o.unref)(Ce),placement:(0,o.unref)(Ie),"show-arrow":!1,onHide:(0,o.unref)(_e)},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(dn,{class:(0,o.normalizeClass)(n.$contextmenu.menu),onClick:(0,o.unref)($e)},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(sn,{class:(0,o.normalizeClass)(n.$contextmenu.group),title:"属性"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(rn,{class:(0,o.normalizeClass)(n.$contextmenu.item),onClick:(0,o.unref)(De)},{default:(0,o.withCtx)(()=>[...a[31]||(a[31]=[(0,o.createTextVNode)("查找引用",-1)])]),_:1},8,["class","onClick"]),(0,o.createVNode)(rn,{class:(0,o.normalizeClass)(n.$contextmenu.item),onClick:a[11]||(a[11]=e=>(0,o.unref)(Be)((0,o.unref)(M))),disabled:(0,o.unref)(Ne)&&(0,o.unref)(Ne).primaryKey||(0,o.unref)(T)({naslNode:(0,o.unref)(Ne)})||(0,o.unref)(P)},{default:(0,o.withCtx)(()=>[...a[32]||(a[32]=[(0,o.createTextVNode)(" 删除 ",-1)])]),_:1},8,["class","disabled"])]),_:1},8,["class"])]),_:1},8,["class","onClick"])]),_:1},8,["popper-options","visible","virtual-ref","placement","onHide"])):(0,o.createCommentVNode)("v-if",!0)],2),(0,o.unref)(F)?((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,{key:0},[(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)([n.$style.flexgrid,n.$style.bodywrap1])},[(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)([n.$style.gridcolumn,"extraForm"])},[(0,o.createVNode)(vn,{ref:"selectedItemForm",model:(0,o.unref)(F),class:(0,o.normalizeClass)([n.$style.reffrom,n.$style.blockFromLayout,"s-data-attr-designer-form"]),"label-width":"85px","label-position":"right",inline:!0},{default:(0,o.withCtx)(()=>[(0,o.createCommentVNode)(" 最 大/小 值/长度 "),((0,o.openBlock)(),(0,o.createBlock)(pn,{name:"views/data/components/entity-field-rules/index",property:(0,o.unref)(F).naslNode,key:"rules_"+(0,o.unref)(F).naslNode.name,disabled:(0,o.unref)(F).loading||(0,o.unref)(F).naslNode.parentNode.loading||!1===(0,o.unref)(F).naslNode.editable||(0,o.unref)(P),"is-view-entity":(0,o.unref)(P),direction:"horizontal",class:(0,o.normalizeClass)(n.$style.rules)},null,8,["property","disabled","is-view-entity","class"])),(0,o.createCommentVNode)(" 小数位数 "),"Decimal"===(0,o.unref)(Ve)?((0,o.openBlock)(),(0,o.createBlock)(un,{key:0,label:"小数位数"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(mn,{placeholder:"请输入小数位数",color:(0,o.unref)(Le)?"error":"",modelValue:(0,o.unref)(Pe).scale,"onUpdate:modelValue":a[13]||(a[13]=e=>(0,o.unref)(Pe).scale=e),min:(0,o.unref)(Re).min,max:(0,o.unref)(Re).max,"controls-position":"right",disabled:(0,o.unref)(Se)((0,o.unref)(F))||(0,o.unref)(P),"value-on-clear":0,onKeyup:a[14]||(a[14]=(0,o.withKeys)(e=>e.target.blur(),["enter"])),onChange:(0,o.unref)(Fe)},null,8,["color","modelValue","min","max","disabled","onChange"]),(0,o.unref)(Le)?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:(0,o.normalizeClass)(n.$style.scaleErrorMsg)},[(0,o.createVNode)(d,{name:"solid-hint"}),(0,o.createTextVNode)(" "+(0,o.toDisplayString)((0,o.unref)(Le)),1)],2)):(0,o.createCommentVNode)("v-if",!0)]),_:1})):(0,o.createCommentVNode)("v-if",!0),(0,o.createCommentVNode)(" 关联属性 "),((0,o.openBlock)(),(0,o.createBlock)(un,{key:(0,o.unref)(F).naslNode.name},{label:(0,o.withCtx)(()=>[(0,o.createElementVNode)("div",Wn,[a[33]||(a[33]=(0,o.createTextVNode)(" 关联属性 ",-1)),(0,o.createVNode)(d,{name:"link2",class:(0,o.normalizeClass)(n.$style.iconLink2)},null,8,["class"])])]),default:(0,o.withCtx)(()=>[(0,o.createVNode)(pn,{name:"views/data/entity-reference/index",entity:e.entity,property:(0,o.unref)(F).naslNode,value:(0,o.unref)(Te),disabled:(0,o.unref)(F).loading||(0,o.unref)(F).naslNode.parentNode.loading||(0,o.unref)(P),"data-type-list":(0,o.unref)(F).naslNode.lastVersion?(0,o.unref)(Me):void 0,error:(0,o.unref)(Oe)((0,o.unref)(F).naslNode),onSave:(0,o.unref)(qe),onClear:(0,o.unref)(ze)},null,8,["entity","property","value","disabled","data-type-list","error","onSave","onClear"])]),_:1})),(0,o.createCommentVNode)(" 属性记录 "),(0,o.unref)(F).naslNode.relationProperty?((0,o.openBlock)(),(0,o.createBlock)(un,{key:1,label:"关联属性实体记录删除规则",layout:"block",class:"relationDelRule"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(yn,{style:{width:"240px"},modelValue:(0,o.unref)(F).naslNode.deleteRule,"onUpdate:modelValue":a[15]||(a[15]=e=>(0,o.unref)(F).naslNode.deleteRule=e),placeholder:"请选择",disabled:(0,o.unref)(F).loading||(0,o.unref)(F).naslNode.parentNode.loading||(0,o.unref)(P),onChange:(0,o.unref)(je)},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(fn,{label:"不允许删除",value:"protect"}),(0,o.createVNode)(fn,{label:"允许删除且同时删除本实体记录",value:"cascade"})]),_:1},8,["modelValue","disabled","onChange"])]),_:1})):(0,o.createCommentVNode)("v-if",!0),(0,o.createCommentVNode)(" 主键生成规则 "),(0,o.unref)(F).naslNode.primaryKey?((0,o.openBlock)(),(0,o.createBlock)(un,{key:2,label:"主键生成规则",placement:"bottom"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(pn,{name:"views/data/components/entity-primarykey-rules/index",disabled:(0,o.unref)(P),entity:e.entity,"selected-item":(0,o.unref)(F).naslNode,onChangeErrorMsgs:(0,o.unref)(Ue)},null,8,["disabled","entity","selected-item","onChangeErrorMsgs"])]),_:1})):(0,o.createCommentVNode)("v-if",!0),(0,o.createCommentVNode)(" 数据库列名 "),(0,o.createVNode)(un,{label:"数据库列名",placement:"bottom"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(en,{ref_key:"columnNameValidatorRef",ref:v,style:{width:"100%"},rules:(0,o.unref)(Qe),value:(0,o.unref)(F).naslNode.columnName||(0,o.unref)(F).naslNode.name,onBlurDirtyValid:a[17]||(a[17]=e=>(0,o.unref)(F).naslNode.setColumnName(e.value))},{default:(0,o.withCtx)(e=>[(0,o.createVNode)(R,{placeholder:(0,o.unref)(Je),"model-value":(0,o.unref)(F).naslNode.columnName||(0,o.unref)(F).naslNode.name,disabled:(0,o.unref)(Ke)||(0,o.unref)(P),onChange:e.blurChange,onInput:n=>e.inputChange(n),onKeyup:a[16]||(a[16]=(0,o.withKeys)((0,o.withModifiers)(e=>e.target.blur(),["stop"]),["enter"]))},null,8,["placeholder","model-value","disabled","onChange","onInput"])]),_:1},8,["rules","value"])]),_:1}),(0,o.createCommentVNode)(" 描述 "),(0,o.createVNode)(un,{label:"描述",prop:"description"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(en,{value:(0,o.unref)(F).naslNode.description,rules:"maxLength(63)",class:(0,o.normalizeClass)(n.$style.validator),onBlurValid:a[18]||(a[18]=e=>(0,o.unref)(We)((0,o.unref)(F),e.value)),onBlurInvalid:(0,o.unref)(X),onValidateResult:a[19]||(a[19]=e=>G.value=!e.valid)},{default:(0,o.withCtx)(e=>[(0,o.createVNode)(R,{type:"textarea",ref_key:"descriptionEditor",ref:V,placeholder:"请输入描述","model-value":(0,o.unref)(F).naslNode.description,disabled:(0,o.unref)(F).loading||(0,o.unref)(F).naslNode.parentNode.loading||(0,o.unref)(P),"onBlur:value":n=>e.blurFn(n),onKeyup:(0,o.withKeys)(n=>e.blurFn(),["enter"]),onInput:n=>e.inputChange(n)},null,8,["model-value","disabled","onBlur:value","onKeyup","onInput"])]),_:1},8,["value","class","onBlurInvalid"])]),_:1})]),_:1},8,["model","class"])],2)],2),(0,o.unref)(He)?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:(0,o.normalizeClass)(n.$style.advancedWrap)},[(0,o.createVNode)(vn,{disabled:(0,o.unref)(P),"label-width":"80px",gap:"small",class:"s-data-attr-designer-form"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(pn,{name:"views/data/components/entity-property-databasetype/index",property:(0,o.unref)(F).naslNode},null,8,["property"])]),_:1},8,["disabled"])],2)):(0,o.createCommentVNode)("v-if",!0)],64)):(0,o.createCommentVNode)("v-if",!0),(0,o.withDirectives)((0,o.createElementVNode)("div",{class:(0,o.normalizeClass)(n.$style.bodywrap1)},[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)((0,o.unref)(Ye),e=>((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:e,class:(0,o.normalizeClass)(n.$propertyDesigner.errorMsg)},[(0,o.createElementVNode)("i",{class:(0,o.normalizeClass)(n.$propertyDesigner.infoicon)},null,2),(0,o.createElementVNode)("span",null,(0,o.toDisplayString)(e),1)],2))),128)),(0,o.createCommentVNode)(" 实体在同步数据源时产生的错误信息 "),((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)((0,o.unref)(Ze),e=>((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:e,class:(0,o.normalizeClass)(n.$propertyDesigner.errorMsg)},[(0,o.createElementVNode)("i",{class:(0,o.normalizeClass)(n.$propertyDesigner.infoicon)},null,2),(0,o.createElementVNode)("span",null,(0,o.toDisplayString)(e),1)],2))),128))],2),[[o.vShow,(0,o.unref)(Ye).length||(0,o.unref)(Ze).length]])],2),(0,o.createCommentVNode)(" 查询弹出框 "),(0,o.createVNode)(cn,{visible:i.value,"virtual-ref":(0,o.unref)(B),"show-arrow":!1,placement:"bottom-start",width:340,"virtual-triggering":""},{default:(0,o.withCtx)(()=>[(0,o.withDirectives)(((0,o.openBlock)(),(0,o.createElementBlock)("div",Hn,[0===r.value.length?((0,o.openBlock)(),(0,o.createElementBlock)("div",Zn,[(0,o.createVNode)(d,{name:"hint",class:"centerFlex",style:{"font-size":"28px","margin-bottom":"20px"}}),a[34]||(a[34]=(0,o.createElementVNode)("span",{class:"centerFlex"},"暂无推荐字段",-1))])):((0,o.openBlock)(),(0,o.createElementBlock)("div",Yn,[(0,o.createVNode)(hn,{height:"250px"},{default:(0,o.withCtx)(()=>[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(r.value,e=>((0,o.openBlock)(),(0,o.createElementBlock)("div",{class:"reflowPopoverItem",key:e.id,onMouseenter:n=>u.value=e,onMouseleave:a[20]||(a[20]=e=>u.value=null)},[(0,o.createVNode)(bn,{gutter:10},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(gn,{span:9,class:"sle"},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(nn,{content:e.name,placement:"top","show-after":500,disabled:!E.value},{default:(0,o.withCtx)(()=>[(0,o.createElementVNode)("div",{class:"tooltip-trigger",innerHTML:f(e.name,e.matchedNames),onMouseenter:C},null,40,Jn)]),_:2},1032,["content","disabled"])]),_:2},1024),(0,o.createVNode)(gn,{class:"sle",span:8},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(nn,{content:y(e),placement:"top","show-after":500,disabled:!E.value},{default:(0,o.withCtx)(()=>[(0,o.createElementVNode)("div",{class:"tooltip-trigger",onMouseenter:C},(0,o.toDisplayString)(y(e)),33)]),_:2},1032,["content","disabled"])]),_:2},1024),(0,o.createVNode)(gn,{span:4},{default:(0,o.withCtx)(()=>[(0,o.createTextVNode)((0,o.toDisplayString)(e.required?"必填":"非必填"),1)]),_:2},1024),(0,o.withDirectives)((0,o.createVNode)(gn,{span:3,style:{color:"#2383ff"}},{default:(0,o.withCtx)(()=>[...a[35]||(a[35]=[(0,o.createTextVNode)("使用",-1)])]),_:2},1536),[[o.vShow,u.value?.id===e.id]])]),_:2},1024)],40,Qn))),128))]),_:1})])),(0,o.createElementVNode)("div",Xn,[(0,o.createVNode)(d,{name:"hint",class:"warningIcon"}),a[36]||(a[36]=(0,o.createElementVNode)("span",null,"输入_，可进行词根匹配",-1))])])),[[wn,m.value]])]),_:1},8,["visible","virtual-ref"]),(0,o.createCommentVNode)(" 添加至备选数据库字段库弹窗 "),(0,o.createVNode)(xn,{modelValue:w.value,"onUpdate:modelValue":a[22]||(a[22]=e=>w.value=e),title:"一键添加到备选字段库",width:"50%"},{footer:(0,o.withCtx)(()=>[(0,o.createElementVNode)("div",Gn,[(0,o.createVNode)(c,{type:"primary",disabled:k.value,loading:_.value,onClick:$},{default:(0,o.withCtx)(()=>[...a[37]||(a[37]=[(0,o.createTextVNode)(" 确 定 ",-1)])]),_:1},8,["disabled","loading"]),(0,o.createVNode)(c,{onClick:a[21]||(a[21]=e=>w.value=!1)},{default:(0,o.withCtx)(()=>[...a[38]||(a[38]=[(0,o.createTextVNode)("取 消",-1)])]),_:1})])]),default:(0,o.withCtx)(()=>[(0,o.createVNode)(an,{ref_key:"reflowTableRef",ref:A,data:b.value,onSelect:I,onSelectAll:I},{default:(0,o.withCtx)(()=>[(0,o.createVNode)(x,{type:"selection",width:"40"}),(0,o.createVNode)(x,{label:"字段注释",prop:"label"}),(0,o.createVNode)(x,{label:"字段名",prop:"name"}),(0,o.createVNode)(x,{label:"数据类型",prop:"type"}),(0,o.createVNode)(x,{label:"是否必填",prop:"required"},{default:(0,o.withCtx)(e=>[(0,o.createElementVNode)("span",null,(0,o.toDisplayString)(e.row.required?"是":"否"),1)]),_:1}),(0,o.createVNode)(x,{label:"字段长度",prop:"length"},{default:(0,o.withCtx)(e=>{return[(0,o.createElementVNode)("span",null,(0,o.toDisplayString)((n=e.row,"String"===n.type?N(n.length):"-")),1)];var n}),_:1})]),_:1},8,["data"])]),_:1},8,["modelValue"])])}}};var nt=t(650),tt=t.n(nt),lt=t(968),ot=t.n(lt),at=t(953),it=t.n(at),rt=t(174),st=t.n(rt),dt=t(88),ct=t.n(dt),pt=t(971),mt=t.n(pt),ut=t(460),ft={};ft.styleTagTransform=mt(),ft.setAttributes=st(),ft.insert=it().bind(null,"head"),ft.domAPI=ot(),ft.insertStyleElement=ct(),tt()(ut.Z,ft);const yt=ut.Z&&ut.Z.locals?ut.Z.locals:void 0;var vt=t(151),gt={};gt.styleTagTransform=mt(),gt.setAttributes=st(),gt.insert=it().bind(null,"head"),gt.domAPI=ot(),gt.insertStyleElement=ct(),tt()(vt.Z,gt);const bt=vt.Z&&vt.Z.locals?vt.Z.locals:void 0;var ht=t(772),xt={};xt.styleTagTransform=mt(),xt.setAttributes=st(),xt.insert=it().bind(null,"head"),xt.domAPI=ot(),xt.insertStyleElement=ct(),tt()(ht.Z,xt);const wt=ht.Z&&ht.Z.locals?ht.Z.locals:void 0;var At=t(871),Nt={};Nt.styleTagTransform=mt(),Nt.setAttributes=st(),Nt.insert=it().bind(null,"head"),Nt.domAPI=ot(),Nt.insertStyleElement=ct(),tt()(At.Z,Nt),At.Z&&At.Z.locals&&At.Z.locals;var kt=t(770),Et={};Et.styleTagTransform=mt(),Et.setAttributes=st(),Et.insert=it().bind(null,"head"),Et.domAPI=ot(),Et.insertStyleElement=ct(),tt()(kt.Z,Et),kt.Z&&kt.Z.locals&&kt.Z.locals;var Ct=t(149);const It={};It.$propertyDesigner=yt,It.$style=bt,It.$contextmenu=wt;const _t=(0,Ct.Z)(et,[["__cssModules",It],["__scopeId","data-v-4dd96507"]]),$t={__name:"index",setup:e=>((0,o.useAttrs)(),(e,n)=>{const t=(0,o.resolveComponent)("skeleton-portal");return(0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,null,[(0,o.createCommentVNode)(" 实体属性编辑器 "),(0,o.createVNode)(t,{name:"views/data/entity-property-designer/render",method:"insert"},{default:(0,o.withCtx)(e=>[(0,o.createVNode)(_t,(0,o.normalizeProps)((0,o.guardReactiveProps)(e)),null,16)]),_:1})],2112)})};var Dt=t(448),Bt={};Bt.styleTagTransform=mt(),Bt.setAttributes=st(),Bt.insert=it().bind(null,"head"),Bt.domAPI=ot(),Bt.insertStyleElement=ct(),tt()(Dt.Z,Bt);const Vt=Dt.Z&&Dt.Z.locals?Dt.Z.locals:void 0,Lt={};Lt.$style=Vt;const Pt=(0,Ct.Z)($t,[["__cssModules",Lt]]),Rt=(0,n.createPlugin)(Pt)({name:"cust_aux_data_model_plugin",method:"insert",container:"left-side-nav/main/test2",dependencies:["store-ide","store-app","skeleton"]})})(),window.cust_aux_data_model_plugin=l})();
//# sourceMappingURL=cust_aux_data_model_plugin.js.map